{:	data{6"/hardware/goodfet24/{:default{	:raw"Æ<h1>GoodFET24</h1>

<p>The GoodFET24 is the fourteenth hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/goodfet41/">GoodFET41</a>
and the unreleased GoodFET23.  As it is designed for timing-sensitive
tasks, there is a crystal reference clock for each MSP430.  (The two
do not share a clock because it is useful to have them be out of phase
with one another.)
</p>

<p><b>N.B. This model does not yet have software support, and might
contain mistakes that will require significant design changes.  Unless
you really know what you're doing, build
the <a href="/hardware/goodfet41/">GoodFET41</a> instead.</b></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet24 of the subversion repository, or as
<a href="/releases/goodfet24.zip">goodfet24.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2247, 2248,
or 2249 chip.  Similarly, the MSP430F2001 may be replaced with other
MSP430 chips in that same package.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618, as 80-pin versions are also manufactured.</p>

<table border="1">
<tr><td>Name</td><td>Quantity</td><td>Package</td><td></td></tr>

<tr><td>U1</td><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>U2</td><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td></td><td>7</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td></td><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>R1, R2</td><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>CN1</td><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
<tr><td>SBW</td><td>1</td><td></td><td>Mill-Max 850-10-050-20-001000</td></tr>
<tr><td>JTAG</td><td>1</td><td></td><td>2x14 pin 0.1&quot; Male Header</td></tr>

<tr><td>U3</td><td>1</td><td>SOIC 8</td><td>LM358DR Op Amp</td></tr>
<tr><td>U4</td><td>1</td><td>VSSOP 8</td><td>74LVC1G53 2-Channel Mux</td></tr>
<tr><td>U5</td><td>1</td><td>TSSOP 14</td><td>MSP430F2001IDAR</td></tr>


<tr><td>Q1</td><td>1</td><td>X1123</td><td>32.768kHz Crystal</td></tr>
<tr><td>Q2</td><td>1</td><td>NX3225SA</td><td>16.000MHz Crystal</td></tr>
<tr><td>C4,C5</td><td>7</td><td>0603</td><td>8pF or as specific by 16MHz crystal</td></tr>

</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5533243752/" title="GoodFET24 Layout by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5097/5533243752_e1256d10f7.jpg" width="500" height="358" alt="GoodFET24 Layout" /></a>

<p>This schematic might help.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5532662355/" title="GoodFET24 Schematic by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5054/5532662355_0df882a8fa.jpg" width="500" height="460" alt="GoodFET24 Schematic" /></a>

<h2>Errata</h2>

<p>Nothing yet.</p>:	post"  <!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET24</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET24</h1>

<p>The GoodFET24 is the fourteenth hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/goodfet41/">GoodFET41</a>
and the unreleased GoodFET23.  As it is designed for timing-sensitive
tasks, there is a crystal reference clock for each MSP430.  (The two
do not share a clock because it is useful to have them be out of phase
with one another.)
</p>

<p><b>N.B. This model does not yet have software support, and might
contain mistakes that will require significant design changes.  Unless
you really know what you're doing, build
the <a href="/hardware/goodfet41/">GoodFET41</a> instead.</b></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet24 of the subversion repository, or as
<a href="/releases/goodfet24.zip">goodfet24.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2247, 2248,
or 2249 chip.  Similarly, the MSP430F2001 may be replaced with other
MSP430 chips in that same package.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618, as 80-pin versions are also manufactured.</p>

<table border="1">
<tr><td>Name</td><td>Quantity</td><td>Package</td><td></td></tr>

<tr><td>U1</td><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>U2</td><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td></td><td>7</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td></td><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>R1, R2</td><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>CN1</td><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
<tr><td>SBW</td><td>1</td><td></td><td>Mill-Max 850-10-050-20-001000</td></tr>
<tr><td>JTAG</td><td>1</td><td></td><td>2x14 pin 0.1&quot; Male Header</td></tr>

<tr><td>U3</td><td>1</td><td>SOIC 8</td><td>LM358DR Op Amp</td></tr>
<tr><td>U4</td><td>1</td><td>VSSOP 8</td><td>74LVC1G53 2-Channel Mux</td></tr>
<tr><td>U5</td><td>1</td><td>TSSOP 14</td><td>MSP430F2001IDAR</td></tr>


<tr><td>Q1</td><td>1</td><td>X1123</td><td>32.768kHz Crystal</td></tr>
<tr><td>Q2</td><td>1</td><td>NX3225SA</td><td>16.000MHz Crystal</td></tr>
<tr><td>C4,C5</td><td>7</td><td>0603</td><td>8pF or as specific by 16MHz crystal</td></tr>

</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5533243752/" title="GoodFET24 Layout by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5097/5533243752_e1256d10f7.jpg" width="500" height="358" alt="GoodFET24 Layout" /></a>

<p>This schematic might help.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5532662355/" title="GoodFET24 Schematic by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5054/5532662355_0df882a8fa.jpg" width="500" height="460" alt="GoodFET24 Schematic" /></a>

<h2>Errata</h2>

<p>Nothing yet.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
:	last@:pre"Æ<h1>GoodFET24</h1>

<p>The GoodFET24 is the fourteenth hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/goodfet41/">GoodFET41</a>
and the unreleased GoodFET23.  As it is designed for timing-sensitive
tasks, there is a crystal reference clock for each MSP430.  (The two
do not share a clock because it is useful to have them be out of phase
with one another.)
</p>

<p><b>N.B. This model does not yet have software support, and might
contain mistakes that will require significant design changes.  Unless
you really know what you're doing, build
the <a href="/hardware/goodfet41/">GoodFET41</a> instead.</b></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet24 of the subversion repository, or as
<a href="/releases/goodfet24.zip">goodfet24.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2247, 2248,
or 2249 chip.  Similarly, the MSP430F2001 may be replaced with other
MSP430 chips in that same package.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618, as 80-pin versions are also manufactured.</p>

<table border="1">
<tr><td>Name</td><td>Quantity</td><td>Package</td><td></td></tr>

<tr><td>U1</td><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>U2</td><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td></td><td>7</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td></td><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>R1, R2</td><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>CN1</td><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
<tr><td>SBW</td><td>1</td><td></td><td>Mill-Max 850-10-050-20-001000</td></tr>
<tr><td>JTAG</td><td>1</td><td></td><td>2x14 pin 0.1&quot; Male Header</td></tr>

<tr><td>U3</td><td>1</td><td>SOIC 8</td><td>LM358DR Op Amp</td></tr>
<tr><td>U4</td><td>1</td><td>VSSOP 8</td><td>74LVC1G53 2-Channel Mux</td></tr>
<tr><td>U5</td><td>1</td><td>TSSOP 14</td><td>MSP430F2001IDAR</td></tr>


<tr><td>Q1</td><td>1</td><td>X1123</td><td>32.768kHz Crystal</td></tr>
<tr><td>Q2</td><td>1</td><td>NX3225SA</td><td>16.000MHz Crystal</td></tr>
<tr><td>C4,C5</td><td>7</td><td>0603</td><td>8pF or as specific by 16MHz crystal</td></tr>

</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5533243752/" title="GoodFET24 Layout by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5097/5533243752_e1256d10f7.jpg" width="500" height="358" alt="GoodFET24 Layout" /></a>

<p>This schematic might help.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5532662355/" title="GoodFET24 Schematic by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5054/5532662355_0df882a8fa.jpg" width="500" height="460" alt="GoodFET24 Schematic" /></a>

<h2>Errata</h2>

<p>Nothing yet.</p>"/apps/spi/{;{	;"ª	<h1>SPI Application</h1>

<p>This application allows for communication by SPI,
the Serial Peripheral Interface.  Use the following pinout,
which is very similar to the JTAG pinout.</p>

<!--
<a href="http://www.flickr.com/photos/travisgoodspeed/3593286652/"
title="GoodFET SPI Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2466/3593286652_f849e74d18.jpg"
width="500" height="290" alt="GoodFET SPI Pinout" /></a>
-->

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>


<h2>Clients</h2>

<p>A Python
client, <a href="/clients/goodfet.spiflash/">goodfet.spiflash</a>, is
quite effective at reading, writing, and erasing SPI flash chips.</p>

<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
SPI application to properly set the I/O directions.</p>

<p>SPI is based upon the exchange of information as a duplex transaction.
As such, the READ (0x00) and WRITE (0x01) verbs are identical.  Each transmits
the bytes of the data buffer through MOSI, returning the result through
MISO.  !SS is dropped low at the beginning of a transaction,
then raised after all bytes have been exchanged.</p>

<p>There is also a <a href="http://travisgoodspeed.blogspot.com/2009/06/spi-client-tutorial-for-goodfet.html">
full tutorial</a> for the SPI application.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read 64 bytes from supplied 24-bit address.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write data to flash at 24-bit address.</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>SPI_JEDEC</td><td>Grab 3-byte JEDEC ID.</td></tr>
<tr><td>0x81</td><td>SPI_ERASE</td><td>Erase a Flash EEPROM.</td></tr>
</table>;"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Serial Peripheral Interface (SPI)</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>SPI Application</h1>

<p>This application allows for communication by SPI,
the Serial Peripheral Interface.  Use the following pinout,
which is very similar to the JTAG pinout.</p>

<!--
<a href="http://www.flickr.com/photos/travisgoodspeed/3593286652/"
title="GoodFET SPI Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2466/3593286652_f849e74d18.jpg"
width="500" height="290" alt="GoodFET SPI Pinout" /></a>
-->

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>


<h2>Clients</h2>

<p>A Python
client, <a href="/clients/goodfet.spiflash/">goodfet.spiflash</a>, is
quite effective at reading, writing, and erasing SPI flash chips.</p>

<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
SPI application to properly set the I/O directions.</p>

<p>SPI is based upon the exchange of information as a duplex transaction.
As such, the READ (0x00) and WRITE (0x01) verbs are identical.  Each transmits
the bytes of the data buffer through MOSI, returning the result through
MISO.  !SS is dropped low at the beginning of a transaction,
then raised after all bytes have been exchanged.</p>

<p>There is also a <a href="http://travisgoodspeed.blogspot.com/2009/06/spi-client-tutorial-for-goodfet.html">
full tutorial</a> for the SPI application.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read 64 bytes from supplied 24-bit address.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write data to flash at 24-bit address.</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>SPI_JEDEC</td><td>Grab 3-byte JEDEC ID.</td></tr>
<tr><td>0x81</td><td>SPI_ERASE</td><td>Erase a Flash EEPROM.</td></tr>
</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"ª	<h1>SPI Application</h1>

<p>This application allows for communication by SPI,
the Serial Peripheral Interface.  Use the following pinout,
which is very similar to the JTAG pinout.</p>

<!--
<a href="http://www.flickr.com/photos/travisgoodspeed/3593286652/"
title="GoodFET SPI Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2466/3593286652_f849e74d18.jpg"
width="500" height="290" alt="GoodFET SPI Pinout" /></a>
-->

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>


<h2>Clients</h2>

<p>A Python
client, <a href="/clients/goodfet.spiflash/">goodfet.spiflash</a>, is
quite effective at reading, writing, and erasing SPI flash chips.</p>

<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
SPI application to properly set the I/O directions.</p>

<p>SPI is based upon the exchange of information as a duplex transaction.
As such, the READ (0x00) and WRITE (0x01) verbs are identical.  Each transmits
the bytes of the data buffer through MOSI, returning the result through
MISO.  !SS is dropped low at the beginning of a transaction,
then raised after all bytes have been exchanged.</p>

<p>There is also a <a href="http://travisgoodspeed.blogspot.com/2009/06/spi-client-tutorial-for-goodfet.html">
full tutorial</a> for the SPI application.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read 64 bytes from supplied 24-bit address.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write data to flash at 24-bit address.</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>SPI_JEDEC</td><td>Grab 3-byte JEDEC ID.</td></tr>
<tr><td>0x81</td><td>SPI_ERASE</td><td>Erase a Flash EEPROM.</td></tr>
</table>"/hardware/goodfet11/{;{	;"Ý<h1>GoodFET11</h1>

<p>The GoodFET11 is the second hardware revision of the GoodFET.
It fixes minor errata from the GoodFET10 but adds no new features
other than a <strike>optional</strike> 32KHz crystal.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in 
/branches/goodfet11 of Subversion, or as
<a href="/releases/goodfet11.zip">goodfet11.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232R </td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>47K Pull-up Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>TC26H</td><td>32.768kHz Crystal</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the 
<a href="http://www.flickr.com/photos/travisgoodspeed/3574993035/">
following Flickr image's annotations</a>.
</p>
<a href="http://www.flickr.com/photos/travisgoodspeed/3574993035/" title="GoodFET12 by Travis Goodspeed, on Flickr"><img src="http://farm3.static.flickr.com/2460/3574993035_9f01b1bfa3.jpg" width="500" height="375" alt="GoodFET11" /></a>

<h2>Errata</h2>

<p>The documentation previously specified a 32kHz crystal.
Use 32.768kHz, not 32.000kHz.</p>;"7<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET11</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET11</h1>

<p>The GoodFET11 is the second hardware revision of the GoodFET.
It fixes minor errata from the GoodFET10 but adds no new features
other than a <strike>optional</strike> 32KHz crystal.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in 
/branches/goodfet11 of Subversion, or as
<a href="/releases/goodfet11.zip">goodfet11.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232R </td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>47K Pull-up Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>TC26H</td><td>32.768kHz Crystal</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the 
<a href="http://www.flickr.com/photos/travisgoodspeed/3574993035/">
following Flickr image's annotations</a>.
</p>
<a href="http://www.flickr.com/photos/travisgoodspeed/3574993035/" title="GoodFET12 by Travis Goodspeed, on Flickr"><img src="http://farm3.static.flickr.com/2460/3574993035_9f01b1bfa3.jpg" width="500" height="375" alt="GoodFET11" /></a>

<h2>Errata</h2>

<p>The documentation previously specified a 32kHz crystal.
Use 32.768kHz, not 32.000kHz.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"Ý<h1>GoodFET11</h1>

<p>The GoodFET11 is the second hardware revision of the GoodFET.
It fixes minor errata from the GoodFET10 but adds no new features
other than a <strike>optional</strike> 32KHz crystal.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in 
/branches/goodfet11 of Subversion, or as
<a href="/releases/goodfet11.zip">goodfet11.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232R </td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>47K Pull-up Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>TC26H</td><td>32.768kHz Crystal</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the 
<a href="http://www.flickr.com/photos/travisgoodspeed/3574993035/">
following Flickr image's annotations</a>.
</p>
<a href="http://www.flickr.com/photos/travisgoodspeed/3574993035/" title="GoodFET12 by Travis Goodspeed, on Flickr"><img src="http://farm3.static.flickr.com/2460/3574993035_9f01b1bfa3.jpg" width="500" height="375" alt="GoodFET11" /></a>

<h2>Errata</h2>

<p>The documentation previously specified a 32kHz crystal.
Use 32.768kHz, not 32.000kHz.</p>"/hardware/goodfet21/{;{	;" <h1>GoodFET21</h1>

<p>The GoodFET21 is the sixth hardware revision of the GoodFET, owing
its heritage to the <a href="/hardware/badfet20/">BadFET20</a>
and <a href="/hardware/goodfet30/">GoodFET30</a>.  It retains the more
powerful MCU of the BadFET20 while adopting the GoodFET30's smaller
board and lack of crystals.  The 74HC4053 MUX has been dropped from
the design, and glitching is now performed directly from the MCU's
DAC.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet21 of the subversion repository, or as
<a href="/releases/goodfet21.zip">goodfet21.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F2618</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
</table>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<h2>Construction</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/4161224496/"
title="GoodFET21 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2788/4161224496_e3638b1493.jpg"
width="500" height="180" alt="GoodFET21" /></a>
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4163020683/"
title="GoodFET21 Schematic by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2633/4163020683_1081ac8f02.jpg"
width="500" height="276" alt="GoodFET21 Schematic" /></a>

<h2>Errata</h2>

<p>None so far!</p>;"z<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET21</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET21</h1>

<p>The GoodFET21 is the sixth hardware revision of the GoodFET, owing
its heritage to the <a href="/hardware/badfet20/">BadFET20</a>
and <a href="/hardware/goodfet30/">GoodFET30</a>.  It retains the more
powerful MCU of the BadFET20 while adopting the GoodFET30's smaller
board and lack of crystals.  The 74HC4053 MUX has been dropped from
the design, and glitching is now performed directly from the MCU's
DAC.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet21 of the subversion repository, or as
<a href="/releases/goodfet21.zip">goodfet21.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F2618</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
</table>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<h2>Construction</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/4161224496/"
title="GoodFET21 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2788/4161224496_e3638b1493.jpg"
width="500" height="180" alt="GoodFET21" /></a>
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4163020683/"
title="GoodFET21 Schematic by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2633/4163020683_1081ac8f02.jpg"
width="500" height="276" alt="GoodFET21 Schematic" /></a>

<h2>Errata</h2>

<p>None so far!</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
" <h1>GoodFET21</h1>

<p>The GoodFET21 is the sixth hardware revision of the GoodFET, owing
its heritage to the <a href="/hardware/badfet20/">BadFET20</a>
and <a href="/hardware/goodfet30/">GoodFET30</a>.  It retains the more
powerful MCU of the BadFET20 while adopting the GoodFET30's smaller
board and lack of crystals.  The 74HC4053 MUX has been dropped from
the design, and glitching is now performed directly from the MCU's
DAC.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet21 of the subversion repository, or as
<a href="/releases/goodfet21.zip">goodfet21.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F2618</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
</table>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<h2>Construction</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/4161224496/"
title="GoodFET21 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2788/4161224496_e3638b1493.jpg"
width="500" height="180" alt="GoodFET21" /></a>
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4163020683/"
title="GoodFET21 Schematic by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2633/4163020683_1081ac8f02.jpg"
width="500" height="276" alt="GoodFET21 Schematic" /></a>

<h2>Errata</h2>

<p>None so far!</p>"/apps/chipcon/{;{	;"<h1>Chipcon Application</h1>

<p>This application allows for the debugging of Chipcon radios with embedded
8051 cores, such as the CC2430 and CC2530.  The protocol is SPI-like, but with
a bi-directional data line.
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/3611512761/"
title="GoodFET Chipcon pinout by Travis Goodspeed, on Flickr">
<img src="http://farm4.static.flickr.com/3369/3611512761_61d030e6c1.jpg"
width="500" height="375" alt="GoodFET Chipcon pinout" /></a>


<h2>Clients</h2>

<p><a href="/clients/goodfet.cc/">chipcon.cc</a> is an actively maintained
client application.</p>


<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
Chipcon application to properly set the I/O pin directions.
After that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the debugger.
</p>

<p>The Chipcon protocol is similar to SPI, but with the difference that a single
data line is used.  Rather than exchanging register values, the transfer is one-way.
Use the WRITE (0x01) instruction only for debugging commands which do not result
in a reply.  READ (0x00) will write its data to the target, then accept a return
byte in reply.</p>


<h2>Verbs</h2>

<p>While standard verbs are supported on this platform,
they are inadequate for full debugging.  Verbs 0x80 to 0x8F
are debugging primitives, while verbs 0x90 to 0x9F
are used for more complicated macro commands.</p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Write any data, return 1-byte reply.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Write data.</td></tr>

<tr><td>0x02</td><td>PEEK</td><td>Read from IRAM.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write to IRAM.</td></tr>

<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<!--
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>
<tr><td>0x7F</td><td>OK</td><td>No Operation</td></tr>
-->

<!-- Raw debugging commands. -->
<tr><td>0x80</td><td>CC_CHIP_ERASE</td><td></td></tr>
<tr><td>0x81</td><td>CC_WR_CONFIG</td><td></td></tr>
<tr><td>0x82</td><td>CC_RD_CONFIG</td><td></td></tr>
<tr><td>0x83</td><td>CC_GET_PC</td><td></td></tr>
<tr><td>0x84</td><td>CC_READ_STATUS</td><td></td></tr>
<tr><td>0x85</td><td>CC_SET_HW_BRKPNT</td><td></td></tr>
<tr><td>0x86</td><td>CC_HALT</td><td></td></tr>
<tr><td>0x87</td><td>CC_RESUME</td><td></td></tr>
<tr><td>0x88</td><td>CC_DEBUG_INSTR</td><td></td></tr>
<tr><td>0x89</td><td>CC_STEP_INSTR</td><td></td></tr>
<tr><td>0x8A</td><td>CC_STEP_REPLACE</td><td></td></tr>
<tr><td>0x8B</td><td>CC_GET_CHIP_ID</td><td></td></tr>

<!--Higher level, make use of raw commands. -->
<tr><td>0x90</td><td>CC_READ_CODE_MEMORY</td><td></td></tr>
<tr><td>0x91</td><td>CC_READ_XDATA_MEMORY</td><td></td></tr>
<tr><td>0x92</td><td>CC_WRITE_XDATA_MEMORY</td><td></td></tr>
<tr><td>0x93</td><td>CC_SET_PC</td><td></td></tr>
<tr><td>0x94</td><td>CC_CLOCK_INIT</td><td></td></tr>
<tr><td>0x95</td><td>CC_WRITE_FLASH_PAGE</td><td></td></tr>
<tr><td>0x96</td><td>CC_READ_FLASH_PAGE</td><td></td></tr>
<tr><td>0x97</td><td>CC_MASS_ERASE_FLASH</td><td></td></tr>
<tr><td>0x98</td><td>CC_PROGRAM_FLASH</td><td>Copy 2kB to Flash.</td></tr>
<tr><td>0x99</td><td>CC_WIPEFLASHBUFFER</td><td>Wipe 2kB buffer to 0xFF.</td></tr>
<tr><td>0x9A</td><td>CC_LOCKCHIP</td><td>Set security bits.</td></tr>


</table>


<h2>Thanks</h2>
<p>Thanks, and a beer, are due to <a href="http://www.pkuhar.com">Peter Kuhar</a>,
both for authoring the first open source Chipcon debugger and for the neighborly
contribution of hardware.</p>;"ó!<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Chipcon 8051</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Chipcon Application</h1>

<p>This application allows for the debugging of Chipcon radios with embedded
8051 cores, such as the CC2430 and CC2530.  The protocol is SPI-like, but with
a bi-directional data line.
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/3611512761/"
title="GoodFET Chipcon pinout by Travis Goodspeed, on Flickr">
<img src="http://farm4.static.flickr.com/3369/3611512761_61d030e6c1.jpg"
width="500" height="375" alt="GoodFET Chipcon pinout" /></a>


<h2>Clients</h2>

<p><a href="/clients/goodfet.cc/">chipcon.cc</a> is an actively maintained
client application.</p>


<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
Chipcon application to properly set the I/O pin directions.
After that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the debugger.
</p>

<p>The Chipcon protocol is similar to SPI, but with the difference that a single
data line is used.  Rather than exchanging register values, the transfer is one-way.
Use the WRITE (0x01) instruction only for debugging commands which do not result
in a reply.  READ (0x00) will write its data to the target, then accept a return
byte in reply.</p>


<h2>Verbs</h2>

<p>While standard verbs are supported on this platform,
they are inadequate for full debugging.  Verbs 0x80 to 0x8F
are debugging primitives, while verbs 0x90 to 0x9F
are used for more complicated macro commands.</p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Write any data, return 1-byte reply.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Write data.</td></tr>

<tr><td>0x02</td><td>PEEK</td><td>Read from IRAM.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write to IRAM.</td></tr>

<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<!--
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>
<tr><td>0x7F</td><td>OK</td><td>No Operation</td></tr>
-->

<!-- Raw debugging commands. -->
<tr><td>0x80</td><td>CC_CHIP_ERASE</td><td></td></tr>
<tr><td>0x81</td><td>CC_WR_CONFIG</td><td></td></tr>
<tr><td>0x82</td><td>CC_RD_CONFIG</td><td></td></tr>
<tr><td>0x83</td><td>CC_GET_PC</td><td></td></tr>
<tr><td>0x84</td><td>CC_READ_STATUS</td><td></td></tr>
<tr><td>0x85</td><td>CC_SET_HW_BRKPNT</td><td></td></tr>
<tr><td>0x86</td><td>CC_HALT</td><td></td></tr>
<tr><td>0x87</td><td>CC_RESUME</td><td></td></tr>
<tr><td>0x88</td><td>CC_DEBUG_INSTR</td><td></td></tr>
<tr><td>0x89</td><td>CC_STEP_INSTR</td><td></td></tr>
<tr><td>0x8A</td><td>CC_STEP_REPLACE</td><td></td></tr>
<tr><td>0x8B</td><td>CC_GET_CHIP_ID</td><td></td></tr>

<!--Higher level, make use of raw commands. -->
<tr><td>0x90</td><td>CC_READ_CODE_MEMORY</td><td></td></tr>
<tr><td>0x91</td><td>CC_READ_XDATA_MEMORY</td><td></td></tr>
<tr><td>0x92</td><td>CC_WRITE_XDATA_MEMORY</td><td></td></tr>
<tr><td>0x93</td><td>CC_SET_PC</td><td></td></tr>
<tr><td>0x94</td><td>CC_CLOCK_INIT</td><td></td></tr>
<tr><td>0x95</td><td>CC_WRITE_FLASH_PAGE</td><td></td></tr>
<tr><td>0x96</td><td>CC_READ_FLASH_PAGE</td><td></td></tr>
<tr><td>0x97</td><td>CC_MASS_ERASE_FLASH</td><td></td></tr>
<tr><td>0x98</td><td>CC_PROGRAM_FLASH</td><td>Copy 2kB to Flash.</td></tr>
<tr><td>0x99</td><td>CC_WIPEFLASHBUFFER</td><td>Wipe 2kB buffer to 0xFF.</td></tr>
<tr><td>0x9A</td><td>CC_LOCKCHIP</td><td>Set security bits.</td></tr>


</table>


<h2>Thanks</h2>
<p>Thanks, and a beer, are due to <a href="http://www.pkuhar.com">Peter Kuhar</a>,
both for authoring the first open source Chipcon debugger and for the neighborly
contribution of hardware.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@#;
"<h1>Chipcon Application</h1>

<p>This application allows for the debugging of Chipcon radios with embedded
8051 cores, such as the CC2430 and CC2530.  The protocol is SPI-like, but with
a bi-directional data line.
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/3611512761/"
title="GoodFET Chipcon pinout by Travis Goodspeed, on Flickr">
<img src="http://farm4.static.flickr.com/3369/3611512761_61d030e6c1.jpg"
width="500" height="375" alt="GoodFET Chipcon pinout" /></a>


<h2>Clients</h2>

<p><a href="/clients/goodfet.cc/">chipcon.cc</a> is an actively maintained
client application.</p>


<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
Chipcon application to properly set the I/O pin directions.
After that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the debugger.
</p>

<p>The Chipcon protocol is similar to SPI, but with the difference that a single
data line is used.  Rather than exchanging register values, the transfer is one-way.
Use the WRITE (0x01) instruction only for debugging commands which do not result
in a reply.  READ (0x00) will write its data to the target, then accept a return
byte in reply.</p>


<h2>Verbs</h2>

<p>While standard verbs are supported on this platform,
they are inadequate for full debugging.  Verbs 0x80 to 0x8F
are debugging primitives, while verbs 0x90 to 0x9F
are used for more complicated macro commands.</p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Write any data, return 1-byte reply.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Write data.</td></tr>

<tr><td>0x02</td><td>PEEK</td><td>Read from IRAM.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write to IRAM.</td></tr>

<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<!--
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>
<tr><td>0x7F</td><td>OK</td><td>No Operation</td></tr>
-->

<!-- Raw debugging commands. -->
<tr><td>0x80</td><td>CC_CHIP_ERASE</td><td></td></tr>
<tr><td>0x81</td><td>CC_WR_CONFIG</td><td></td></tr>
<tr><td>0x82</td><td>CC_RD_CONFIG</td><td></td></tr>
<tr><td>0x83</td><td>CC_GET_PC</td><td></td></tr>
<tr><td>0x84</td><td>CC_READ_STATUS</td><td></td></tr>
<tr><td>0x85</td><td>CC_SET_HW_BRKPNT</td><td></td></tr>
<tr><td>0x86</td><td>CC_HALT</td><td></td></tr>
<tr><td>0x87</td><td>CC_RESUME</td><td></td></tr>
<tr><td>0x88</td><td>CC_DEBUG_INSTR</td><td></td></tr>
<tr><td>0x89</td><td>CC_STEP_INSTR</td><td></td></tr>
<tr><td>0x8A</td><td>CC_STEP_REPLACE</td><td></td></tr>
<tr><td>0x8B</td><td>CC_GET_CHIP_ID</td><td></td></tr>

<!--Higher level, make use of raw commands. -->
<tr><td>0x90</td><td>CC_READ_CODE_MEMORY</td><td></td></tr>
<tr><td>0x91</td><td>CC_READ_XDATA_MEMORY</td><td></td></tr>
<tr><td>0x92</td><td>CC_WRITE_XDATA_MEMORY</td><td></td></tr>
<tr><td>0x93</td><td>CC_SET_PC</td><td></td></tr>
<tr><td>0x94</td><td>CC_CLOCK_INIT</td><td></td></tr>
<tr><td>0x95</td><td>CC_WRITE_FLASH_PAGE</td><td></td></tr>
<tr><td>0x96</td><td>CC_READ_FLASH_PAGE</td><td></td></tr>
<tr><td>0x97</td><td>CC_MASS_ERASE_FLASH</td><td></td></tr>
<tr><td>0x98</td><td>CC_PROGRAM_FLASH</td><td>Copy 2kB to Flash.</td></tr>
<tr><td>0x99</td><td>CC_WIPEFLASHBUFFER</td><td>Wipe 2kB buffer to 0xFF.</td></tr>
<tr><td>0x9A</td><td>CC_LOCKCHIP</td><td>Set security bits.</td></tr>


</table>


<h2>Thanks</h2>
<p>Thanks, and a beer, are due to <a href="http://www.pkuhar.com">Peter Kuhar</a>,
both for authoring the first open source Chipcon debugger and for the neighborly
contribution of hardware.</p>"/apps/glitch/{;{	;"¯	<h1>GLITCH Application</h1>

<p>The GLITCH (0x71) application uses the DAC0 output of some GoodFET
models to bypass access controls of target devices.  It is of no use
alone, but rather creates a glitching environment suitable for
extracting data from target chips.</p>

<p>The target device should in most cases be connected to the GoodFET
as closely as possible, with no decoupling capacitors.  The 14-pin
connector will be the same as before, except that Pin 10 is used
as the supply voltage rather than Pin 2.</p>

<h2>Status</h2>

<p>The glitching effect is working in the lab, but it is not yet ready
for daily use.  The glitch module is not compatible with the
GoodFET30.</p>

<h2>Verbs</h2>

<p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Take the device under control.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Release the device.</td></tr>

<tr><td>0x80</td><td>GLITCHAPP</td><td>Glitch by application ID.</td></tr>
<tr><td>0x81</td><td>GLITCHVERB</td><td>Glitch for a verb, then stop.</td></tr>
<tr><td>0x82</td><td>GLITCHVERB</td><td>Time a verb.</td></tr>
<tr><td>0x90</td><td>GLITCHVOLTAGES</td><td>Set glitching voltages.</td></tr>
<tr><td>0x91</td><td>GLITCHRATE</td><td>Set glitching cycle count.</td></tr>

</table>
</p>

<h3>START (0x20)</h3>
<p>Begin glitching, or resume if paused.</p>

<h3>STOP (0x21)</h3>
<p>Pause glitching, keeping voltage steady at its present value.
Pass an optional 16-bit value as the parameter to stabilize at that value,
rather than the present one.</p>

<h3>GLITCHAPP (0x80)</h3>
<p>Takes a single byte, the application ID to be entered.  For
supported applications, this will glitch until the target application
has been successfully entered and stabilized.</p>

<h3>GLITCHVERB (0x81)</h3>
<p>Takes an application and verb as bytes, then sends all remaining
bytes as parameters to a that app and verb while glitching.  Glitching
will automatically cease once the execution has completed.</p>

<h3>GLITCHVOLTAGES (0x90)</h3>
<p>Takes two u16 values as parameters.  Glitching will then bounce
between the two values.  To reduce the target voltage without further
jumps, set these to be identical.  Executing with no parameters causes
the present values to be returned.</p>

<h3>GLITCHRATE (0x91)</h3>
<p>Takes a u16 value as a parameter, the number of ticks that will
occur between glitches.</p>;"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GLITCH</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GLITCH Application</h1>

<p>The GLITCH (0x71) application uses the DAC0 output of some GoodFET
models to bypass access controls of target devices.  It is of no use
alone, but rather creates a glitching environment suitable for
extracting data from target chips.</p>

<p>The target device should in most cases be connected to the GoodFET
as closely as possible, with no decoupling capacitors.  The 14-pin
connector will be the same as before, except that Pin 10 is used
as the supply voltage rather than Pin 2.</p>

<h2>Status</h2>

<p>The glitching effect is working in the lab, but it is not yet ready
for daily use.  The glitch module is not compatible with the
GoodFET30.</p>

<h2>Verbs</h2>

<p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Take the device under control.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Release the device.</td></tr>

<tr><td>0x80</td><td>GLITCHAPP</td><td>Glitch by application ID.</td></tr>
<tr><td>0x81</td><td>GLITCHVERB</td><td>Glitch for a verb, then stop.</td></tr>
<tr><td>0x82</td><td>GLITCHVERB</td><td>Time a verb.</td></tr>
<tr><td>0x90</td><td>GLITCHVOLTAGES</td><td>Set glitching voltages.</td></tr>
<tr><td>0x91</td><td>GLITCHRATE</td><td>Set glitching cycle count.</td></tr>

</table>
</p>

<h3>START (0x20)</h3>
<p>Begin glitching, or resume if paused.</p>

<h3>STOP (0x21)</h3>
<p>Pause glitching, keeping voltage steady at its present value.
Pass an optional 16-bit value as the parameter to stabilize at that value,
rather than the present one.</p>

<h3>GLITCHAPP (0x80)</h3>
<p>Takes a single byte, the application ID to be entered.  For
supported applications, this will glitch until the target application
has been successfully entered and stabilized.</p>

<h3>GLITCHVERB (0x81)</h3>
<p>Takes an application and verb as bytes, then sends all remaining
bytes as parameters to a that app and verb while glitching.  Glitching
will automatically cease once the execution has completed.</p>

<h3>GLITCHVOLTAGES (0x90)</h3>
<p>Takes two u16 values as parameters.  Glitching will then bounce
between the two values.  To reduce the target voltage without further
jumps, set these to be identical.  Executing with no parameters causes
the present values to be returned.</p>

<h3>GLITCHRATE (0x91)</h3>
<p>Takes a u16 value as a parameter, the number of ticks that will
occur between glitches.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@);
"¯	<h1>GLITCH Application</h1>

<p>The GLITCH (0x71) application uses the DAC0 output of some GoodFET
models to bypass access controls of target devices.  It is of no use
alone, but rather creates a glitching environment suitable for
extracting data from target chips.</p>

<p>The target device should in most cases be connected to the GoodFET
as closely as possible, with no decoupling capacitors.  The 14-pin
connector will be the same as before, except that Pin 10 is used
as the supply voltage rather than Pin 2.</p>

<h2>Status</h2>

<p>The glitching effect is working in the lab, but it is not yet ready
for daily use.  The glitch module is not compatible with the
GoodFET30.</p>

<h2>Verbs</h2>

<p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Take the device under control.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Release the device.</td></tr>

<tr><td>0x80</td><td>GLITCHAPP</td><td>Glitch by application ID.</td></tr>
<tr><td>0x81</td><td>GLITCHVERB</td><td>Glitch for a verb, then stop.</td></tr>
<tr><td>0x82</td><td>GLITCHVERB</td><td>Time a verb.</td></tr>
<tr><td>0x90</td><td>GLITCHVOLTAGES</td><td>Set glitching voltages.</td></tr>
<tr><td>0x91</td><td>GLITCHRATE</td><td>Set glitching cycle count.</td></tr>

</table>
</p>

<h3>START (0x20)</h3>
<p>Begin glitching, or resume if paused.</p>

<h3>STOP (0x21)</h3>
<p>Pause glitching, keeping voltage steady at its present value.
Pass an optional 16-bit value as the parameter to stabilize at that value,
rather than the present one.</p>

<h3>GLITCHAPP (0x80)</h3>
<p>Takes a single byte, the application ID to be entered.  For
supported applications, this will glitch until the target application
has been successfully entered and stabilized.</p>

<h3>GLITCHVERB (0x81)</h3>
<p>Takes an application and verb as bytes, then sends all remaining
bytes as parameters to a that app and verb while glitching.  Glitching
will automatically cease once the execution has completed.</p>

<h3>GLITCHVOLTAGES (0x90)</h3>
<p>Takes two u16 values as parameters.  Glitching will then bounce
between the two values.  To reduce the target voltage without further
jumps, set these to be identical.  Executing with no parameters causes
the present values to be returned.</p>

<h3>GLITCHRATE (0x91)</h3>
<p>Takes a u16 value as a parameter, the number of ticks that will
occur between glitches.</p>"/about/download/{;{	;"Õ<h1>Download</h1>

<p>A stable release is available from
the <a href="https://sourceforge.net/projects/goodfet/files/">Sourceforge
download page</a>.  While these releases are made every few weeks,
they do tend to become outdated and following the subversion feed is
the preferred method of keeping up to date with the project. <br />
</a></p>

<p>Firmware can be updated to the dist version with 
<i>goodfet.bsl --fromweb</i> on Linux and <i>gfbsl.exe --fromweb</i>
on Windows with the GNU Utilities for Windows.
<a href="http://www.flickr.com/photos/travisgoodspeed/3916592744/"
title="goodfet.bsl by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2625/3916592744_4781641880_o.png"
width="505" height="322" alt="goodfet.bsl" /></a>
</p>

<p>As a third choice, you may follow the subversion feed.  Every commit ought to
work, but no guarantee is made as to its reliability or safety.
<pre>svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet</pre></p>;".<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Download</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Download</h1>

<p>A stable release is available from
the <a href="https://sourceforge.net/projects/goodfet/files/">Sourceforge
download page</a>.  While these releases are made every few weeks,
they do tend to become outdated and following the subversion feed is
the preferred method of keeping up to date with the project. <br />
</a></p>

<p>Firmware can be updated to the dist version with 
<i>goodfet.bsl --fromweb</i> on Linux and <i>gfbsl.exe --fromweb</i>
on Windows with the GNU Utilities for Windows.
<a href="http://www.flickr.com/photos/travisgoodspeed/3916592744/"
title="goodfet.bsl by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2625/3916592744_4781641880_o.png"
width="505" height="322" alt="goodfet.bsl" /></a>
</p>

<p>As a third choice, you may follow the subversion feed.  Every commit ought to
work, but no guarantee is made as to its reliability or safety.
<pre>svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet</pre></p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@/;
"Õ<h1>Download</h1>

<p>A stable release is available from
the <a href="https://sourceforge.net/projects/goodfet/files/">Sourceforge
download page</a>.  While these releases are made every few weeks,
they do tend to become outdated and following the subversion feed is
the preferred method of keeping up to date with the project. <br />
</a></p>

<p>Firmware can be updated to the dist version with 
<i>goodfet.bsl --fromweb</i> on Linux and <i>gfbsl.exe --fromweb</i>
on Windows with the GNU Utilities for Windows.
<a href="http://www.flickr.com/photos/travisgoodspeed/3916592744/"
title="goodfet.bsl by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2625/3916592744_4781641880_o.png"
width="505" height="322" alt="goodfet.bsl" /></a>
</p>

<p>As a third choice, you may follow the subversion feed.  Every commit ought to
work, but no guarantee is made as to its reliability or safety.
<pre>svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet</pre></p>"/tutorial/{;{	;"o<h1>GoodFET Tutorials</h1>

<h3>Construction</h3>
<p>Construct your GoodFET using the components listed in its Hardware page.  As of
March 2010, you probably want a GoodFET3x for embedded systems
development or a GoodFET2x for voltage glitching security research.
All previous models are still supported by the programming
software.</p>

<!--jbest: finally added the construction tutorial. March 2010-->
<p>If you are new to surface mount components, start <a href=/tutorial/construction/>here</a>.</p>

<h3>Verification</h3>

<p>If your GoodFET is properly assembled, you should see a notice in
dmesg that an FTDI USB/Serial adapter has been added on insertion of
the device.  The device name varies with operating system, but it's probably
one of /dev/ttyUSB0, /dev/ttyU0, or /dev/tty/cu.usbserial-*.</p>

<p>You should also see the RX/TX LEDs blink briefly when inserting the
device.  If they do not, their polarity is likely wrong and you will
need to desolder and rotate them.  For those without an SMD rework
station, it might be easier to burn the LEDs off and apply fresh
ones.</p>

<h3>Software</h3>

<p>Until a first version of the GoodFET software is released, you will
need to track the project by svn.  This makes upgrading a breeze, but
you will not be able to install the software by your favorite Linux
distribution's package manager.</p>

<p>Running the following commands will download the latest version
of the project to ~/svn/goodfet and link the client scripts into
/usr/local/bin/.  Optionally, you may add the client directory to
your $PATH if you do not have sudo privileges.</p>

<p><pre>mkdir ~/svn
cd ~/svn
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet
cd goodfet/trunk/client
sudo make link
</pre><br/></p>

<p><i>(TODO: Describe the installation of prerequisite packages
such as Gnuplot-py, py-sqlite3, py-serial, etc here.)</i></p>

<p>Now that the software is installed, dump the info flash of your
GoodFET to a text file for safekeeping.  This information is destroyed
when flashing the device, and in the rare even that it is needed, it
is very handy to have.  If you have the time, it would be nice to
email a copy of this file to Travis Goodspeed &lt;travis at
radiantmachines.com&gt;.</p>

<p><pre>goodfet.bsl --dumpinfo &gt;infoflash.txt
</pre><br/></p>

<p>Once this backup has been made, you can use goodfet.bsl to install
a recent version of the firmware from the Internet.  This is faster
than building the firmware from scratch, which is described in the
next session.</p>

<p><pre>goodfet.bsl --fromweb
goodfet.monitor test
</pre><br/></p>

<h3>Firmware</h3>

<p>There are two ways to get the firmware.  By far the fastest is to
use the web version by 'goodfet.bsl --fromweb', but participation in
development of the project will require you to build it from
scratch.</p>

<p>The <a href="http://mspgcc.sourceforge.net/">mspgcc</a> compiler is
preferred for the project.  Binary packages are hard to find, if they
exist at all.  If you are running Linux, I suggest you follow 
<a href="http://sourceforge.net/apps/mediawiki/mspgcc/index.php?title=Linux_installation#Building_from_Source">
the build instructions found in the mspgcc wiki.</a>  The instructions
have been verified to work on Debian 5 (Lenny) as of January 9, 2011.
The build instructions will result in the toolchain being installed in
a folder named /opt/mspgcc.  You must add /opt/mspgcc/bin to your PATH
environment variable before you can build the firmware.

NOTE: There appears to be a newer version of the mspgcc toolchain
located in the <a href="http://mspgcc4.sourceforge.net/">mspgcc4</a>
project.  However, after building mspgcc4 from source on my Debian 5
(Lenny) machine, it was able to build the firmware, but it did not
successfully run on my GoodFET board.

If you are using Windows, the mspgcc sourceforge page has pre-built
binary installers for Windows.

<h3>Use</h3>

<p><i>(TODO: Write this section.)</i></p>;"È"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Tutorial</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET Tutorials</h1>

<h3>Construction</h3>
<p>Construct your GoodFET using the components listed in its Hardware page.  As of
March 2010, you probably want a GoodFET3x for embedded systems
development or a GoodFET2x for voltage glitching security research.
All previous models are still supported by the programming
software.</p>

<!--jbest: finally added the construction tutorial. March 2010-->
<p>If you are new to surface mount components, start <a href=/tutorial/construction/>here</a>.</p>

<h3>Verification</h3>

<p>If your GoodFET is properly assembled, you should see a notice in
dmesg that an FTDI USB/Serial adapter has been added on insertion of
the device.  The device name varies with operating system, but it's probably
one of /dev/ttyUSB0, /dev/ttyU0, or /dev/tty/cu.usbserial-*.</p>

<p>You should also see the RX/TX LEDs blink briefly when inserting the
device.  If they do not, their polarity is likely wrong and you will
need to desolder and rotate them.  For those without an SMD rework
station, it might be easier to burn the LEDs off and apply fresh
ones.</p>

<h3>Software</h3>

<p>Until a first version of the GoodFET software is released, you will
need to track the project by svn.  This makes upgrading a breeze, but
you will not be able to install the software by your favorite Linux
distribution's package manager.</p>

<p>Running the following commands will download the latest version
of the project to ~/svn/goodfet and link the client scripts into
/usr/local/bin/.  Optionally, you may add the client directory to
your $PATH if you do not have sudo privileges.</p>

<p><pre>mkdir ~/svn
cd ~/svn
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet
cd goodfet/trunk/client
sudo make link
</pre><br/></p>

<p><i>(TODO: Describe the installation of prerequisite packages
such as Gnuplot-py, py-sqlite3, py-serial, etc here.)</i></p>

<p>Now that the software is installed, dump the info flash of your
GoodFET to a text file for safekeeping.  This information is destroyed
when flashing the device, and in the rare even that it is needed, it
is very handy to have.  If you have the time, it would be nice to
email a copy of this file to Travis Goodspeed &lt;travis at
radiantmachines.com&gt;.</p>

<p><pre>goodfet.bsl --dumpinfo &gt;infoflash.txt
</pre><br/></p>

<p>Once this backup has been made, you can use goodfet.bsl to install
a recent version of the firmware from the Internet.  This is faster
than building the firmware from scratch, which is described in the
next session.</p>

<p><pre>goodfet.bsl --fromweb
goodfet.monitor test
</pre><br/></p>

<h3>Firmware</h3>

<p>There are two ways to get the firmware.  By far the fastest is to
use the web version by 'goodfet.bsl --fromweb', but participation in
development of the project will require you to build it from
scratch.</p>

<p>The <a href="http://mspgcc.sourceforge.net/">mspgcc</a> compiler is
preferred for the project.  Binary packages are hard to find, if they
exist at all.  If you are running Linux, I suggest you follow 
<a href="http://sourceforge.net/apps/mediawiki/mspgcc/index.php?title=Linux_installation#Building_from_Source">
the build instructions found in the mspgcc wiki.</a>  The instructions
have been verified to work on Debian 5 (Lenny) as of January 9, 2011.
The build instructions will result in the toolchain being installed in
a folder named /opt/mspgcc.  You must add /opt/mspgcc/bin to your PATH
environment variable before you can build the firmware.

NOTE: There appears to be a newer version of the mspgcc toolchain
located in the <a href="http://mspgcc4.sourceforge.net/">mspgcc4</a>
project.  However, after building mspgcc4 from source on my Debian 5
(Lenny) machine, it was able to build the firmware, but it did not
successfully run on my GoodFET board.

If you are using Windows, the mspgcc sourceforge page has pre-built
binary installers for Windows.

<h3>Use</h3>

<p><i>(TODO: Write this section.)</i></p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@5;
"o<h1>GoodFET Tutorials</h1>

<h3>Construction</h3>
<p>Construct your GoodFET using the components listed in its Hardware page.  As of
March 2010, you probably want a GoodFET3x for embedded systems
development or a GoodFET2x for voltage glitching security research.
All previous models are still supported by the programming
software.</p>

<!--jbest: finally added the construction tutorial. March 2010-->
<p>If you are new to surface mount components, start <a href=/tutorial/construction/>here</a>.</p>

<h3>Verification</h3>

<p>If your GoodFET is properly assembled, you should see a notice in
dmesg that an FTDI USB/Serial adapter has been added on insertion of
the device.  The device name varies with operating system, but it's probably
one of /dev/ttyUSB0, /dev/ttyU0, or /dev/tty/cu.usbserial-*.</p>

<p>You should also see the RX/TX LEDs blink briefly when inserting the
device.  If they do not, their polarity is likely wrong and you will
need to desolder and rotate them.  For those without an SMD rework
station, it might be easier to burn the LEDs off and apply fresh
ones.</p>

<h3>Software</h3>

<p>Until a first version of the GoodFET software is released, you will
need to track the project by svn.  This makes upgrading a breeze, but
you will not be able to install the software by your favorite Linux
distribution's package manager.</p>

<p>Running the following commands will download the latest version
of the project to ~/svn/goodfet and link the client scripts into
/usr/local/bin/.  Optionally, you may add the client directory to
your $PATH if you do not have sudo privileges.</p>

<p><pre>mkdir ~/svn
cd ~/svn
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet
cd goodfet/trunk/client
sudo make link
</pre><br/></p>

<p><i>(TODO: Describe the installation of prerequisite packages
such as Gnuplot-py, py-sqlite3, py-serial, etc here.)</i></p>

<p>Now that the software is installed, dump the info flash of your
GoodFET to a text file for safekeeping.  This information is destroyed
when flashing the device, and in the rare even that it is needed, it
is very handy to have.  If you have the time, it would be nice to
email a copy of this file to Travis Goodspeed &lt;travis at
radiantmachines.com&gt;.</p>

<p><pre>goodfet.bsl --dumpinfo &gt;infoflash.txt
</pre><br/></p>

<p>Once this backup has been made, you can use goodfet.bsl to install
a recent version of the firmware from the Internet.  This is faster
than building the firmware from scratch, which is described in the
next session.</p>

<p><pre>goodfet.bsl --fromweb
goodfet.monitor test
</pre><br/></p>

<h3>Firmware</h3>

<p>There are two ways to get the firmware.  By far the fastest is to
use the web version by 'goodfet.bsl --fromweb', but participation in
development of the project will require you to build it from
scratch.</p>

<p>The <a href="http://mspgcc.sourceforge.net/">mspgcc</a> compiler is
preferred for the project.  Binary packages are hard to find, if they
exist at all.  If you are running Linux, I suggest you follow 
<a href="http://sourceforge.net/apps/mediawiki/mspgcc/index.php?title=Linux_installation#Building_from_Source">
the build instructions found in the mspgcc wiki.</a>  The instructions
have been verified to work on Debian 5 (Lenny) as of January 9, 2011.
The build instructions will result in the toolchain being installed in
a folder named /opt/mspgcc.  You must add /opt/mspgcc/bin to your PATH
environment variable before you can build the firmware.

NOTE: There appears to be a newer version of the mspgcc toolchain
located in the <a href="http://mspgcc4.sourceforge.net/">mspgcc4</a>
project.  However, after building mspgcc4 from source on my Debian 5
(Lenny) machine, it was able to build the firmware, but it did not
successfully run on my GoodFET board.

If you are using Windows, the mspgcc sourceforge page has pre-built
binary installers for Windows.

<h3>Use</h3>

<p><i>(TODO: Write this section.)</i></p>"/clients/goodfetavr/{;{	;"é<h1>goodfet.avr</h1>

<p></p>

<h2>Client</h2>

<p><pre>Usage: goodfet.avr verb [objects]

goodfet.avr test
goodfet.avr info
goodfet.avr lockbits [value]
goodfet.avr erase
goodfet.avr peekeeprom 0x$start [0x$stop]</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>


<h2>Notes</h2>
<p>This is a new port, and it is not yet ready for daily use. Reading of chips is stabilized, as 
is the writing of EEPROM, but the writing of Flash memory pages is not yet stabilized.</p>;"E<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.avr</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.avr</h1>

<p></p>

<h2>Client</h2>

<p><pre>Usage: goodfet.avr verb [objects]

goodfet.avr test
goodfet.avr info
goodfet.avr lockbits [value]
goodfet.avr erase
goodfet.avr peekeeprom 0x$start [0x$stop]</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>


<h2>Notes</h2>
<p>This is a new port, and it is not yet ready for daily use. Reading of chips is stabilized, as 
is the writing of EEPROM, but the writing of Flash memory pages is not yet stabilized.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;;
"é<h1>goodfet.avr</h1>

<p></p>

<h2>Client</h2>

<p><pre>Usage: goodfet.avr verb [objects]

goodfet.avr test
goodfet.avr info
goodfet.avr lockbits [value]
goodfet.avr erase
goodfet.avr peekeeprom 0x$start [0x$stop]</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>


<h2>Notes</h2>
<p>This is a new port, and it is not yet ready for daily use. Reading of chips is stabilized, as 
is the writing of EEPROM, but the writing of Flash memory pages is not yet stabilized.</p>"/hardware/goodfet31/{;{	;"4<h1>GoodFET31</h1>

<p>The GoodFET31 is the eighth hardware revision of the GoodFET.  It
aims to reduce BOM cost and board surface area, as well as reducing
the parts count for kit builders.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet31 of the subversion repository, or as
<a href="/releases/goodfet31.zip">goodfet31.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.
<a href="http://www.flickr.com/photos/travisgoodspeed/4452574432/"
title="GoodFET31 Layout by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4011/4452574432_baab4612ca.jpg"
width="500" height="252" alt="GoodFET31 Layout" /></a>
</p>


<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>;"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET31</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET31</h1>

<p>The GoodFET31 is the eighth hardware revision of the GoodFET.  It
aims to reduce BOM cost and board surface area, as well as reducing
the parts count for kit builders.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet31 of the subversion repository, or as
<a href="/releases/goodfet31.zip">goodfet31.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.
<a href="http://www.flickr.com/photos/travisgoodspeed/4452574432/"
title="GoodFET31 Layout by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4011/4452574432_baab4612ca.jpg"
width="500" height="252" alt="GoodFET31 Layout" /></a>
</p>


<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@A;
"4<h1>GoodFET31</h1>

<p>The GoodFET31 is the eighth hardware revision of the GoodFET.  It
aims to reduce BOM cost and board surface area, as well as reducing
the parts count for kit builders.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet31 of the subversion repository, or as
<a href="/releases/goodfet31.zip">goodfet31.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.
<a href="http://www.flickr.com/photos/travisgoodspeed/4452574432/"
title="GoodFET31 Layout by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4011/4452574432_baab4612ca.jpg"
width="500" height="252" alt="GoodFET31 Layout" /></a>
</p>


<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>"/hardware/goodfet41/{;{	;"æ<h1>GoodFET41</h1>

<p>The GoodFET41 is the thirteenth hardware revision of the GoodFET,
owing its heritage to
the <a href="/hardware/goodfet40/">GoodFET40</a>.  It retains most of
that model's design while being manufactured on a thicker board for
stability and adding a Spy-Bi-Wire connector for compatibility with
eZ430 target boards.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet41 of the subversion repository, or as
<a href="/releases/goodfet41.zip">goodfet41.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2417, 2418,
or 2419 chip.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618, as 80-pin versions are also manufactured.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
<tr><td>1</td><td></td><td>Mill-Max 850-10-050-20-001000</td></tr>
<tr><td>1</td><td></td><td>2x7 pin 0.1&quot; Male Header</td></tr>
</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5338660983/"
title="GoodFET41 Layout by Travis Goodspeed, on
Flickr"><img src="http://farm6.static.flickr.com/5162/5338660983_e499391f97.jpg"
width="500" height="208" alt="GoodFET41 Layout" /></a>

<h2>Errata</h2>

<p>Nothing yet.</p>;"@<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET41</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET41</h1>

<p>The GoodFET41 is the thirteenth hardware revision of the GoodFET,
owing its heritage to
the <a href="/hardware/goodfet40/">GoodFET40</a>.  It retains most of
that model's design while being manufactured on a thicker board for
stability and adding a Spy-Bi-Wire connector for compatibility with
eZ430 target boards.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet41 of the subversion repository, or as
<a href="/releases/goodfet41.zip">goodfet41.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2417, 2418,
or 2419 chip.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618, as 80-pin versions are also manufactured.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
<tr><td>1</td><td></td><td>Mill-Max 850-10-050-20-001000</td></tr>
<tr><td>1</td><td></td><td>2x7 pin 0.1&quot; Male Header</td></tr>
</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5338660983/"
title="GoodFET41 Layout by Travis Goodspeed, on
Flickr"><img src="http://farm6.static.flickr.com/5162/5338660983_e499391f97.jpg"
width="500" height="208" alt="GoodFET41 Layout" /></a>

<h2>Errata</h2>

<p>Nothing yet.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@G;
"æ<h1>GoodFET41</h1>

<p>The GoodFET41 is the thirteenth hardware revision of the GoodFET,
owing its heritage to
the <a href="/hardware/goodfet40/">GoodFET40</a>.  It retains most of
that model's design while being manufactured on a thicker board for
stability and adding a Spy-Bi-Wire connector for compatibility with
eZ430 target boards.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet41 of the subversion repository, or as
<a href="/releases/goodfet41.zip">goodfet41.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2417, 2418,
or 2419 chip.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618, as 80-pin versions are also manufactured.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
<tr><td>1</td><td></td><td>Mill-Max 850-10-050-20-001000</td></tr>
<tr><td>1</td><td></td><td>2x7 pin 0.1&quot; Male Header</td></tr>
</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5338660983/"
title="GoodFET41 Layout by Travis Goodspeed, on
Flickr"><img src="http://farm6.static.flickr.com/5162/5338660983_e499391f97.jpg"
width="500" height="208" alt="GoodFET41 Layout" /></a>

<h2>Errata</h2>

<p>Nothing yet.</p>"/hardware/telosb/{;{	;"÷<h1>Telos B</h1>

<a href="http://www.flickr.com/photos/travisgoodspeed/3118925792/"
title="Telos B with JTAG Adapter by Travis Goodspeed, on
Flickr"><img src="http://farm4.static.flickr.com/3286/3118925792_e0d93505ae.jpg"
width="500" height="375" alt="Telos B with JTAG Adapter" /></a>

<p>The Telos B is a wireless sensor development platform which is also
sold as a MoteIV TMote Sky.  While the hardware predates the GoodFET
project, the two share many design similarities, allowing a port
with little trouble.
</p>

<h2>Building</h2>

<p>Build and flash firmware with the following commands.  The
$platform variable must be set whenever the client is used, and the
device will not function without it.</p>

<pre>export board=telosb
make clean install
goodfet.ccspi info
goodfet.spiflash info</pre>

<h2>Schematics</h2>

<p>Schematics for the devices are identical, and they can be found in
the contrib/ directory of the subversion repository.
</p>

<!-- CAD Files would go here, but we didn't make the board. -->

<!-- Bill of Materials, Construction -->


<h2>Errata</h2>

<p>The <a href="/clients/goodfet.spiflash/">goodfet.spiflash</a>
client cannot determine the size or model of the SPI Flash chip in the
TMote Sky, whose chip differs somehow from the otherwise identical
Telos B.  Reads, writes, and erases perform as expected.</p>

<h2>Examples</h2>

<p>A few nifty examples are covered in the
article <a href="http://travisgoodspeed.blogspot.com/2011/03/goodfet-on-telosb-tmote-sky.html">GoodFET
on the TelosB, TMote Sky</a>.  Specifically, the device is good for
802.15.4 packet sniffing and injection, as well as for the quick
prototyping of new
applications.  <a href="http://www.secdev.org/projects/scapy/">Scapy</a>
integration also allows for packet dissection.</p>;"N<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- TelosB</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Telos B</h1>

<a href="http://www.flickr.com/photos/travisgoodspeed/3118925792/"
title="Telos B with JTAG Adapter by Travis Goodspeed, on
Flickr"><img src="http://farm4.static.flickr.com/3286/3118925792_e0d93505ae.jpg"
width="500" height="375" alt="Telos B with JTAG Adapter" /></a>

<p>The Telos B is a wireless sensor development platform which is also
sold as a MoteIV TMote Sky.  While the hardware predates the GoodFET
project, the two share many design similarities, allowing a port
with little trouble.
</p>

<h2>Building</h2>

<p>Build and flash firmware with the following commands.  The
$platform variable must be set whenever the client is used, and the
device will not function without it.</p>

<pre>export board=telosb
make clean install
goodfet.ccspi info
goodfet.spiflash info</pre>

<h2>Schematics</h2>

<p>Schematics for the devices are identical, and they can be found in
the contrib/ directory of the subversion repository.
</p>

<!-- CAD Files would go here, but we didn't make the board. -->

<!-- Bill of Materials, Construction -->


<h2>Errata</h2>

<p>The <a href="/clients/goodfet.spiflash/">goodfet.spiflash</a>
client cannot determine the size or model of the SPI Flash chip in the
TMote Sky, whose chip differs somehow from the otherwise identical
Telos B.  Reads, writes, and erases perform as expected.</p>

<h2>Examples</h2>

<p>A few nifty examples are covered in the
article <a href="http://travisgoodspeed.blogspot.com/2011/03/goodfet-on-telosb-tmote-sky.html">GoodFET
on the TelosB, TMote Sky</a>.  Specifically, the device is good for
802.15.4 packet sniffing and injection, as well as for the quick
prototyping of new
applications.  <a href="http://www.secdev.org/projects/scapy/">Scapy</a>
integration also allows for packet dissection.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@M;
"÷<h1>Telos B</h1>

<a href="http://www.flickr.com/photos/travisgoodspeed/3118925792/"
title="Telos B with JTAG Adapter by Travis Goodspeed, on
Flickr"><img src="http://farm4.static.flickr.com/3286/3118925792_e0d93505ae.jpg"
width="500" height="375" alt="Telos B with JTAG Adapter" /></a>

<p>The Telos B is a wireless sensor development platform which is also
sold as a MoteIV TMote Sky.  While the hardware predates the GoodFET
project, the two share many design similarities, allowing a port
with little trouble.
</p>

<h2>Building</h2>

<p>Build and flash firmware with the following commands.  The
$platform variable must be set whenever the client is used, and the
device will not function without it.</p>

<pre>export board=telosb
make clean install
goodfet.ccspi info
goodfet.spiflash info</pre>

<h2>Schematics</h2>

<p>Schematics for the devices are identical, and they can be found in
the contrib/ directory of the subversion repository.
</p>

<!-- CAD Files would go here, but we didn't make the board. -->

<!-- Bill of Materials, Construction -->


<h2>Errata</h2>

<p>The <a href="/clients/goodfet.spiflash/">goodfet.spiflash</a>
client cannot determine the size or model of the SPI Flash chip in the
TMote Sky, whose chip differs somehow from the otherwise identical
Telos B.  Reads, writes, and erases perform as expected.</p>

<h2>Examples</h2>

<p>A few nifty examples are covered in the
article <a href="http://travisgoodspeed.blogspot.com/2011/03/goodfet-on-telosb-tmote-sky.html">GoodFET
on the TelosB, TMote Sky</a>.  Specifically, the device is good for
802.15.4 packet sniffing and injection, as well as for the quick
prototyping of new
applications.  <a href="http://www.secdev.org/projects/scapy/">Scapy</a>
integration also allows for packet dissection.</p>"/hardware/nhb12/{;{	;"µ'<h1>NHB12</h1>

<p>The NHB12 and NHB12B are the tenth and eleventh hardware revisions
of the GoodFET, but they also served as conference badges for
the <a href="http://thenexthope.org/">Next Hope</a> conference that
occurred in Manhattan in 2010.  These were the first GoodFETs to be
mass produced, but an additional badge hacking kit is necessary to run
the GoodFET firmware.</p>

<p>All badges ship with an MSP430 port of
the <a href="http://openbeacon.de/">OpenBeacon</a> firmware for use
with the conference's <a href="http://amd.hope.net/">OpenAMD</a>
deployment.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4746123271/"
title="NHBadge by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4093/4746123271_7888160588.jpg"
width="500" height="375" alt="NHBadge" /></a></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/nhb12 of the subversion repository, or as
<a href="/releases/nhb12.zip">nhb12.zip</a>
and <a href="/releases/nhb12b.zip">nhb12b.zip</a>.</p>

<p>The complete project files, including the assembly line
programming and regression tests scripts, are available at
<a href="http://sourceforge.net/projects/nhbadge/files/"
>http://sourceforge.net/projects/nhbadge/files/</a>.  A newly minted
Win32 port of the GoodFET's <a href="/clients/goodfet.msp430/">MSP430
Client</a> was used for all flashing and testing.</p>

<h2>Firmware</h2>

<p>The pinouts of the NHB12 and NHB12B differ from the GoodFET2x
series that is assumed by the MSP430F2618 firmware.  Full support will
be integrated into 'goodfet.bsl --fromweb' soon, but for the time
being, flash one of the images at the
<a href="http://sourceforge.net/projects/nhbadge/files/">NHBadge</a>
project's file page</p> with 'goodfet.bsl -e -p foo.hex'.</p>

<p>To build the GoodFET firmware for these boards, compile
trunk/firmware with 'platform=nhb12 mcu=msp430x2618 make clean
install' or 'platform=nhb12b mcu=msp430x2618 make clean install' as
your hardware dictates.</p>

<h2>Bill of Materials</h2>

<!--
<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>
-->

<p>Coming Soon</p>

<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should find any.</p>

<h2>Hacks</h2>

<p>Makers Local 256 wired one of their badges to build
a <a href="https://256.makerslocal.org/2010/07/24/the-next-hope-geiger-counter/">Geiger
Counter</a> that detects other badges.</p>

<p>Adam Mayer hacked up a replacement OpenBeacon firmware image which
would clone a nearby device's ID, in order to confuse the aggregation
servers.  You can find a copy of his firmware in
the <a href="http://sourceforge.net/projects/nhbadge/develop">nhbadge
subversion repository</a>.</p>

<p>Travis managed to build a promiscuous sniffer for Microsoft's
2.4GHz wireless keyboards, documented
in <a href="http://travisgoodspeed.blogspot.com/2011/02/promiscuity-is-nrf24l01s-duty.html">Promiscuity
is the nRF24L01+'s Duty</a>.  Keystrokes are USB HID events encrypted
only by XOR, where the key is the 5 byte MAC address.  Because a
key-up event includes a longer string of zero bytes, some packets
actually include the key twice!</p>

<h1>Next Hope Badge USB Modification</h1>

<p>(The following are instructions for assembling the badge hacking
kit.  They've yet to be edited properly into the project
description.)</p>

<p>This kit is best used with the 80-pin MSP430F2618 model, so
switching to that model is recommended prior to assembly.  The 80-pin
model is written as "NHB12" on the right of the badge, while the
64-pin model is "NHB12B"</p>

<h2>Introduction</h2>

<p>The following instructions are for adding USB support to a Next
Hope conference badge, model numbers of which are NHB12 and NHB12B.
For further details see my article entitled
<a href="http://travisgoodspeed.blogspot.com/2010/06/hacking-next-hope-badge.html">Hacking
the Next Hope Badge</a>.</p>

<p>While these instructions are not terribly complicated, the kit is
not intended for a first-time solderer.  If you have never soldered
before, then build a TV-B-Gone as practice before having someone help
you assemble this kit.  Additionally, some Unix or command-line Windows
experience is necessary, as the tools involved do not have a GUI.</p>

<h2>Modification</h2>

<p>First, be sure that you have both a mini USB connector and an
FT232RL chip, as pictured below.  These are included in Mitch's
kit.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4796189835/"
title="Mini USB Connectors by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4115/4796189835_81d2796af2.jpg"
width="500" height="375" alt="Mini USB Connectors" /></a>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4796190529/"
title="FT232RL Chip by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4119/4796190529_4b14c2728f.jpg"
width="500" height="375" alt="FT232RL Chip" /></a></p>

<p>Modify your badge by the following steps:</p>
<ul>

<li>(Optional) Use a soldering iron to remove first one side, then the
other, of the battery clip.  If leaving the battery in place, be sure not to
have both a battery and USB power at the same time.</li>

<li>Use a Dremel tool or fine cutters to remove the two plastic nubs
from the the Mini USB plug.  The badges as manufactured lack holes for the
nubs, so it is necessary to remove them for mechanical compatibility.</li>

<li>Fit the Mini USB connector to the board as shown in Appendix A.
It should fit flush with the board, fitting securely after soldering.
Solder a single of the pins first, then a second to ensure proper
positioning.  The side plugs should be soldered last, with plenty of extra
solder for mechanical stability.</li>

<li><b>UNDER NO CIRCUMSTANCES</b> should the board be held by its USB
connector.  If twisted as a lever, the connector will come off, and it
will not be fun to repair the board.</li>

<li>Once the USB connector is properly in place, fit the FTDI chip as
shown in Appendix A.  The circle on the chip, which indicates Pin 1,
should be next to the "U3" text.  First, tack a single corner pin of
the chip.  Once this is done and the chip is still positioned
properly, tack a pin on the opposite corner with as little solder as
possible.  Finally, after verifying that those pins are properly
positioned, solder the remaining pins.  If any bridge, remove the
excess solder with a coper soldering wick.</li>

<li>Having these parts connected, plug the badge into your computer
using the included USB A to Mini B cable.  You should then see a new
USB device enumeration.  If anything gets hot, immediately unplug the
badge and check your soldering.</li>

</ul>

<h2>Driver</h2>

The FTDI Virtual Comm Port (VCP) driver for Windows and Mac can be
found
at <a href="http://www.ftdichip.com/Drivers/VCP.htm">http://www.ftdichip.com/Drivers/VCP.htm</a>,
while Linux and OpenBSD distributions generally ship with built-in
support.

<h2>OpenBeacon Firmware</h2>

<p>To reflash your badge's OpenBeacon firmware, grab the NHBadge
project from subversion.  The Unix command for this is ``<i>svn co
https://nhbadge.svn.sourceforge.net/svnroot/nhbadge</i>''.  (TortoiseSVN will
retrieve the same URL for Windows users.)  Inside
the <i>nhbadge/dist</i> path, one will find the latest Next Hope badge firmware
along with Windows batch scripts for programming the badges.  Unix users with
a C compiler and GoodFET and instead run ``<i>goodfet.bsl -e -p foo.hex</i>'' to compile the firmware
and flash a firmware image over USB.</p>

<p>To make things a bit easier, a ZIP file distribution for Windows users is available at
<a href="http://goodserv.cis.upenn.edu/nhdist.zip">http://goodserv.cis.upenn.edu/nhdist.zip</a>.
This is the exact file that was sent to the manufacturer, and was the
file used on the production line to program these things.</p>

<h2>GoodFET Firmware</h2>

<p>To download the GoodFET firmware for either Unix or Windows,
visit <a href="http://goodfet.sourceforge.net/">http://goodfet.sf.net/</a>
and follow the SVN instructions.  Once installed, you can flash the
GoodFET firmware to the badge with either 'goodfet.bsl -e -p
goodfet2618.hex' or 'GFBSL.EXE -e -p goodfet2618.hex'.
<p>

<p>To build the GoodFET firmware for these boards, compile
trunk/firmware with 'platform=nhb12 mcu=msp430x2618 make clean
install' or 'platform=nhb12b mcu=msp430x2618 make clean install' as
your hardware dictates.</p>

<p>Once flashed with firmware, the badge will respond to
'goodfet.monitor info' ('GFMON.EXE info' on Windows) with its model
number and clock calibrations.</p>

<p>You can then use 'goodfet.nrf sniffob' to packet sniff the rest of
the badge network or 'goodfet.nrf snifftp' to sniff traffic from
Turning Point Clickers.  Read my articles
on <a href="http://travisgoodspeed.blogspot.com/2010/06/hacking-next-hope-badge.html">Hacking
the Next Hope Badge</a>
and <a href="http://travisgoodspeed.blogspot.com/2010/07/reversing-rf-clicker.html">Reversing
and RF Clicker</a> for details.</p>

<h2>Appendix A: Component Placement</h2>


<p><a href="http://www.flickr.com/photos/travisgoodspeed/4796886774/"
title="NHBadge USB by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4095/4796886774_3da98ef486.jpg"
width="500" height="375" alt="NHBadge USB" /></a></p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4796257341/"
title="NHBadge FTDI by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4142/4796257341_6075970e35.jpg"
width="500" height="375" alt="NHBadge FTDI" /></a>

<!--
<h2>Appendix B: Schematic</h2>

<p>This is the NHB12 schematic diagram.  For modifications, the `Do
Not Populate' section will be populated.</p>

<p><img src="nhb12a_schem.jpg" /></p>
-->;";<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- NHB12</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>NHB12</h1>

<p>The NHB12 and NHB12B are the tenth and eleventh hardware revisions
of the GoodFET, but they also served as conference badges for
the <a href="http://thenexthope.org/">Next Hope</a> conference that
occurred in Manhattan in 2010.  These were the first GoodFETs to be
mass produced, but an additional badge hacking kit is necessary to run
the GoodFET firmware.</p>

<p>All badges ship with an MSP430 port of
the <a href="http://openbeacon.de/">OpenBeacon</a> firmware for use
with the conference's <a href="http://amd.hope.net/">OpenAMD</a>
deployment.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4746123271/"
title="NHBadge by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4093/4746123271_7888160588.jpg"
width="500" height="375" alt="NHBadge" /></a></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/nhb12 of the subversion repository, or as
<a href="/releases/nhb12.zip">nhb12.zip</a>
and <a href="/releases/nhb12b.zip">nhb12b.zip</a>.</p>

<p>The complete project files, including the assembly line
programming and regression tests scripts, are available at
<a href="http://sourceforge.net/projects/nhbadge/files/"
>http://sourceforge.net/projects/nhbadge/files/</a>.  A newly minted
Win32 port of the GoodFET's <a href="/clients/goodfet.msp430/">MSP430
Client</a> was used for all flashing and testing.</p>

<h2>Firmware</h2>

<p>The pinouts of the NHB12 and NHB12B differ from the GoodFET2x
series that is assumed by the MSP430F2618 firmware.  Full support will
be integrated into 'goodfet.bsl --fromweb' soon, but for the time
being, flash one of the images at the
<a href="http://sourceforge.net/projects/nhbadge/files/">NHBadge</a>
project's file page</p> with 'goodfet.bsl -e -p foo.hex'.</p>

<p>To build the GoodFET firmware for these boards, compile
trunk/firmware with 'platform=nhb12 mcu=msp430x2618 make clean
install' or 'platform=nhb12b mcu=msp430x2618 make clean install' as
your hardware dictates.</p>

<h2>Bill of Materials</h2>

<!--
<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>
-->

<p>Coming Soon</p>

<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should find any.</p>

<h2>Hacks</h2>

<p>Makers Local 256 wired one of their badges to build
a <a href="https://256.makerslocal.org/2010/07/24/the-next-hope-geiger-counter/">Geiger
Counter</a> that detects other badges.</p>

<p>Adam Mayer hacked up a replacement OpenBeacon firmware image which
would clone a nearby device's ID, in order to confuse the aggregation
servers.  You can find a copy of his firmware in
the <a href="http://sourceforge.net/projects/nhbadge/develop">nhbadge
subversion repository</a>.</p>

<p>Travis managed to build a promiscuous sniffer for Microsoft's
2.4GHz wireless keyboards, documented
in <a href="http://travisgoodspeed.blogspot.com/2011/02/promiscuity-is-nrf24l01s-duty.html">Promiscuity
is the nRF24L01+'s Duty</a>.  Keystrokes are USB HID events encrypted
only by XOR, where the key is the 5 byte MAC address.  Because a
key-up event includes a longer string of zero bytes, some packets
actually include the key twice!</p>

<h1>Next Hope Badge USB Modification</h1>

<p>(The following are instructions for assembling the badge hacking
kit.  They've yet to be edited properly into the project
description.)</p>

<p>This kit is best used with the 80-pin MSP430F2618 model, so
switching to that model is recommended prior to assembly.  The 80-pin
model is written as "NHB12" on the right of the badge, while the
64-pin model is "NHB12B"</p>

<h2>Introduction</h2>

<p>The following instructions are for adding USB support to a Next
Hope conference badge, model numbers of which are NHB12 and NHB12B.
For further details see my article entitled
<a href="http://travisgoodspeed.blogspot.com/2010/06/hacking-next-hope-badge.html">Hacking
the Next Hope Badge</a>.</p>

<p>While these instructions are not terribly complicated, the kit is
not intended for a first-time solderer.  If you have never soldered
before, then build a TV-B-Gone as practice before having someone help
you assemble this kit.  Additionally, some Unix or command-line Windows
experience is necessary, as the tools involved do not have a GUI.</p>

<h2>Modification</h2>

<p>First, be sure that you have both a mini USB connector and an
FT232RL chip, as pictured below.  These are included in Mitch's
kit.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4796189835/"
title="Mini USB Connectors by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4115/4796189835_81d2796af2.jpg"
width="500" height="375" alt="Mini USB Connectors" /></a>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4796190529/"
title="FT232RL Chip by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4119/4796190529_4b14c2728f.jpg"
width="500" height="375" alt="FT232RL Chip" /></a></p>

<p>Modify your badge by the following steps:</p>
<ul>

<li>(Optional) Use a soldering iron to remove first one side, then the
other, of the battery clip.  If leaving the battery in place, be sure not to
have both a battery and USB power at the same time.</li>

<li>Use a Dremel tool or fine cutters to remove the two plastic nubs
from the the Mini USB plug.  The badges as manufactured lack holes for the
nubs, so it is necessary to remove them for mechanical compatibility.</li>

<li>Fit the Mini USB connector to the board as shown in Appendix A.
It should fit flush with the board, fitting securely after soldering.
Solder a single of the pins first, then a second to ensure proper
positioning.  The side plugs should be soldered last, with plenty of extra
solder for mechanical stability.</li>

<li><b>UNDER NO CIRCUMSTANCES</b> should the board be held by its USB
connector.  If twisted as a lever, the connector will come off, and it
will not be fun to repair the board.</li>

<li>Once the USB connector is properly in place, fit the FTDI chip as
shown in Appendix A.  The circle on the chip, which indicates Pin 1,
should be next to the "U3" text.  First, tack a single corner pin of
the chip.  Once this is done and the chip is still positioned
properly, tack a pin on the opposite corner with as little solder as
possible.  Finally, after verifying that those pins are properly
positioned, solder the remaining pins.  If any bridge, remove the
excess solder with a coper soldering wick.</li>

<li>Having these parts connected, plug the badge into your computer
using the included USB A to Mini B cable.  You should then see a new
USB device enumeration.  If anything gets hot, immediately unplug the
badge and check your soldering.</li>

</ul>

<h2>Driver</h2>

The FTDI Virtual Comm Port (VCP) driver for Windows and Mac can be
found
at <a href="http://www.ftdichip.com/Drivers/VCP.htm">http://www.ftdichip.com/Drivers/VCP.htm</a>,
while Linux and OpenBSD distributions generally ship with built-in
support.

<h2>OpenBeacon Firmware</h2>

<p>To reflash your badge's OpenBeacon firmware, grab the NHBadge
project from subversion.  The Unix command for this is ``<i>svn co
https://nhbadge.svn.sourceforge.net/svnroot/nhbadge</i>''.  (TortoiseSVN will
retrieve the same URL for Windows users.)  Inside
the <i>nhbadge/dist</i> path, one will find the latest Next Hope badge firmware
along with Windows batch scripts for programming the badges.  Unix users with
a C compiler and GoodFET and instead run ``<i>goodfet.bsl -e -p foo.hex</i>'' to compile the firmware
and flash a firmware image over USB.</p>

<p>To make things a bit easier, a ZIP file distribution for Windows users is available at
<a href="http://goodserv.cis.upenn.edu/nhdist.zip">http://goodserv.cis.upenn.edu/nhdist.zip</a>.
This is the exact file that was sent to the manufacturer, and was the
file used on the production line to program these things.</p>

<h2>GoodFET Firmware</h2>

<p>To download the GoodFET firmware for either Unix or Windows,
visit <a href="http://goodfet.sourceforge.net/">http://goodfet.sf.net/</a>
and follow the SVN instructions.  Once installed, you can flash the
GoodFET firmware to the badge with either 'goodfet.bsl -e -p
goodfet2618.hex' or 'GFBSL.EXE -e -p goodfet2618.hex'.
<p>

<p>To build the GoodFET firmware for these boards, compile
trunk/firmware with 'platform=nhb12 mcu=msp430x2618 make clean
install' or 'platform=nhb12b mcu=msp430x2618 make clean install' as
your hardware dictates.</p>

<p>Once flashed with firmware, the badge will respond to
'goodfet.monitor info' ('GFMON.EXE info' on Windows) with its model
number and clock calibrations.</p>

<p>You can then use 'goodfet.nrf sniffob' to packet sniff the rest of
the badge network or 'goodfet.nrf snifftp' to sniff traffic from
Turning Point Clickers.  Read my articles
on <a href="http://travisgoodspeed.blogspot.com/2010/06/hacking-next-hope-badge.html">Hacking
the Next Hope Badge</a>
and <a href="http://travisgoodspeed.blogspot.com/2010/07/reversing-rf-clicker.html">Reversing
and RF Clicker</a> for details.</p>

<h2>Appendix A: Component Placement</h2>


<p><a href="http://www.flickr.com/photos/travisgoodspeed/4796886774/"
title="NHBadge USB by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4095/4796886774_3da98ef486.jpg"
width="500" height="375" alt="NHBadge USB" /></a></p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4796257341/"
title="NHBadge FTDI by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4142/4796257341_6075970e35.jpg"
width="500" height="375" alt="NHBadge FTDI" /></a>

<!--
<h2>Appendix B: Schematic</h2>

<p>This is the NHB12 schematic diagram.  For modifications, the `Do
Not Populate' section will be populated.</p>

<p><img src="nhb12a_schem.jpg" /></p>
-->
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@S;
"µ'<h1>NHB12</h1>

<p>The NHB12 and NHB12B are the tenth and eleventh hardware revisions
of the GoodFET, but they also served as conference badges for
the <a href="http://thenexthope.org/">Next Hope</a> conference that
occurred in Manhattan in 2010.  These were the first GoodFETs to be
mass produced, but an additional badge hacking kit is necessary to run
the GoodFET firmware.</p>

<p>All badges ship with an MSP430 port of
the <a href="http://openbeacon.de/">OpenBeacon</a> firmware for use
with the conference's <a href="http://amd.hope.net/">OpenAMD</a>
deployment.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4746123271/"
title="NHBadge by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4093/4746123271_7888160588.jpg"
width="500" height="375" alt="NHBadge" /></a></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/nhb12 of the subversion repository, or as
<a href="/releases/nhb12.zip">nhb12.zip</a>
and <a href="/releases/nhb12b.zip">nhb12b.zip</a>.</p>

<p>The complete project files, including the assembly line
programming and regression tests scripts, are available at
<a href="http://sourceforge.net/projects/nhbadge/files/"
>http://sourceforge.net/projects/nhbadge/files/</a>.  A newly minted
Win32 port of the GoodFET's <a href="/clients/goodfet.msp430/">MSP430
Client</a> was used for all flashing and testing.</p>

<h2>Firmware</h2>

<p>The pinouts of the NHB12 and NHB12B differ from the GoodFET2x
series that is assumed by the MSP430F2618 firmware.  Full support will
be integrated into 'goodfet.bsl --fromweb' soon, but for the time
being, flash one of the images at the
<a href="http://sourceforge.net/projects/nhbadge/files/">NHBadge</a>
project's file page</p> with 'goodfet.bsl -e -p foo.hex'.</p>

<p>To build the GoodFET firmware for these boards, compile
trunk/firmware with 'platform=nhb12 mcu=msp430x2618 make clean
install' or 'platform=nhb12b mcu=msp430x2618 make clean install' as
your hardware dictates.</p>

<h2>Bill of Materials</h2>

<!--
<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>
-->

<p>Coming Soon</p>

<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should find any.</p>

<h2>Hacks</h2>

<p>Makers Local 256 wired one of their badges to build
a <a href="https://256.makerslocal.org/2010/07/24/the-next-hope-geiger-counter/">Geiger
Counter</a> that detects other badges.</p>

<p>Adam Mayer hacked up a replacement OpenBeacon firmware image which
would clone a nearby device's ID, in order to confuse the aggregation
servers.  You can find a copy of his firmware in
the <a href="http://sourceforge.net/projects/nhbadge/develop">nhbadge
subversion repository</a>.</p>

<p>Travis managed to build a promiscuous sniffer for Microsoft's
2.4GHz wireless keyboards, documented
in <a href="http://travisgoodspeed.blogspot.com/2011/02/promiscuity-is-nrf24l01s-duty.html">Promiscuity
is the nRF24L01+'s Duty</a>.  Keystrokes are USB HID events encrypted
only by XOR, where the key is the 5 byte MAC address.  Because a
key-up event includes a longer string of zero bytes, some packets
actually include the key twice!</p>

<h1>Next Hope Badge USB Modification</h1>

<p>(The following are instructions for assembling the badge hacking
kit.  They've yet to be edited properly into the project
description.)</p>

<p>This kit is best used with the 80-pin MSP430F2618 model, so
switching to that model is recommended prior to assembly.  The 80-pin
model is written as "NHB12" on the right of the badge, while the
64-pin model is "NHB12B"</p>

<h2>Introduction</h2>

<p>The following instructions are for adding USB support to a Next
Hope conference badge, model numbers of which are NHB12 and NHB12B.
For further details see my article entitled
<a href="http://travisgoodspeed.blogspot.com/2010/06/hacking-next-hope-badge.html">Hacking
the Next Hope Badge</a>.</p>

<p>While these instructions are not terribly complicated, the kit is
not intended for a first-time solderer.  If you have never soldered
before, then build a TV-B-Gone as practice before having someone help
you assemble this kit.  Additionally, some Unix or command-line Windows
experience is necessary, as the tools involved do not have a GUI.</p>

<h2>Modification</h2>

<p>First, be sure that you have both a mini USB connector and an
FT232RL chip, as pictured below.  These are included in Mitch's
kit.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4796189835/"
title="Mini USB Connectors by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4115/4796189835_81d2796af2.jpg"
width="500" height="375" alt="Mini USB Connectors" /></a>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4796190529/"
title="FT232RL Chip by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4119/4796190529_4b14c2728f.jpg"
width="500" height="375" alt="FT232RL Chip" /></a></p>

<p>Modify your badge by the following steps:</p>
<ul>

<li>(Optional) Use a soldering iron to remove first one side, then the
other, of the battery clip.  If leaving the battery in place, be sure not to
have both a battery and USB power at the same time.</li>

<li>Use a Dremel tool or fine cutters to remove the two plastic nubs
from the the Mini USB plug.  The badges as manufactured lack holes for the
nubs, so it is necessary to remove them for mechanical compatibility.</li>

<li>Fit the Mini USB connector to the board as shown in Appendix A.
It should fit flush with the board, fitting securely after soldering.
Solder a single of the pins first, then a second to ensure proper
positioning.  The side plugs should be soldered last, with plenty of extra
solder for mechanical stability.</li>

<li><b>UNDER NO CIRCUMSTANCES</b> should the board be held by its USB
connector.  If twisted as a lever, the connector will come off, and it
will not be fun to repair the board.</li>

<li>Once the USB connector is properly in place, fit the FTDI chip as
shown in Appendix A.  The circle on the chip, which indicates Pin 1,
should be next to the "U3" text.  First, tack a single corner pin of
the chip.  Once this is done and the chip is still positioned
properly, tack a pin on the opposite corner with as little solder as
possible.  Finally, after verifying that those pins are properly
positioned, solder the remaining pins.  If any bridge, remove the
excess solder with a coper soldering wick.</li>

<li>Having these parts connected, plug the badge into your computer
using the included USB A to Mini B cable.  You should then see a new
USB device enumeration.  If anything gets hot, immediately unplug the
badge and check your soldering.</li>

</ul>

<h2>Driver</h2>

The FTDI Virtual Comm Port (VCP) driver for Windows and Mac can be
found
at <a href="http://www.ftdichip.com/Drivers/VCP.htm">http://www.ftdichip.com/Drivers/VCP.htm</a>,
while Linux and OpenBSD distributions generally ship with built-in
support.

<h2>OpenBeacon Firmware</h2>

<p>To reflash your badge's OpenBeacon firmware, grab the NHBadge
project from subversion.  The Unix command for this is ``<i>svn co
https://nhbadge.svn.sourceforge.net/svnroot/nhbadge</i>''.  (TortoiseSVN will
retrieve the same URL for Windows users.)  Inside
the <i>nhbadge/dist</i> path, one will find the latest Next Hope badge firmware
along with Windows batch scripts for programming the badges.  Unix users with
a C compiler and GoodFET and instead run ``<i>goodfet.bsl -e -p foo.hex</i>'' to compile the firmware
and flash a firmware image over USB.</p>

<p>To make things a bit easier, a ZIP file distribution for Windows users is available at
<a href="http://goodserv.cis.upenn.edu/nhdist.zip">http://goodserv.cis.upenn.edu/nhdist.zip</a>.
This is the exact file that was sent to the manufacturer, and was the
file used on the production line to program these things.</p>

<h2>GoodFET Firmware</h2>

<p>To download the GoodFET firmware for either Unix or Windows,
visit <a href="http://goodfet.sourceforge.net/">http://goodfet.sf.net/</a>
and follow the SVN instructions.  Once installed, you can flash the
GoodFET firmware to the badge with either 'goodfet.bsl -e -p
goodfet2618.hex' or 'GFBSL.EXE -e -p goodfet2618.hex'.
<p>

<p>To build the GoodFET firmware for these boards, compile
trunk/firmware with 'platform=nhb12 mcu=msp430x2618 make clean
install' or 'platform=nhb12b mcu=msp430x2618 make clean install' as
your hardware dictates.</p>

<p>Once flashed with firmware, the badge will respond to
'goodfet.monitor info' ('GFMON.EXE info' on Windows) with its model
number and clock calibrations.</p>

<p>You can then use 'goodfet.nrf sniffob' to packet sniff the rest of
the badge network or 'goodfet.nrf snifftp' to sniff traffic from
Turning Point Clickers.  Read my articles
on <a href="http://travisgoodspeed.blogspot.com/2010/06/hacking-next-hope-badge.html">Hacking
the Next Hope Badge</a>
and <a href="http://travisgoodspeed.blogspot.com/2010/07/reversing-rf-clicker.html">Reversing
and RF Clicker</a> for details.</p>

<h2>Appendix A: Component Placement</h2>


<p><a href="http://www.flickr.com/photos/travisgoodspeed/4796886774/"
title="NHBadge USB by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4095/4796886774_3da98ef486.jpg"
width="500" height="375" alt="NHBadge USB" /></a></p>

<a href="http://www.flickr.com/photos/travisgoodspeed/4796257341/"
title="NHBadge FTDI by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4142/4796257341_6075970e35.jpg"
width="500" height="375" alt="NHBadge FTDI" /></a>

<!--
<h2>Appendix B: Schematic</h2>

<p>This is the NHB12 schematic diagram.  For modifications, the `Do
Not Populate' section will be populated.</p>

<p><img src="nhb12a_schem.jpg" /></p>
-->"/hardware/goodfet31L/{;{	;"Ê<h1>GoodFET31L</h1>

<p>Resulting from a collaboration between Scott Livingston and Travis
Goodspeed, the GoodFET31L derives from the GoodFET31 and uses QFN
variants of MSP430F2274 and FT232R chips. Discrete components remain
unchanged in size and value (see Bill of Materials below).</p>

<p>The end of the board opposite to the USB pads is designed to fit
in-between the two rows of 6x2 0.1" pin header. The fit should be snug,
and each pin is soldered to the pad in the style of SMD work. A more
detailed construction demonstration for side-mounting the 0.1" header
and soldering QFN chips may be done in the (near) future.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet31L of the subversion repository, or as
<a href="/releases/goodfet31L.zip">goodfet31L.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>QFN32</td><td>FT232RQ</td></tr>
<tr><td>1</td><td>QFN40</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>Red LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>2x6 pin, 0.1" header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct according to the following Flickr image.
<a href="http://www.flickr.com/photos/travisgoodspeed/4662090466/in/photostream/"
title="GoodFET31L Layout by Scott Livingston and Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4071/4662090466_ee1bc63131.jpg"
width="500" height="274" alt="GoodFET31L Layout" /></a>
</p>


<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>;"%<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET31L</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET31L</h1>

<p>Resulting from a collaboration between Scott Livingston and Travis
Goodspeed, the GoodFET31L derives from the GoodFET31 and uses QFN
variants of MSP430F2274 and FT232R chips. Discrete components remain
unchanged in size and value (see Bill of Materials below).</p>

<p>The end of the board opposite to the USB pads is designed to fit
in-between the two rows of 6x2 0.1" pin header. The fit should be snug,
and each pin is soldered to the pad in the style of SMD work. A more
detailed construction demonstration for side-mounting the 0.1" header
and soldering QFN chips may be done in the (near) future.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet31L of the subversion repository, or as
<a href="/releases/goodfet31L.zip">goodfet31L.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>QFN32</td><td>FT232RQ</td></tr>
<tr><td>1</td><td>QFN40</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>Red LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>2x6 pin, 0.1" header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct according to the following Flickr image.
<a href="http://www.flickr.com/photos/travisgoodspeed/4662090466/in/photostream/"
title="GoodFET31L Layout by Scott Livingston and Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4071/4662090466_ee1bc63131.jpg"
width="500" height="274" alt="GoodFET31L Layout" /></a>
</p>


<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@Y;
"Ê<h1>GoodFET31L</h1>

<p>Resulting from a collaboration between Scott Livingston and Travis
Goodspeed, the GoodFET31L derives from the GoodFET31 and uses QFN
variants of MSP430F2274 and FT232R chips. Discrete components remain
unchanged in size and value (see Bill of Materials below).</p>

<p>The end of the board opposite to the USB pads is designed to fit
in-between the two rows of 6x2 0.1" pin header. The fit should be snug,
and each pin is soldered to the pad in the style of SMD work. A more
detailed construction demonstration for side-mounting the 0.1" header
and soldering QFN chips may be done in the (near) future.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet31L of the subversion repository, or as
<a href="/releases/goodfet31L.zip">goodfet31L.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>QFN32</td><td>FT232RQ</td></tr>
<tr><td>1</td><td>QFN40</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>Red LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>2x6 pin, 0.1" header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct according to the following Flickr image.
<a href="http://www.flickr.com/photos/travisgoodspeed/4662090466/in/photostream/"
title="GoodFET31L Layout by Scott Livingston and Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4071/4662090466_ee1bc63131.jpg"
width="500" height="274" alt="GoodFET31L Layout" /></a>
</p>


<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>"/orders/{;{	;"H<h1>Ordering</h1>

<h3>Circuit Boards</h3>
<p>PCBs for
the <a href="/hardware/goodfet31">GoodFET31</a>, <a href="/hardware/goodfet40">GoodFET40</a>,
and <a href="/hardware/goodfet41">GoodFET41</a> are available by
sending USD $5/board to sixtysixav at hotmail.com.  Be sure to include
a shipping address, and note that you will also need to purchase parts
from the Bill of Materials.
</p>

<p>As this price is slightly above cost, we are happy to offer free boards to students,
the unemployed, and the funemployed.  Just send an email to the same address, and some
boards will reach you in a jiffy.</p>

<p>Shipping to North America and Europe is no problem.  Shipments to
Australia are occaisionally returned, but seem to make it through.</p>

<h3>Assembled Boards</h3>

<p>Assembled GoodFETs are not yet available.  Please be patient.</p>;"¡<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Ordering</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Ordering</h1>

<h3>Circuit Boards</h3>
<p>PCBs for
the <a href="/hardware/goodfet31">GoodFET31</a>, <a href="/hardware/goodfet40">GoodFET40</a>,
and <a href="/hardware/goodfet41">GoodFET41</a> are available by
sending USD $5/board to sixtysixav at hotmail.com.  Be sure to include
a shipping address, and note that you will also need to purchase parts
from the Bill of Materials.
</p>

<p>As this price is slightly above cost, we are happy to offer free boards to students,
the unemployed, and the funemployed.  Just send an email to the same address, and some
boards will reach you in a jiffy.</p>

<p>Shipping to North America and Europe is no problem.  Shipments to
Australia are occaisionally returned, but seem to make it through.</p>

<h3>Assembled Boards</h3>

<p>Assembled GoodFETs are not yet available.  Please be patient.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@_;
"H<h1>Ordering</h1>

<h3>Circuit Boards</h3>
<p>PCBs for
the <a href="/hardware/goodfet31">GoodFET31</a>, <a href="/hardware/goodfet40">GoodFET40</a>,
and <a href="/hardware/goodfet41">GoodFET41</a> are available by
sending USD $5/board to sixtysixav at hotmail.com.  Be sure to include
a shipping address, and note that you will also need to purchase parts
from the Bill of Materials.
</p>

<p>As this price is slightly above cost, we are happy to offer free boards to students,
the unemployed, and the funemployed.  Just send an email to the same address, and some
boards will reach you in a jiffy.</p>

<p>Shipping to North America and Europe is no problem.  Shipments to
Australia are occaisionally returned, but seem to make it through.</p>

<h3>Assembled Boards</h3>

<p>Assembled GoodFETs are not yet available.  Please be patient.</p>"/about/support/{;{	;"n<h1>Support</h1>

<h3>IRC</h3>

<p>Some users and developers of the GoodFET hang out in #goodfet
on <a href="http://freenode.net/">irc.freenode.net</a>.

<h3>Mailing Lists</h3>

<p>There is no user mailing list for the GoodFET, but a developer list
can be found
as <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=goodfet-devel">goodfet-devel</a></p>;"Æ<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Support</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Support</h1>

<h3>IRC</h3>

<p>Some users and developers of the GoodFET hang out in #goodfet
on <a href="http://freenode.net/">irc.freenode.net</a>.

<h3>Mailing Lists</h3>

<p>There is no user mailing list for the GoodFET, but a developer list
can be found
as <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=goodfet-devel">goodfet-devel</a></p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@e;
"n<h1>Support</h1>

<h3>IRC</h3>

<p>Some users and developers of the GoodFET hang out in #goodfet
on <a href="http://freenode.net/">irc.freenode.net</a>.

<h3>Mailing Lists</h3>

<p>There is no user mailing list for the GoodFET, but a developer list
can be found
as <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=goodfet-devel">goodfet-devel</a></p>"/apps/pic/{;{	;"
<h1>PIC Application</h1>

<p>Read, program,
erase <a href="http://en.wikipedia.org/wiki/PIC_microcontroller">PIC</a>
chips. Originally targetted at 16-bit families (i.e., PIC24H,
dsPIC33F, PIC24F, and dsPIC30F), but now moving in the 8-bit and
32-bit directions.</p>


<h2>Clients</h2>

<p><a href="/clients/goodfet.pic/">goodfet.pic</a> is a decent but
unstable client. You can expect its command-line arguments to change
as new chip families become supported and as the PIC app evolves.</p>

<p>A Python class that subsumes goodfet.pic (whereby goodfet.pic will
become a mere frontend to several methods of the class) is in the
works. Stay tuned.</p>


<h2>Status</h2>

<p>
<h3>ICSP likely supported families</h3>
<table border="1">
<tr><th>Family</th><th>Comments</th></tr>
<tr><td>PIC24F</td><td></td></tr>
<tr><td>dsPIC33F</td><td></td></tr>
<tr><td>PIC24H</td><td></td></tr>
</table>

<h3>Specific chips tested</h3>
<table border="1">
<tr><th>Chip</th><th>Comments</th></tr>
<tr><td>PIC24FJ64GA002</td><td></td></tr>
<tr><td>PIC24FJ128DA106</td><td></td></tr>
<tr><td>dsPIC33FJ128GP708</td><td></td></tr>
<tr><td>dsPIC33FJ128GP710</td><td></td></tr>
<tr><td>PIC24HJ12GP201</td><td></td></tr>
</table>
</p>

<h2>Development</h2>

<p>Coming soon!</p>

<h2>Verbs</h2>

<p>The following verbs are supported. Note that the standard verbs are
currently <em>not</em> implemented in their &lt; 0x80 address
(confer <a href="/manual/">the manual</a>). The PIC app is still young
and, given variations in access methods across chip families, it is not
ready to commit to standard verbs.</p>

<p>Naming conventions:
<ul>
<li>*33F - targets PIC24H and dsPIC33F chips.</li>
</ul></p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x81</td><td>PIC_DEVID33F</td><td>Read Device ID, application ID, and hardware revision.</td></tr>
<tr><td>0x82</td><td>PIC_SIX33F</td><td>ICSP six command; execute instruction on target (sourcing clock from PGC).</td></tr>
<tr><td>0x83</td><td>PIC_REGOUT33F</td><td>Read out VISI register.</td></tr>
<tr><td>0x84</td><td>PIC_START33F</td><td>Start ICSP session.</td></tr>
<tr><td>0x85</td><td>PIC_STOP33F</td><td>Stop ICSP session (basically, drop !MCLR pin and pause briefly).</td></tr>
<tr><td>0x86</td><td>PIC_SIXLIST33F</td><td>Buffer list of instructions to MSP430, then execute them over ICSP session with target dsPIC33F/PIC24H chip. This reduces overhead of UART communication between client and app.</td></tr>
<tr><td>0x87</td><td>PIC_RESET33F</td><td>Reset attached dsPIC33F/PIC24H chip</td></tr>
<td><td>0x88</td><td>PIC_CMDLIST</td><td>Same as PIC_SIXLIST33F, but with an ICSP command before each instruction.</td></tr>

</table>;"å<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- PIC</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>PIC Application</h1>

<p>Read, program,
erase <a href="http://en.wikipedia.org/wiki/PIC_microcontroller">PIC</a>
chips. Originally targetted at 16-bit families (i.e., PIC24H,
dsPIC33F, PIC24F, and dsPIC30F), but now moving in the 8-bit and
32-bit directions.</p>


<h2>Clients</h2>

<p><a href="/clients/goodfet.pic/">goodfet.pic</a> is a decent but
unstable client. You can expect its command-line arguments to change
as new chip families become supported and as the PIC app evolves.</p>

<p>A Python class that subsumes goodfet.pic (whereby goodfet.pic will
become a mere frontend to several methods of the class) is in the
works. Stay tuned.</p>


<h2>Status</h2>

<p>
<h3>ICSP likely supported families</h3>
<table border="1">
<tr><th>Family</th><th>Comments</th></tr>
<tr><td>PIC24F</td><td></td></tr>
<tr><td>dsPIC33F</td><td></td></tr>
<tr><td>PIC24H</td><td></td></tr>
</table>

<h3>Specific chips tested</h3>
<table border="1">
<tr><th>Chip</th><th>Comments</th></tr>
<tr><td>PIC24FJ64GA002</td><td></td></tr>
<tr><td>PIC24FJ128DA106</td><td></td></tr>
<tr><td>dsPIC33FJ128GP708</td><td></td></tr>
<tr><td>dsPIC33FJ128GP710</td><td></td></tr>
<tr><td>PIC24HJ12GP201</td><td></td></tr>
</table>
</p>

<h2>Development</h2>

<p>Coming soon!</p>

<h2>Verbs</h2>

<p>The following verbs are supported. Note that the standard verbs are
currently <em>not</em> implemented in their &lt; 0x80 address
(confer <a href="/manual/">the manual</a>). The PIC app is still young
and, given variations in access methods across chip families, it is not
ready to commit to standard verbs.</p>

<p>Naming conventions:
<ul>
<li>*33F - targets PIC24H and dsPIC33F chips.</li>
</ul></p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x81</td><td>PIC_DEVID33F</td><td>Read Device ID, application ID, and hardware revision.</td></tr>
<tr><td>0x82</td><td>PIC_SIX33F</td><td>ICSP six command; execute instruction on target (sourcing clock from PGC).</td></tr>
<tr><td>0x83</td><td>PIC_REGOUT33F</td><td>Read out VISI register.</td></tr>
<tr><td>0x84</td><td>PIC_START33F</td><td>Start ICSP session.</td></tr>
<tr><td>0x85</td><td>PIC_STOP33F</td><td>Stop ICSP session (basically, drop !MCLR pin and pause briefly).</td></tr>
<tr><td>0x86</td><td>PIC_SIXLIST33F</td><td>Buffer list of instructions to MSP430, then execute them over ICSP session with target dsPIC33F/PIC24H chip. This reduces overhead of UART communication between client and app.</td></tr>
<tr><td>0x87</td><td>PIC_RESET33F</td><td>Reset attached dsPIC33F/PIC24H chip</td></tr>
<td><td>0x88</td><td>PIC_CMDLIST</td><td>Same as PIC_SIXLIST33F, but with an ICSP command before each instruction.</td></tr>

</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@k;
"
<h1>PIC Application</h1>

<p>Read, program,
erase <a href="http://en.wikipedia.org/wiki/PIC_microcontroller">PIC</a>
chips. Originally targetted at 16-bit families (i.e., PIC24H,
dsPIC33F, PIC24F, and dsPIC30F), but now moving in the 8-bit and
32-bit directions.</p>


<h2>Clients</h2>

<p><a href="/clients/goodfet.pic/">goodfet.pic</a> is a decent but
unstable client. You can expect its command-line arguments to change
as new chip families become supported and as the PIC app evolves.</p>

<p>A Python class that subsumes goodfet.pic (whereby goodfet.pic will
become a mere frontend to several methods of the class) is in the
works. Stay tuned.</p>


<h2>Status</h2>

<p>
<h3>ICSP likely supported families</h3>
<table border="1">
<tr><th>Family</th><th>Comments</th></tr>
<tr><td>PIC24F</td><td></td></tr>
<tr><td>dsPIC33F</td><td></td></tr>
<tr><td>PIC24H</td><td></td></tr>
</table>

<h3>Specific chips tested</h3>
<table border="1">
<tr><th>Chip</th><th>Comments</th></tr>
<tr><td>PIC24FJ64GA002</td><td></td></tr>
<tr><td>PIC24FJ128DA106</td><td></td></tr>
<tr><td>dsPIC33FJ128GP708</td><td></td></tr>
<tr><td>dsPIC33FJ128GP710</td><td></td></tr>
<tr><td>PIC24HJ12GP201</td><td></td></tr>
</table>
</p>

<h2>Development</h2>

<p>Coming soon!</p>

<h2>Verbs</h2>

<p>The following verbs are supported. Note that the standard verbs are
currently <em>not</em> implemented in their &lt; 0x80 address
(confer <a href="/manual/">the manual</a>). The PIC app is still young
and, given variations in access methods across chip families, it is not
ready to commit to standard verbs.</p>

<p>Naming conventions:
<ul>
<li>*33F - targets PIC24H and dsPIC33F chips.</li>
</ul></p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x81</td><td>PIC_DEVID33F</td><td>Read Device ID, application ID, and hardware revision.</td></tr>
<tr><td>0x82</td><td>PIC_SIX33F</td><td>ICSP six command; execute instruction on target (sourcing clock from PGC).</td></tr>
<tr><td>0x83</td><td>PIC_REGOUT33F</td><td>Read out VISI register.</td></tr>
<tr><td>0x84</td><td>PIC_START33F</td><td>Start ICSP session.</td></tr>
<tr><td>0x85</td><td>PIC_STOP33F</td><td>Stop ICSP session (basically, drop !MCLR pin and pause briefly).</td></tr>
<tr><td>0x86</td><td>PIC_SIXLIST33F</td><td>Buffer list of instructions to MSP430, then execute them over ICSP session with target dsPIC33F/PIC24H chip. This reduces overhead of UART communication between client and app.</td></tr>
<tr><td>0x87</td><td>PIC_RESET33F</td><td>Reset attached dsPIC33F/PIC24H chip</td></tr>
<td><td>0x88</td><td>PIC_CMDLIST</td><td>Same as PIC_SIXLIST33F, but with an ICSP command before each instruction.</td></tr>

</table>"/clients/goodfetspiflash/{;{	;"y<h1>goodfet.spiflash</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: goodfet.spiflash verb [objects]

goodfet.spiflash info
goodfet.spiflash dump $foo.rom [0x$start 0x$stop]
goodfet.spiflash erase
goodfet.spiflash flash $foo.rom [0x$start 0x$stop]
goodfet.spiflash verify $foo.rom [0x$start 0x$stop]
goodfet.spiflash peek 0x$start [0x$stop]
goodfet.spiflash poke 0x$adr 0x$val
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td>    </td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
	</table>
</p>

<h2>Notes</h2>

<p>Unlike I2C and SPI EEPROM devices, SPI Flash devices rarely have
internal pulling resistors on the !WP and !HOLD pins.  You must explicitly
pull these up.</p>;"Ú<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.spiflash</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.spiflash</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: goodfet.spiflash verb [objects]

goodfet.spiflash info
goodfet.spiflash dump $foo.rom [0x$start 0x$stop]
goodfet.spiflash erase
goodfet.spiflash flash $foo.rom [0x$start 0x$stop]
goodfet.spiflash verify $foo.rom [0x$start 0x$stop]
goodfet.spiflash peek 0x$start [0x$stop]
goodfet.spiflash poke 0x$adr 0x$val
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td>    </td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
	</table>
</p>

<h2>Notes</h2>

<p>Unlike I2C and SPI EEPROM devices, SPI Flash devices rarely have
internal pulling resistors on the !WP and !HOLD pins.  You must explicitly
pull these up.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@q;
"y<h1>goodfet.spiflash</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: goodfet.spiflash verb [objects]

goodfet.spiflash info
goodfet.spiflash dump $foo.rom [0x$start 0x$stop]
goodfet.spiflash erase
goodfet.spiflash flash $foo.rom [0x$start 0x$stop]
goodfet.spiflash verify $foo.rom [0x$start 0x$stop]
goodfet.spiflash peek 0x$start [0x$stop]
goodfet.spiflash poke 0x$adr 0x$val
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td>    </td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
	</table>
</p>

<h2>Notes</h2>

<p>Unlike I2C and SPI EEPROM devices, SPI Flash devices rarely have
internal pulling resistors on the !WP and !HOLD pins.  You must explicitly
pull these up.</p>"/clients/avr/{;{	;"Hi, I'm a new page!;"n<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- A New Page</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      Hi, I'm a new page!
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@w;
"Hi, I'm a new page!"/hardware/goodfet10/{;{	;"<h1>GoodFET10</h1>

<p>The GoodFET10 is the first hardware revision of the GoodFET.
Like all first-run boards, it has a few errata that must be patched
before use.  These inconveniences will be fixed in the GoodFET11.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in 
/branches/goodfet10 of Subversion, or as
<a href="/releases/goodfet10.zip">goodfet10.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232R </td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>5</td><td>0603</td><td>47K Pull-up Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
</table>

<p>Also, one 47K through-hole resistor and a 32.768kHz crystal
are required to patch errata.</p>

<h2>Construction</h2>

<p>Construct
as described on the 
<a href="http://www.flickr.com/photos/travisgoodspeed/3440547140/">
following Flickr image's annotations</a>, then patch as described
in the Errata section.
<a href="http://www.flickr.com/photos/travisgoodspeed/3440547140/" title="GOODFET10 by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3402/3440547140_93110cc816.jpg" width="500" height="375" alt="GOODFET10" /></a>
</p>

<h2>Errata</h2>
<p>
<a href="http://www.flickr.com/photos/travisgoodspeed/3472825191/" title="GOODFET10 Erratum Fix by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3315/3472825191_9f7612cd5f.jpg" width="500" height="375" alt="GOODFET10 Erratum Fix" /></a>
The GOODFET10 is missing a 47K pull-up resistor on the !RST pin of the MSP430F161x
chip.  Solder one like so.</p>

<p>Further, no crystals are present on this board.  A 32.768kHz crystal must be
patched onto the XIN/XOUT pins.</p>

<p>The board as first manufactured was too thin, so a wedge or a crimped
USB extension cable is necessary for a tight fit.  Future runs will be made
at 0.078'' thickness.</p>;"Û<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET10</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET10</h1>

<p>The GoodFET10 is the first hardware revision of the GoodFET.
Like all first-run boards, it has a few errata that must be patched
before use.  These inconveniences will be fixed in the GoodFET11.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in 
/branches/goodfet10 of Subversion, or as
<a href="/releases/goodfet10.zip">goodfet10.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232R </td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>5</td><td>0603</td><td>47K Pull-up Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
</table>

<p>Also, one 47K through-hole resistor and a 32.768kHz crystal
are required to patch errata.</p>

<h2>Construction</h2>

<p>Construct
as described on the 
<a href="http://www.flickr.com/photos/travisgoodspeed/3440547140/">
following Flickr image's annotations</a>, then patch as described
in the Errata section.
<a href="http://www.flickr.com/photos/travisgoodspeed/3440547140/" title="GOODFET10 by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3402/3440547140_93110cc816.jpg" width="500" height="375" alt="GOODFET10" /></a>
</p>

<h2>Errata</h2>
<p>
<a href="http://www.flickr.com/photos/travisgoodspeed/3472825191/" title="GOODFET10 Erratum Fix by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3315/3472825191_9f7612cd5f.jpg" width="500" height="375" alt="GOODFET10 Erratum Fix" /></a>
The GOODFET10 is missing a 47K pull-up resistor on the !RST pin of the MSP430F161x
chip.  Solder one like so.</p>

<p>Further, no crystals are present on this board.  A 32.768kHz crystal must be
patched onto the XIN/XOUT pins.</p>

<p>The board as first manufactured was too thin, so a wedge or a crimped
USB extension cable is necessary for a tight fit.  Future runs will be made
at 0.078'' thickness.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@};
"<h1>GoodFET10</h1>

<p>The GoodFET10 is the first hardware revision of the GoodFET.
Like all first-run boards, it has a few errata that must be patched
before use.  These inconveniences will be fixed in the GoodFET11.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in 
/branches/goodfet10 of Subversion, or as
<a href="/releases/goodfet10.zip">goodfet10.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232R </td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>5</td><td>0603</td><td>47K Pull-up Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
</table>

<p>Also, one 47K through-hole resistor and a 32.768kHz crystal
are required to patch errata.</p>

<h2>Construction</h2>

<p>Construct
as described on the 
<a href="http://www.flickr.com/photos/travisgoodspeed/3440547140/">
following Flickr image's annotations</a>, then patch as described
in the Errata section.
<a href="http://www.flickr.com/photos/travisgoodspeed/3440547140/" title="GOODFET10 by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3402/3440547140_93110cc816.jpg" width="500" height="375" alt="GOODFET10" /></a>
</p>

<h2>Errata</h2>
<p>
<a href="http://www.flickr.com/photos/travisgoodspeed/3472825191/" title="GOODFET10 Erratum Fix by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3315/3472825191_9f7612cd5f.jpg" width="500" height="375" alt="GOODFET10 Erratum Fix" /></a>
The GOODFET10 is missing a 47K pull-up resistor on the !RST pin of the MSP430F161x
chip.  Solder one like so.</p>

<p>Further, no crystals are present on this board.  A 32.768kHz crystal must be
patched onto the XIN/XOUT pins.</p>

<p>The board as first manufactured was too thin, so a wedge or a crimped
USB extension cable is necessary for a tight fit.  Future runs will be made
at 0.078'' thickness.</p>"/hardware/goodfet20/{;{	;"ð<h1>GoodFET20</h1>

<p>The GoodFET20 is the third hardware revision of the GoodFET.  The
same board is also the basis of
the <a href="/hardware/badfet20">BadFET20</a>, which runs at 16MHz and
optionally glitches the voltage of target chips to bypass securiy
features.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet20 of the subversion repository, or as
<a href="/releases/goodfet20.zip">goodfet20.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>47K Pull-up Resistors (GoodFET only)</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>TC26H</td><td>32.768kHz Crystal</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.
<a href="http://www.flickr.com/photos/travisgoodspeed/3800484079/"
title="GoodFET20 by Travis Goodspeed, on Flickr"><img
src="http://farm4.static.flickr.com/3593/3800484079_13fe591642.jpg"
width="500" height="115" alt="GoodFET20" /></a>
</p>

<h2>Errata</h2>

<p>The documentation previously specified a 32kHz crystal.
Use 32.768kHz, not 32.000kHz.</p>;"J<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET20</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET20</h1>

<p>The GoodFET20 is the third hardware revision of the GoodFET.  The
same board is also the basis of
the <a href="/hardware/badfet20">BadFET20</a>, which runs at 16MHz and
optionally glitches the voltage of target chips to bypass securiy
features.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet20 of the subversion repository, or as
<a href="/releases/goodfet20.zip">goodfet20.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>47K Pull-up Resistors (GoodFET only)</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>TC26H</td><td>32.768kHz Crystal</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.
<a href="http://www.flickr.com/photos/travisgoodspeed/3800484079/"
title="GoodFET20 by Travis Goodspeed, on Flickr"><img
src="http://farm4.static.flickr.com/3593/3800484079_13fe591642.jpg"
width="500" height="115" alt="GoodFET20" /></a>
</p>

<h2>Errata</h2>

<p>The documentation previously specified a 32kHz crystal.
Use 32.768kHz, not 32.000kHz.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@~;
"ð<h1>GoodFET20</h1>

<p>The GoodFET20 is the third hardware revision of the GoodFET.  The
same board is also the basis of
the <a href="/hardware/badfet20">BadFET20</a>, which runs at 16MHz and
optionally glitches the voltage of target chips to bypass securiy
features.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet20 of the subversion repository, or as
<a href="/releases/goodfet20.zip">goodfet20.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F1611 or 1612</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>47K Pull-up Resistors (GoodFET only)</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>TC26H</td><td>32.768kHz Crystal</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.
<a href="http://www.flickr.com/photos/travisgoodspeed/3800484079/"
title="GoodFET20 by Travis Goodspeed, on Flickr"><img
src="http://farm4.static.flickr.com/3593/3800484079_13fe591642.jpg"
width="500" height="115" alt="GoodFET20" /></a>
</p>

<h2>Errata</h2>

<p>The documentation previously specified a 32kHz crystal.
Use 32.768kHz, not 32.000kHz.</p>"/hardware/badfet20/{;{	;"	<h1>BadFET20</h1>

<p>The BadFET20 is the fourth hardware revision of the GoodFET, and it
shares a board with the <a href="/hardware/goodfet20/">GoodFET20</a>.
It differs from the GoodFET20 in that its microcontroller is a more
powerful MSP430F2618 running at 16MHz by an internal oscillator.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet20 of the subversion repository, or as
<a href="/releases/goodfet20.zip">goodfet20.zip</a>.  The GoodFET20
and the BadFET20 use identical boards; they only differ in the choice
of components.
</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F2618</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
<tr><td>1</td><td>SO16</td><td>74HC4053 Analog MUX</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations,
using a 2618 in lieu of the 1612.  Omit the row of pull-up resistors.

<a href="http://www.flickr.com/photos/travisgoodspeed/3938883506/"
title="BadFET20 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2529/3938883506_42f6ddb29e.jpg"
width="500" height="375" alt="BadFET20" /></a>
</p>

<h2>Errata</h2>

<p>The GoodFET20 documentation used to indicate that adding an 8MHz
crystal would suffice to convert a GoodFET to a BadFET.  That was
incorrect, and an MSP430F2618 is required.</p>

<p>Thanks to Kenny for reporting that the 47K pull-up resistor
was missing from the BOM.  This has since been corrected.</p>

<p>Most 74HC4053 chips do not function at 3.3V.  For glitching
research, please use the <a href="/hardware/goodfet21/">GoodFET21</a>
instead.</p>;"b<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- BadFET20</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>BadFET20</h1>

<p>The BadFET20 is the fourth hardware revision of the GoodFET, and it
shares a board with the <a href="/hardware/goodfet20/">GoodFET20</a>.
It differs from the GoodFET20 in that its microcontroller is a more
powerful MSP430F2618 running at 16MHz by an internal oscillator.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet20 of the subversion repository, or as
<a href="/releases/goodfet20.zip">goodfet20.zip</a>.  The GoodFET20
and the BadFET20 use identical boards; they only differ in the choice
of components.
</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F2618</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
<tr><td>1</td><td>SO16</td><td>74HC4053 Analog MUX</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations,
using a 2618 in lieu of the 1612.  Omit the row of pull-up resistors.

<a href="http://www.flickr.com/photos/travisgoodspeed/3938883506/"
title="BadFET20 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2529/3938883506_42f6ddb29e.jpg"
width="500" height="375" alt="BadFET20" /></a>
</p>

<h2>Errata</h2>

<p>The GoodFET20 documentation used to indicate that adding an 8MHz
crystal would suffice to convert a GoodFET to a BadFET.  That was
incorrect, and an MSP430F2618 is required.</p>

<p>Thanks to Kenny for reporting that the 47K pull-up resistor
was missing from the BOM.  This has since been corrected.</p>

<p>Most 74HC4053 chips do not function at 3.3V.  For glitching
research, please use the <a href="/hardware/goodfet21/">GoodFET21</a>
instead.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"	<h1>BadFET20</h1>

<p>The BadFET20 is the fourth hardware revision of the GoodFET, and it
shares a board with the <a href="/hardware/goodfet20/">GoodFET20</a>.
It differs from the GoodFET20 in that its microcontroller is a more
powerful MSP430F2618 running at 16MHz by an internal oscillator.</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet20 of the subversion repository, or as
<a href="/releases/goodfet20.zip">goodfet20.zip</a>.  The GoodFET20
and the BadFET20 use identical boards; they only differ in the choice
of components.
</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>QFP64</td><td>MSP430F2618</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
<tr><td>1</td><td>SO16</td><td>74HC4053 Analog MUX</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations,
using a 2618 in lieu of the 1612.  Omit the row of pull-up resistors.

<a href="http://www.flickr.com/photos/travisgoodspeed/3938883506/"
title="BadFET20 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2529/3938883506_42f6ddb29e.jpg"
width="500" height="375" alt="BadFET20" /></a>
</p>

<h2>Errata</h2>

<p>The GoodFET20 documentation used to indicate that adding an 8MHz
crystal would suffice to convert a GoodFET to a BadFET.  That was
incorrect, and an MSP430F2618 is required.</p>

<p>Thanks to Kenny for reporting that the 47K pull-up resistor
was missing from the BOM.  This has since been corrected.</p>

<p>Most 74HC4053 chips do not function at 3.3V.  For glitching
research, please use the <a href="/hardware/goodfet21/">GoodFET21</a>
instead.</p>"/apps/jtagxscale/{;{	;" 	<h1>JTAGXScale Application</h1>

<p>This application is used for programming and debugging the Intel XScale PXA 25x
CPU.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.xscale'.</p>

<h2>Status</h2>

<p>Currently nothing is implemented, this is just a stub.</p>

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<!--
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>
-->

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<!--
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
-->
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->
<!--
<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
-->
<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->
<!--
<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>
-->
</table>;"\<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- XScale JTAG</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>JTAGXScale Application</h1>

<p>This application is used for programming and debugging the Intel XScale PXA 25x
CPU.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.xscale'.</p>

<h2>Status</h2>

<p>Currently nothing is implemented, this is just a stub.</p>

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<!--
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>
-->

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<!--
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
-->
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->
<!--
<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
-->
<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->
<!--
<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>
-->
</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
" 	<h1>JTAGXScale Application</h1>

<p>This application is used for programming and debugging the Intel XScale PXA 25x
CPU.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.xscale'.</p>

<h2>Status</h2>

<p>Currently nothing is implemented, this is just a stub.</p>

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<!--
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>
-->

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<!--
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
-->
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->
<!--
<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
-->
<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->
<!--
<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>
-->
</table>"/apps/maxusb/{;{	;"Ý<h1>MAXUSB Application</h1>

<p>This is a driver for the MAX342x USB chips from Maxim.  The pinout
is SPI except that pin 8 becomes INT and pin 11 becomes !RST.</p>

<!--
<a href="http://www.flickr.com/photos/travisgoodspeed/3593286652/"
title="GoodFET SPI Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2466/3593286652_f849e74d18.jpg"
width="500" height="290" alt="GoodFET SPI Pinout" /></a>
-->

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>


<h2>Clients</h2>

<p>A Python
client, <a href="/clients/goodfet.maxusb/">goodfet.maxusb</a>, is a
doodle for simple experimentation..</p>

<h2>Development</h2>

<p>Nothing yet.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange SPI data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange SPI data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>TODO</td></tr>
<tr><td>0x03</td><td>POKE</td><td>TODO</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<!--
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>SPI_JEDEC</td><td>Grab 3-byte JEDEC ID.</td></tr>
<tr><td>0x81</td><td>SPI_ERASE</td><td>Erase a Flash EEPROM.</td></tr>
-->
</table>;"C<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Maxim USB Controllers</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>MAXUSB Application</h1>

<p>This is a driver for the MAX342x USB chips from Maxim.  The pinout
is SPI except that pin 8 becomes INT and pin 11 becomes !RST.</p>

<!--
<a href="http://www.flickr.com/photos/travisgoodspeed/3593286652/"
title="GoodFET SPI Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2466/3593286652_f849e74d18.jpg"
width="500" height="290" alt="GoodFET SPI Pinout" /></a>
-->

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>


<h2>Clients</h2>

<p>A Python
client, <a href="/clients/goodfet.maxusb/">goodfet.maxusb</a>, is a
doodle for simple experimentation..</p>

<h2>Development</h2>

<p>Nothing yet.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange SPI data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange SPI data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>TODO</td></tr>
<tr><td>0x03</td><td>POKE</td><td>TODO</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<!--
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>SPI_JEDEC</td><td>Grab 3-byte JEDEC ID.</td></tr>
<tr><td>0x81</td><td>SPI_ERASE</td><td>Erase a Flash EEPROM.</td></tr>
-->
</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"Ý<h1>MAXUSB Application</h1>

<p>This is a driver for the MAX342x USB chips from Maxim.  The pinout
is SPI except that pin 8 becomes INT and pin 11 becomes !RST.</p>

<!--
<a href="http://www.flickr.com/photos/travisgoodspeed/3593286652/"
title="GoodFET SPI Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2466/3593286652_f849e74d18.jpg"
width="500" height="290" alt="GoodFET SPI Pinout" /></a>
-->

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>


<h2>Clients</h2>

<p>A Python
client, <a href="/clients/goodfet.maxusb/">goodfet.maxusb</a>, is a
doodle for simple experimentation..</p>

<h2>Development</h2>

<p>Nothing yet.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange SPI data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange SPI data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>TODO</td></tr>
<tr><td>0x03</td><td>POKE</td><td>TODO</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<!--
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>SPI_JEDEC</td><td>Grab 3-byte JEDEC ID.</td></tr>
<tr><td>0x81</td><td>SPI_ERASE</td><td>Erase a Flash EEPROM.</td></tr>
-->
</table>"/about/status/{;{	;"(<h1>Status</h1>

<h3>Compatibility</h3>

<table border="1">
<tr><th>Chip</th><th>Read</th><th>Flash</th></tr>
<tr><td>MSP430F1xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F2xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F4xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F5xx</td><td>Fast</td><td>No</td></tr>
<tr><td>Atmel AVR ISP</td><td>Yes</td><td>No</td></tr>
<tr><td>Chipcon 8051</td><td>Slow</td><td>Yes</td></tr>
<tr><td>SPI Flash</td><td>Fast</td><td>Yes</td></tr>
<tr><td><a href="/apps/pic/">PIC24H/dsPIC33F</a></td><td>Yes</td><td>Yes</td></tr>
</table>


<h3>Coming Soon</h3>

<table border="1">
<tr><th>Feature</th><th>Comment</th></tr>
<tr><td>MSP430X2 Support</td><td></td></tr>
<tr><td>Chipcon Noise Resiliance</td><td></td></tr>
<tr><td>GUI Client</td><td></td></tr>
</table>;"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Status</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Status</h1>

<h3>Compatibility</h3>

<table border="1">
<tr><th>Chip</th><th>Read</th><th>Flash</th></tr>
<tr><td>MSP430F1xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F2xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F4xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F5xx</td><td>Fast</td><td>No</td></tr>
<tr><td>Atmel AVR ISP</td><td>Yes</td><td>No</td></tr>
<tr><td>Chipcon 8051</td><td>Slow</td><td>Yes</td></tr>
<tr><td>SPI Flash</td><td>Fast</td><td>Yes</td></tr>
<tr><td><a href="/apps/pic/">PIC24H/dsPIC33F</a></td><td>Yes</td><td>Yes</td></tr>
</table>


<h3>Coming Soon</h3>

<table border="1">
<tr><th>Feature</th><th>Comment</th></tr>
<tr><td>MSP430X2 Support</td><td></td></tr>
<tr><td>Chipcon Noise Resiliance</td><td></td></tr>
<tr><td>GUI Client</td><td></td></tr>
</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"(<h1>Status</h1>

<h3>Compatibility</h3>

<table border="1">
<tr><th>Chip</th><th>Read</th><th>Flash</th></tr>
<tr><td>MSP430F1xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F2xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F4xx</td><td>Fast</td><td>Yes</td></tr>
<tr><td>MSP430F5xx</td><td>Fast</td><td>No</td></tr>
<tr><td>Atmel AVR ISP</td><td>Yes</td><td>No</td></tr>
<tr><td>Chipcon 8051</td><td>Slow</td><td>Yes</td></tr>
<tr><td>SPI Flash</td><td>Fast</td><td>Yes</td></tr>
<tr><td><a href="/apps/pic/">PIC24H/dsPIC33F</a></td><td>Yes</td><td>Yes</td></tr>
</table>


<h3>Coming Soon</h3>

<table border="1">
<tr><th>Feature</th><th>Comment</th></tr>
<tr><td>MSP430X2 Support</td><td></td></tr>
<tr><td>Chipcon Noise Resiliance</td><td></td></tr>
<tr><td>GUI Client</td><td></td></tr>
</table>"/clients/goodfetccspi/{;{	;"<<h1>goodfet.ccspi</h1>

<p></p>

<h2>Client</h2>

<p><pre>goodfet.ccspi
Usage: goodfet.ccspi verb [objects]

goodfet.ccspi sniff
</pre></p>

<h2>Pinout</h2>

<p>
  <table border="1">
    <tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
    <tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
    <tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
    <tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
    <tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
    <tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
    <tr><td></td>	<td>11</td><td>12</td>	<td>    </td></tr>
    <tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
  </table>
</p>


<h2>Notes</h2>
<p>This client is still very young.  Expect some bugs and
oddities.</p>;"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.ccspi</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.ccspi</h1>

<p></p>

<h2>Client</h2>

<p><pre>goodfet.ccspi
Usage: goodfet.ccspi verb [objects]

goodfet.ccspi sniff
</pre></p>

<h2>Pinout</h2>

<p>
  <table border="1">
    <tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
    <tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
    <tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
    <tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
    <tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
    <tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
    <tr><td></td>	<td>11</td><td>12</td>	<td>    </td></tr>
    <tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
  </table>
</p>


<h2>Notes</h2>
<p>This client is still very young.  Expect some bugs and
oddities.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"<<h1>goodfet.ccspi</h1>

<p></p>

<h2>Client</h2>

<p><pre>goodfet.ccspi
Usage: goodfet.ccspi verb [objects]

goodfet.ccspi sniff
</pre></p>

<h2>Pinout</h2>

<p>
  <table border="1">
    <tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
    <tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
    <tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
    <tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
    <tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
    <tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
    <tr><td></td>	<td>11</td><td>12</td>	<td>    </td></tr>
    <tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
  </table>
</p>


<h2>Notes</h2>
<p>This client is still very young.  Expect some bugs and
oddities.</p>"/clients/goodfetcc/{;{	;"Á<h1>goodfet.cc</h1>

<p></p>

<h2>Client</h2>

<p><pre>goodfet.cc | sed 's,/usr/local/bin/,,'
Usage: goodfet.cc verb [objects]

goodfet.cc erase
goodfet.cc flash $foo.hex
goodfet.cc test
goodfet.cc term
goodfet.cc info
goodfet.cc infotest
goodfet.cc halt
goodfet.cc regs
goodfet.cc dumpcode $foo.hex [0x$start 0x$stop]
goodfet.cc dumpdata $foo.hex [0x$start 0x$stop]
goodfet.cc writedata $foo.hex [0x$start 0x$stop]
goodfet.cc verify $foo.hex [0x$start 0x$stop]
goodfet.cc peekdata 0x$start [0x$stop]
goodfet.cc pokedata 0x$adr 0x$val
goodfet.cc peek 0x$iram
goodfet.cc poke 0x$iram 0x$val
goodfet.cc peekcode 0x$start [0x$stop]


goodfet.cc rssi [freq]
    Graphs signal strength on [freq] Hz.
goodfet.cc carrier [freq]
    Holds a carrier on [freq] Hz.
goodfet.cc reflex [freq]
    Jams on [freq] Hz.
goodfet.cc sniffsimpliciti [us|eu|lf]
    Sniffs SimpliciTI packets.
goodfet.cc sniffdash7 [lf]
    Sniffs Dash7. (untested)
goodfet.cc snifficlicker [us]
    Sniffs iClicker.


goodfet.cc simpliciti [us|eu|lf]
    Simpliciti access point for Chronos watch.
goodfet.cc iclicker [us|eu|lf]
    Sniffs iClicker packets as ASCII.
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>DD/P2_1</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td></td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>RST</td>	<td>5</td><td>6</td>	<td></td></tr>
		<tr><td>DC/P2_2</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td><td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>

<h2>SmartRF Studio Integration</h2>

<p>At least temporarily, many features of the GoodFET's Chipcon client
depend upon an installation
of <a href="http://focus.ti.com/docs/toolsw/folders/print/smartrftm-studio.html">Smart
RF Studio</a> being found at /opt/smartrf7.  XML files from this
installation are used to auto-configure register names for the CC1110
and other 8051-based devices.</p>

<h2>Screenshots</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/5242553766/" title="Chipcon Carrier by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5162/5242553766_649ba3ea64.jpg" width="500" height="375" alt="Chipcon Carrier" /></a>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5247787940/" title="GoodFET Simpliciti Sniffing! by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5164/5247787940_daca7e2506.jpg" width="500" height="182" alt="GoodFET Simpliciti Sniffing!" /></a></p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5247268140/" title="GoodFET CC1110 RSSI Graph by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5245/5247268140_b1f831f59f.jpg" width="257" height="500" alt="GoodFET CC1110 RSSI Graph" /></a></p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5300424980/" title="GoodFET iClicker Sniffing by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5282/5300424980_9d8436f955.jpg" width="500" height="346" alt="GoodFET iClicker Sniffing" /></a></p>

<h2>Notes</h2>
<p>No notes for this client.</p>;" <!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.cc</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.cc</h1>

<p></p>

<h2>Client</h2>

<p><pre>goodfet.cc | sed 's,/usr/local/bin/,,'
Usage: goodfet.cc verb [objects]

goodfet.cc erase
goodfet.cc flash $foo.hex
goodfet.cc test
goodfet.cc term
goodfet.cc info
goodfet.cc infotest
goodfet.cc halt
goodfet.cc regs
goodfet.cc dumpcode $foo.hex [0x$start 0x$stop]
goodfet.cc dumpdata $foo.hex [0x$start 0x$stop]
goodfet.cc writedata $foo.hex [0x$start 0x$stop]
goodfet.cc verify $foo.hex [0x$start 0x$stop]
goodfet.cc peekdata 0x$start [0x$stop]
goodfet.cc pokedata 0x$adr 0x$val
goodfet.cc peek 0x$iram
goodfet.cc poke 0x$iram 0x$val
goodfet.cc peekcode 0x$start [0x$stop]


goodfet.cc rssi [freq]
    Graphs signal strength on [freq] Hz.
goodfet.cc carrier [freq]
    Holds a carrier on [freq] Hz.
goodfet.cc reflex [freq]
    Jams on [freq] Hz.
goodfet.cc sniffsimpliciti [us|eu|lf]
    Sniffs SimpliciTI packets.
goodfet.cc sniffdash7 [lf]
    Sniffs Dash7. (untested)
goodfet.cc snifficlicker [us]
    Sniffs iClicker.


goodfet.cc simpliciti [us|eu|lf]
    Simpliciti access point for Chronos watch.
goodfet.cc iclicker [us|eu|lf]
    Sniffs iClicker packets as ASCII.
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>DD/P2_1</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td></td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>RST</td>	<td>5</td><td>6</td>	<td></td></tr>
		<tr><td>DC/P2_2</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td><td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>

<h2>SmartRF Studio Integration</h2>

<p>At least temporarily, many features of the GoodFET's Chipcon client
depend upon an installation
of <a href="http://focus.ti.com/docs/toolsw/folders/print/smartrftm-studio.html">Smart
RF Studio</a> being found at /opt/smartrf7.  XML files from this
installation are used to auto-configure register names for the CC1110
and other 8051-based devices.</p>

<h2>Screenshots</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/5242553766/" title="Chipcon Carrier by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5162/5242553766_649ba3ea64.jpg" width="500" height="375" alt="Chipcon Carrier" /></a>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5247787940/" title="GoodFET Simpliciti Sniffing! by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5164/5247787940_daca7e2506.jpg" width="500" height="182" alt="GoodFET Simpliciti Sniffing!" /></a></p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5247268140/" title="GoodFET CC1110 RSSI Graph by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5245/5247268140_b1f831f59f.jpg" width="257" height="500" alt="GoodFET CC1110 RSSI Graph" /></a></p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5300424980/" title="GoodFET iClicker Sniffing by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5282/5300424980_9d8436f955.jpg" width="500" height="346" alt="GoodFET iClicker Sniffing" /></a></p>

<h2>Notes</h2>
<p>No notes for this client.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@¢;
"Á<h1>goodfet.cc</h1>

<p></p>

<h2>Client</h2>

<p><pre>goodfet.cc | sed 's,/usr/local/bin/,,'
Usage: goodfet.cc verb [objects]

goodfet.cc erase
goodfet.cc flash $foo.hex
goodfet.cc test
goodfet.cc term
goodfet.cc info
goodfet.cc infotest
goodfet.cc halt
goodfet.cc regs
goodfet.cc dumpcode $foo.hex [0x$start 0x$stop]
goodfet.cc dumpdata $foo.hex [0x$start 0x$stop]
goodfet.cc writedata $foo.hex [0x$start 0x$stop]
goodfet.cc verify $foo.hex [0x$start 0x$stop]
goodfet.cc peekdata 0x$start [0x$stop]
goodfet.cc pokedata 0x$adr 0x$val
goodfet.cc peek 0x$iram
goodfet.cc poke 0x$iram 0x$val
goodfet.cc peekcode 0x$start [0x$stop]


goodfet.cc rssi [freq]
    Graphs signal strength on [freq] Hz.
goodfet.cc carrier [freq]
    Holds a carrier on [freq] Hz.
goodfet.cc reflex [freq]
    Jams on [freq] Hz.
goodfet.cc sniffsimpliciti [us|eu|lf]
    Sniffs SimpliciTI packets.
goodfet.cc sniffdash7 [lf]
    Sniffs Dash7. (untested)
goodfet.cc snifficlicker [us]
    Sniffs iClicker.


goodfet.cc simpliciti [us|eu|lf]
    Simpliciti access point for Chronos watch.
goodfet.cc iclicker [us|eu|lf]
    Sniffs iClicker packets as ASCII.
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>DD/P2_1</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td></td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>RST</td>	<td>5</td><td>6</td>	<td></td></tr>
		<tr><td>DC/P2_2</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td><td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>

<h2>SmartRF Studio Integration</h2>

<p>At least temporarily, many features of the GoodFET's Chipcon client
depend upon an installation
of <a href="http://focus.ti.com/docs/toolsw/folders/print/smartrftm-studio.html">Smart
RF Studio</a> being found at /opt/smartrf7.  XML files from this
installation are used to auto-configure register names for the CC1110
and other 8051-based devices.</p>

<h2>Screenshots</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/5242553766/" title="Chipcon Carrier by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5162/5242553766_649ba3ea64.jpg" width="500" height="375" alt="Chipcon Carrier" /></a>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5247787940/" title="GoodFET Simpliciti Sniffing! by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5164/5247787940_daca7e2506.jpg" width="500" height="182" alt="GoodFET Simpliciti Sniffing!" /></a></p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5247268140/" title="GoodFET CC1110 RSSI Graph by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5245/5247268140_b1f831f59f.jpg" width="257" height="500" alt="GoodFET CC1110 RSSI Graph" /></a></p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/5300424980/" title="GoodFET iClicker Sniffing by Travis Goodspeed, on Flickr"><img src="http://farm6.static.flickr.com/5282/5300424980_9d8436f955.jpg" width="500" height="346" alt="GoodFET iClicker Sniffing" /></a></p>

<h2>Notes</h2>
<p>No notes for this client.</p>"/construction/{;{	;"-<h1>GoodFET Construction</h1>

<!--March 2010, jbest-->

<h3>Necessities</h3>

<p>Besides the components listed on the page that corresponds to your
particular PCB, there are a number of things you'll want to have on
hand before assembling a GoodFET.</p>

<table border="1">
<tr><td>Controlled output soldering station</td></tr>
<tr><td>Fine soldering iron tip</td></tr>
<tr><td>Water-soluble liquid flux</td></tr>
<tr><td>23 gauge solder</td></tr>
<tr><td>Brass sponge</td></tr>
<tr><td>Desoldering braid</td></tr>
<tr><td>Soldering iron tinner</td></tr>
<tr><td>Tweezers</td></tr>
<tr><td>Helping hands</td></tr>
<tr><td>ESD wristband</td></tr>
<tr><td>Sharp, fine knife of some sort</td></tr>
<tr><td>Masking tape</td></tr>
<tr><td>Multi-meter with an "LED Test" function</td></tr>
<tr><td>Isopropyl alcohol</td></tr>
<tr><td>Soft toothbrush</td></tr>
</table>

<p>This list isn't meant to be all-inclusive, nor are all of these
items necessarily required. This is simply a list of tools that will
help with assembling a GoodFET.</p>
 
<h3>Prepare the work area</h3>

<p>You'll want a nice, clutter-free work area.  You might want to
remove all of the surface mount components from their packaging and
put them in their own labeled bins for easy access.  The trash that
accumulates from the packaging will build up quickly as you work on
the board.  Make sure your soldering iron is in a spot where you won't
get it tangled up in anything or accidentally burn something.  Be sure
you have easy access to your flux, solder, brass sponge, desoldering
braid, tweezers, helping hands/magnifier, and soldering iron holder.
A little extra lighting goes a long way here, so grab an extra desk
lamp or work light if you have one.</p>

<h3>Prepare the tools and board</h3>

<p>Make sure the PCB you'll be working on is clean and free of oils
and dirt (from fingerprints, etc.).  99% isopropyl alcohol will
quickly take care of anything that will prevent a good contact between
the components and the board.  Heat up the soldering iron enough to
melt the solder, and make sure the tip is clean and tinned.  If this
is your first time surface mounting components, this is a good time to
become familiar with the methods you'll be using to solder the ICs to
the board.</p>

<h3>Practice</h3>

<p>Once the iron is hot, apply a small amount of flux to a PCB.  If
you don't have a spare PCB, the USB portion of the GoodFET PCB will
work.  Cut some desoldering braid (about 6'') and some solder from each
of their spools.  Heat up the flux (you will it burn) and apply some
solder directly to the PCB.  Never apply solder directly to the
soldering iron.  Remove the iron and the solder, then lay the
desoldering braid on top of the soldered area.  Gently press the tip
of the soldering iron over the area that you previously applied the
solder.  The desoldering braid will heat up (so watch your fingers),
and it will begin to melt the solder.  The desoldering braid will suck
up all but a small amount of the solder you applied to the board.</p>

<h3>Soldering the FT232R/FT232RL</h3>

<p>The ICs are probably the most intimidating components of the board,
but they are the easiest to solder.  Place the FT232RL on the board,
ensuring the small circle on the chip is in the same corner as the
small circle silk-screened on the board (the lower right when viewed
from the top with the USB portion pointing to the left).  With masking
tape, cover half of the IC so that the pins on one side are
visible. Align the pins that are still showing and tape the IC to the
board.  Now, cover the uncovered half with a second piece of masking
tape and uncover the first half.  Repeat this until you're sure that
all of the pins are aligned properly, but leave half of the IC taped
to the board.  You'll be moving the board around, so be sure it will
stay put.</p>

<p>Now, apply flux to the side you'll be soldering.  Run your iron
across the leads on the board once or twice to get the board hot, then
apply solder to the leads while running the iron across.  You don't
need a whole lot of solder, just enough to make a small contact
between the IC and the board.  Applying the solder should take less
than 5 seconds.  If you accidentally bridge some of the pins, don't
worry; we'll be applying desoldering braid to the entire side anyway
to ensure we haven't bridged anything.</p>

<p>Take the desoldering braid and lay it across the pins of the IC.
Gently pin the desoldering braid down with the soldering iron and rub
the pins with the desoldering braid.  You should be moving the
desoldering braid with the iron, so the portion of desoldering braid
that is in contact with the board remains hot.  You might need to use
different areas of the desoldering braid if one becomes saturated with
solder.  Continue rubbing the board with desoldering braid until the
pins are clean.  Check to see if any of the pins are bridged from
below.  If you see blobs of solder underneath the chip, you will have
to draw them out with your iron and repeat the desoldering process.
To draw out the solder, hold the board so that gravity will pull on
the solder as you heat the pins.</p>

<p>Once you've finished that side of the chip, remove the masking tape
holding the IC in place.  It takes very little solder to hold the chip
to the board; you don't have to worry about the chip moving around
without the tape.  Flux the other side, heat the pins, apply solder,
and then clean up with the desoldering braid.  You've just surface
mounted the first IC!  Repeat this process for each of the remaining
ICs.</p>

<h3>Soldering the components</h3>

<p>The 100 Ohm series resistors are probably the easiest components to
start with.  Place one on the board (they are non-directional, you
only need to worry about placing them so each side touches each solder
pad).  Apply a small amount of flux to the side you will solder first.
Like before, you will heat the place that you will apply solder to,
and then apply the solder.  The component might move around a little
as you apply the solder.  Using your tweezers or a small knife, move
the component back into place, applying heat to the solder with your
iron as necessary.  Once the part is properly aligned, solder the
other side of the component.</p>

<p>The LEDs are the toughest components to solder.  It is very
important to ensure that they are oriented correctly before you solder
them to the board. Some surface mount LEDs have indicators on them to
tell you the polarity, but some markings are rather vague. Use the
"LED Test" function of a multi-meter to determine the polarity of the
LED. Use the circuit diagram for the GoodFET you are soldering to
determine the correct orientation, and then solder the component
appropriately.</p>

<h3>Soldering the headers</h3>

<p>Back to through-hole soldering!  Break up your headers into two
rows of seven. If you have a connector that will accept these headers
(an old floppy drive cable will work), plug the headers into that
cable.  This will ensure the headers will be aligned properly against
each other.  Flip the board over and guide the rows of headers through
the board.  Apply a small amount of flux and solder one pin to the
board.  Flip the board back over and ensure the headers are
perpendicular to the board. If they are not, heat the pin that you
soldered and move the headers into place.  It is very difficult to
move the headers once you have soldered more than one pin!  Once the
headers are aligned properly, solder the rest of the pins to the
board.</p>

<h3>Add solder to the USB connector</h3>

<p>Finally, add a small amount of flux to the USB connector, and add
some solder to each of the four pads.  You're done soldering your
GoodFET!</p>

<h3>Clean the board</h3>

<p>Use the manufacturer's recommended solvent for the flux you used on
the board.  A soft toothbrush can help loosen any flux that's hard to
remove.</p>

<h3>Use the board</h3>

<p>Once dry, your GoodFET is ready to use!</p>;"2<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Construction</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET Construction</h1>

<!--March 2010, jbest-->

<h3>Necessities</h3>

<p>Besides the components listed on the page that corresponds to your
particular PCB, there are a number of things you'll want to have on
hand before assembling a GoodFET.</p>

<table border="1">
<tr><td>Controlled output soldering station</td></tr>
<tr><td>Fine soldering iron tip</td></tr>
<tr><td>Water-soluble liquid flux</td></tr>
<tr><td>23 gauge solder</td></tr>
<tr><td>Brass sponge</td></tr>
<tr><td>Desoldering braid</td></tr>
<tr><td>Soldering iron tinner</td></tr>
<tr><td>Tweezers</td></tr>
<tr><td>Helping hands</td></tr>
<tr><td>ESD wristband</td></tr>
<tr><td>Sharp, fine knife of some sort</td></tr>
<tr><td>Masking tape</td></tr>
<tr><td>Multi-meter with an "LED Test" function</td></tr>
<tr><td>Isopropyl alcohol</td></tr>
<tr><td>Soft toothbrush</td></tr>
</table>

<p>This list isn't meant to be all-inclusive, nor are all of these
items necessarily required. This is simply a list of tools that will
help with assembling a GoodFET.</p>
 
<h3>Prepare the work area</h3>

<p>You'll want a nice, clutter-free work area.  You might want to
remove all of the surface mount components from their packaging and
put them in their own labeled bins for easy access.  The trash that
accumulates from the packaging will build up quickly as you work on
the board.  Make sure your soldering iron is in a spot where you won't
get it tangled up in anything or accidentally burn something.  Be sure
you have easy access to your flux, solder, brass sponge, desoldering
braid, tweezers, helping hands/magnifier, and soldering iron holder.
A little extra lighting goes a long way here, so grab an extra desk
lamp or work light if you have one.</p>

<h3>Prepare the tools and board</h3>

<p>Make sure the PCB you'll be working on is clean and free of oils
and dirt (from fingerprints, etc.).  99% isopropyl alcohol will
quickly take care of anything that will prevent a good contact between
the components and the board.  Heat up the soldering iron enough to
melt the solder, and make sure the tip is clean and tinned.  If this
is your first time surface mounting components, this is a good time to
become familiar with the methods you'll be using to solder the ICs to
the board.</p>

<h3>Practice</h3>

<p>Once the iron is hot, apply a small amount of flux to a PCB.  If
you don't have a spare PCB, the USB portion of the GoodFET PCB will
work.  Cut some desoldering braid (about 6'') and some solder from each
of their spools.  Heat up the flux (you will it burn) and apply some
solder directly to the PCB.  Never apply solder directly to the
soldering iron.  Remove the iron and the solder, then lay the
desoldering braid on top of the soldered area.  Gently press the tip
of the soldering iron over the area that you previously applied the
solder.  The desoldering braid will heat up (so watch your fingers),
and it will begin to melt the solder.  The desoldering braid will suck
up all but a small amount of the solder you applied to the board.</p>

<h3>Soldering the FT232R/FT232RL</h3>

<p>The ICs are probably the most intimidating components of the board,
but they are the easiest to solder.  Place the FT232RL on the board,
ensuring the small circle on the chip is in the same corner as the
small circle silk-screened on the board (the lower right when viewed
from the top with the USB portion pointing to the left).  With masking
tape, cover half of the IC so that the pins on one side are
visible. Align the pins that are still showing and tape the IC to the
board.  Now, cover the uncovered half with a second piece of masking
tape and uncover the first half.  Repeat this until you're sure that
all of the pins are aligned properly, but leave half of the IC taped
to the board.  You'll be moving the board around, so be sure it will
stay put.</p>

<p>Now, apply flux to the side you'll be soldering.  Run your iron
across the leads on the board once or twice to get the board hot, then
apply solder to the leads while running the iron across.  You don't
need a whole lot of solder, just enough to make a small contact
between the IC and the board.  Applying the solder should take less
than 5 seconds.  If you accidentally bridge some of the pins, don't
worry; we'll be applying desoldering braid to the entire side anyway
to ensure we haven't bridged anything.</p>

<p>Take the desoldering braid and lay it across the pins of the IC.
Gently pin the desoldering braid down with the soldering iron and rub
the pins with the desoldering braid.  You should be moving the
desoldering braid with the iron, so the portion of desoldering braid
that is in contact with the board remains hot.  You might need to use
different areas of the desoldering braid if one becomes saturated with
solder.  Continue rubbing the board with desoldering braid until the
pins are clean.  Check to see if any of the pins are bridged from
below.  If you see blobs of solder underneath the chip, you will have
to draw them out with your iron and repeat the desoldering process.
To draw out the solder, hold the board so that gravity will pull on
the solder as you heat the pins.</p>

<p>Once you've finished that side of the chip, remove the masking tape
holding the IC in place.  It takes very little solder to hold the chip
to the board; you don't have to worry about the chip moving around
without the tape.  Flux the other side, heat the pins, apply solder,
and then clean up with the desoldering braid.  You've just surface
mounted the first IC!  Repeat this process for each of the remaining
ICs.</p>

<h3>Soldering the components</h3>

<p>The 100 Ohm series resistors are probably the easiest components to
start with.  Place one on the board (they are non-directional, you
only need to worry about placing them so each side touches each solder
pad).  Apply a small amount of flux to the side you will solder first.
Like before, you will heat the place that you will apply solder to,
and then apply the solder.  The component might move around a little
as you apply the solder.  Using your tweezers or a small knife, move
the component back into place, applying heat to the solder with your
iron as necessary.  Once the part is properly aligned, solder the
other side of the component.</p>

<p>The LEDs are the toughest components to solder.  It is very
important to ensure that they are oriented correctly before you solder
them to the board. Some surface mount LEDs have indicators on them to
tell you the polarity, but some markings are rather vague. Use the
"LED Test" function of a multi-meter to determine the polarity of the
LED. Use the circuit diagram for the GoodFET you are soldering to
determine the correct orientation, and then solder the component
appropriately.</p>

<h3>Soldering the headers</h3>

<p>Back to through-hole soldering!  Break up your headers into two
rows of seven. If you have a connector that will accept these headers
(an old floppy drive cable will work), plug the headers into that
cable.  This will ensure the headers will be aligned properly against
each other.  Flip the board over and guide the rows of headers through
the board.  Apply a small amount of flux and solder one pin to the
board.  Flip the board back over and ensure the headers are
perpendicular to the board. If they are not, heat the pin that you
soldered and move the headers into place.  It is very difficult to
move the headers once you have soldered more than one pin!  Once the
headers are aligned properly, solder the rest of the pins to the
board.</p>

<h3>Add solder to the USB connector</h3>

<p>Finally, add a small amount of flux to the USB connector, and add
some solder to each of the four pads.  You're done soldering your
GoodFET!</p>

<h3>Clean the board</h3>

<p>Use the manufacturer's recommended solvent for the flux you used on
the board.  A soft toothbrush can help loosen any flux that's hard to
remove.</p>

<h3>Use the board</h3>

<p>Once dry, your GoodFET is ready to use!</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@¨;
"-<h1>GoodFET Construction</h1>

<!--March 2010, jbest-->

<h3>Necessities</h3>

<p>Besides the components listed on the page that corresponds to your
particular PCB, there are a number of things you'll want to have on
hand before assembling a GoodFET.</p>

<table border="1">
<tr><td>Controlled output soldering station</td></tr>
<tr><td>Fine soldering iron tip</td></tr>
<tr><td>Water-soluble liquid flux</td></tr>
<tr><td>23 gauge solder</td></tr>
<tr><td>Brass sponge</td></tr>
<tr><td>Desoldering braid</td></tr>
<tr><td>Soldering iron tinner</td></tr>
<tr><td>Tweezers</td></tr>
<tr><td>Helping hands</td></tr>
<tr><td>ESD wristband</td></tr>
<tr><td>Sharp, fine knife of some sort</td></tr>
<tr><td>Masking tape</td></tr>
<tr><td>Multi-meter with an "LED Test" function</td></tr>
<tr><td>Isopropyl alcohol</td></tr>
<tr><td>Soft toothbrush</td></tr>
</table>

<p>This list isn't meant to be all-inclusive, nor are all of these
items necessarily required. This is simply a list of tools that will
help with assembling a GoodFET.</p>
 
<h3>Prepare the work area</h3>

<p>You'll want a nice, clutter-free work area.  You might want to
remove all of the surface mount components from their packaging and
put them in their own labeled bins for easy access.  The trash that
accumulates from the packaging will build up quickly as you work on
the board.  Make sure your soldering iron is in a spot where you won't
get it tangled up in anything or accidentally burn something.  Be sure
you have easy access to your flux, solder, brass sponge, desoldering
braid, tweezers, helping hands/magnifier, and soldering iron holder.
A little extra lighting goes a long way here, so grab an extra desk
lamp or work light if you have one.</p>

<h3>Prepare the tools and board</h3>

<p>Make sure the PCB you'll be working on is clean and free of oils
and dirt (from fingerprints, etc.).  99% isopropyl alcohol will
quickly take care of anything that will prevent a good contact between
the components and the board.  Heat up the soldering iron enough to
melt the solder, and make sure the tip is clean and tinned.  If this
is your first time surface mounting components, this is a good time to
become familiar with the methods you'll be using to solder the ICs to
the board.</p>

<h3>Practice</h3>

<p>Once the iron is hot, apply a small amount of flux to a PCB.  If
you don't have a spare PCB, the USB portion of the GoodFET PCB will
work.  Cut some desoldering braid (about 6'') and some solder from each
of their spools.  Heat up the flux (you will it burn) and apply some
solder directly to the PCB.  Never apply solder directly to the
soldering iron.  Remove the iron and the solder, then lay the
desoldering braid on top of the soldered area.  Gently press the tip
of the soldering iron over the area that you previously applied the
solder.  The desoldering braid will heat up (so watch your fingers),
and it will begin to melt the solder.  The desoldering braid will suck
up all but a small amount of the solder you applied to the board.</p>

<h3>Soldering the FT232R/FT232RL</h3>

<p>The ICs are probably the most intimidating components of the board,
but they are the easiest to solder.  Place the FT232RL on the board,
ensuring the small circle on the chip is in the same corner as the
small circle silk-screened on the board (the lower right when viewed
from the top with the USB portion pointing to the left).  With masking
tape, cover half of the IC so that the pins on one side are
visible. Align the pins that are still showing and tape the IC to the
board.  Now, cover the uncovered half with a second piece of masking
tape and uncover the first half.  Repeat this until you're sure that
all of the pins are aligned properly, but leave half of the IC taped
to the board.  You'll be moving the board around, so be sure it will
stay put.</p>

<p>Now, apply flux to the side you'll be soldering.  Run your iron
across the leads on the board once or twice to get the board hot, then
apply solder to the leads while running the iron across.  You don't
need a whole lot of solder, just enough to make a small contact
between the IC and the board.  Applying the solder should take less
than 5 seconds.  If you accidentally bridge some of the pins, don't
worry; we'll be applying desoldering braid to the entire side anyway
to ensure we haven't bridged anything.</p>

<p>Take the desoldering braid and lay it across the pins of the IC.
Gently pin the desoldering braid down with the soldering iron and rub
the pins with the desoldering braid.  You should be moving the
desoldering braid with the iron, so the portion of desoldering braid
that is in contact with the board remains hot.  You might need to use
different areas of the desoldering braid if one becomes saturated with
solder.  Continue rubbing the board with desoldering braid until the
pins are clean.  Check to see if any of the pins are bridged from
below.  If you see blobs of solder underneath the chip, you will have
to draw them out with your iron and repeat the desoldering process.
To draw out the solder, hold the board so that gravity will pull on
the solder as you heat the pins.</p>

<p>Once you've finished that side of the chip, remove the masking tape
holding the IC in place.  It takes very little solder to hold the chip
to the board; you don't have to worry about the chip moving around
without the tape.  Flux the other side, heat the pins, apply solder,
and then clean up with the desoldering braid.  You've just surface
mounted the first IC!  Repeat this process for each of the remaining
ICs.</p>

<h3>Soldering the components</h3>

<p>The 100 Ohm series resistors are probably the easiest components to
start with.  Place one on the board (they are non-directional, you
only need to worry about placing them so each side touches each solder
pad).  Apply a small amount of flux to the side you will solder first.
Like before, you will heat the place that you will apply solder to,
and then apply the solder.  The component might move around a little
as you apply the solder.  Using your tweezers or a small knife, move
the component back into place, applying heat to the solder with your
iron as necessary.  Once the part is properly aligned, solder the
other side of the component.</p>

<p>The LEDs are the toughest components to solder.  It is very
important to ensure that they are oriented correctly before you solder
them to the board. Some surface mount LEDs have indicators on them to
tell you the polarity, but some markings are rather vague. Use the
"LED Test" function of a multi-meter to determine the polarity of the
LED. Use the circuit diagram for the GoodFET you are soldering to
determine the correct orientation, and then solder the component
appropriately.</p>

<h3>Soldering the headers</h3>

<p>Back to through-hole soldering!  Break up your headers into two
rows of seven. If you have a connector that will accept these headers
(an old floppy drive cable will work), plug the headers into that
cable.  This will ensure the headers will be aligned properly against
each other.  Flip the board over and guide the rows of headers through
the board.  Apply a small amount of flux and solder one pin to the
board.  Flip the board back over and ensure the headers are
perpendicular to the board. If they are not, heat the pin that you
soldered and move the headers into place.  It is very difficult to
move the headers once you have soldered more than one pin!  Once the
headers are aligned properly, solder the rest of the pins to the
board.</p>

<h3>Add solder to the USB connector</h3>

<p>Finally, add a small amount of flux to the USB connector, and add
some solder to each of the four pads.  You're done soldering your
GoodFET!</p>

<h3>Clean the board</h3>

<p>Use the manufacturer's recommended solvent for the flux you used on
the board.  A soft toothbrush can help loosen any flux that's hard to
remove.</p>

<h3>Use the board</h3>

<p>Once dry, your GoodFET is ready to use!</p>"/hardware/goodfet40/{;{	;"Ë<h1>GoodFET40</h1>

<p>The GoodFET40 is the twelfth hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/goodfet21/">GoodFET21</a>
and <a href="/hardware/goodfet31/">GoodFET31</a>.  It retains the small
BOM of the GoodFET31 while using the more powerful microcontroller of the
GoodFET21.  The PCB USB connector has been dropped in favor of a Mini USB
receptable, allowing PCBs to be manufactured on very thin boards, suitable
for embedding within the cases of other electronics.
</p>

<p><b>N.B. This version has been discontinued due to the boards being
insufficiently thick to handle the mechanical stress of the 0.1&quot;
header.  Use the <a href="/hardware/goodfet41/">GoodFET41</a>
instead.</b></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet40 of the subversion repository, or as
<a href="/releases/goodfet40.zip">goodfet40.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2417, 2418,
or 2419 chip.  LEDs may be of any color, but a smaller series resistor
should be used in such a case.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
</table>


<h2>Construction</h2>

<i>Coming soon.</i>

<h2>Errata</h2>

<p>The USB positioning holes do not match many brands of connector.
If the part doesn't fit, break the tabs from the connector and rely
upon the solder points for proper positioning.</p>

<p>The board is too thin for use without a supporting case, causing
some boards to flex and become damaged.  For this reason,
the <a href="/hardware/goodfet41/">GoodFET41</a> uses a thicker PCB.</p>;"%<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET40</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET40</h1>

<p>The GoodFET40 is the twelfth hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/goodfet21/">GoodFET21</a>
and <a href="/hardware/goodfet31/">GoodFET31</a>.  It retains the small
BOM of the GoodFET31 while using the more powerful microcontroller of the
GoodFET21.  The PCB USB connector has been dropped in favor of a Mini USB
receptable, allowing PCBs to be manufactured on very thin boards, suitable
for embedding within the cases of other electronics.
</p>

<p><b>N.B. This version has been discontinued due to the boards being
insufficiently thick to handle the mechanical stress of the 0.1&quot;
header.  Use the <a href="/hardware/goodfet41/">GoodFET41</a>
instead.</b></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet40 of the subversion repository, or as
<a href="/releases/goodfet40.zip">goodfet40.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2417, 2418,
or 2419 chip.  LEDs may be of any color, but a smaller series resistor
should be used in such a case.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
</table>


<h2>Construction</h2>

<i>Coming soon.</i>

<h2>Errata</h2>

<p>The USB positioning holes do not match many brands of connector.
If the part doesn't fit, break the tabs from the connector and rely
upon the solder points for proper positioning.</p>

<p>The board is too thin for use without a supporting case, causing
some boards to flex and become damaged.  For this reason,
the <a href="/hardware/goodfet41/">GoodFET41</a> uses a thicker PCB.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@®;
"Ë<h1>GoodFET40</h1>

<p>The GoodFET40 is the twelfth hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/goodfet21/">GoodFET21</a>
and <a href="/hardware/goodfet31/">GoodFET31</a>.  It retains the small
BOM of the GoodFET31 while using the more powerful microcontroller of the
GoodFET21.  The PCB USB connector has been dropped in favor of a Mini USB
receptable, allowing PCBs to be manufactured on very thin boards, suitable
for embedding within the cases of other electronics.
</p>

<p><b>N.B. This version has been discontinued due to the boards being
insufficiently thick to handle the mechanical stress of the 0.1&quot;
header.  Use the <a href="/hardware/goodfet41/">GoodFET41</a>
instead.</b></p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet40 of the subversion repository, or as
<a href="/releases/goodfet40.zip">goodfet40.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F2618TPM may be replaced with a 2617, 2619, 2417, 2418,
or 2419 chip.  LEDs may be of any color, but a smaller series resistor
should be used in such a case.</p>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Mini Receptacle UX60-MB-5ST</td></tr>
</table>


<h2>Construction</h2>

<i>Coming soon.</i>

<h2>Errata</h2>

<p>The USB positioning holes do not match many brands of connector.
If the part doesn't fit, break the tabs from the connector and rely
upon the solder points for proper positioning.</p>

<p>The board is too thin for use without a supporting case, causing
some boards to flex and become damaged.  For this reason,
the <a href="/hardware/goodfet41/">GoodFET41</a> uses a thicker PCB.</p>"/hardware/goodfet30/{;{	;"L<h1>GoodFET30</h1>

<p>The GoodFET30 is the fifth hardware revision of the GoodFET.
It aims to reduce BOM cost and board surface area while at the
same time increasing performance.  All crystals have been removed
in favor of internally-calibrated oscillators, and external
pull-up resistors have been dropped in favor of internal
pulling resistors.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet30 of the subversion repository, or as
<a href="/releases/goodfet30.zip">goodfet30.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.

<a href="http://www.flickr.com/photos/travisgoodspeed/3975358550/"
title="GoodFET30 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2469/3975358550_4f009db96f.jpg"
width="500" height="334" alt="GoodFET30" /></a>
</p>

<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>;"¦<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET30</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET30</h1>

<p>The GoodFET30 is the fifth hardware revision of the GoodFET.
It aims to reduce BOM cost and board surface area while at the
same time increasing performance.  All crystals have been removed
in favor of internally-calibrated oscillators, and external
pull-up resistors have been dropped in favor of internal
pulling resistors.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet30 of the subversion repository, or as
<a href="/releases/goodfet30.zip">goodfet30.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.

<a href="http://www.flickr.com/photos/travisgoodspeed/3975358550/"
title="GoodFET30 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2469/3975358550_4f009db96f.jpg"
width="500" height="334" alt="GoodFET30" /></a>
</p>

<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@´;
"L<h1>GoodFET30</h1>

<p>The GoodFET30 is the fifth hardware revision of the GoodFET.
It aims to reduce BOM cost and board surface area while at the
same time increasing performance.  All crystals have been removed
in favor of internally-calibrated oscillators, and external
pull-up resistors have been dropped in favor of internal
pulling resistors.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet30 of the subversion repository, or as
<a href="/releases/goodfet30.zip">goodfet30.zip</a>.</p>

<h2>Bill of Materials</h2>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td>FT232RL</td></tr>
<tr><td>1</td><td>TSSOP38</td><td>MSP430F2274</td></tr>
<tr><td>2</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>6</td><td>0603</td><td>100R JTAG Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
<tr><td>1</td><td></td><td>8 pin header (optional)</td></tr>
<tr><td>1</td><td></td><td>2x7 pin header</td></tr>
</table>

<h2>Construction</h2>

<p>Construct as described on the following Flickr image's annotations.

<a href="http://www.flickr.com/photos/travisgoodspeed/3975358550/"
title="GoodFET30 by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2469/3975358550_4f009db96f.jpg"
width="500" height="334" alt="GoodFET30" /></a>
</p>

<h2>Errata</h2>

<p>Email travis at radiantmachines.com if you should
find any.</p>"/hardware/goodfet50/{;{	;"
<h1>GoodFET50</h1>

<p>The GoodFET50 is the fourteenth hardware revision of the GoodFET,
roughly owing its heritage to the
<a href="/hardware/goodfet40/">GoodFET40</a>.  However, it is a completely new
design; about the only thing that stayed was the 14-pin connector and 3 LEDs.
The FT232R is gone, and the MSP430F2618 has ben replaced by an MS430F5510.
Further, the mini-USB connector has been replaced by micro USB (I have a ton of
those cables lying around, but can never find mini-USB). The end result is the
cheapest board yet, at roughly $4 of components total, and also the most
flexible (the USB interface is on the MSP430, allowing us to interface with
Android 3.1 devices with host mode)</p>

<p><b>Note that while this is probably the final hardware rev, the
software has not yet been ported. Working software should be ready by
early October 2011.  Boards will not be stocked until then.</b></p>

<h2>CAD Files</h2>

<p>
<p>gEDA/PCB (not Eagle) files for the design can be found in
/branches/goodfet50 of the subversion repository, or as
<a href="/releases/goodfet50.zip">goodfet50.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F5510PT may be replaced with a 5508 or 5509.</p>

<p>Resistor values can be approximated.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>QFP48</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f5510.html">MSP430F5510PT</a></td></tr>
<tr><td>1</td><td>HC49</td><td>8MHz 18pF crystal (e.g., ATS080B)</td></tr>
<tr><td>4</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>2</td><td>0603</td><td>22pF Load Capacitors</td></tr>
<tr><td>1</td><td>0603</td><td>1k&ohm; pull-up resistor</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>1</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Micro Receptacle</td></tr>
<tr><td>1</td><td></td><td>2x14 pin 0.1&quot; Male Header</td></tr>
<tr><td>1</td><td></td><td>1x2 pin 0.1&quot; Male Header (optional)</td></tr>
</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/thequux/5885215563/" title="goodfet50 Construction by The Quux, on Flickr"><img src="http://farm7.static.flickr.com/6009/5885215563_ce17905b4c_b.jpg" width="1024" height="618" alt="goodfet50 Construction"></a>

<h2>Errata</h2>

<p>In the event that the wire to pin 14 breaks when separating boards and you need pin 14, there's a nearby via to which a separate wire can be soldered.</p>;"ì<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET50</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET50</h1>

<p>The GoodFET50 is the fourteenth hardware revision of the GoodFET,
roughly owing its heritage to the
<a href="/hardware/goodfet40/">GoodFET40</a>.  However, it is a completely new
design; about the only thing that stayed was the 14-pin connector and 3 LEDs.
The FT232R is gone, and the MSP430F2618 has ben replaced by an MS430F5510.
Further, the mini-USB connector has been replaced by micro USB (I have a ton of
those cables lying around, but can never find mini-USB). The end result is the
cheapest board yet, at roughly $4 of components total, and also the most
flexible (the USB interface is on the MSP430, allowing us to interface with
Android 3.1 devices with host mode)</p>

<p><b>Note that while this is probably the final hardware rev, the
software has not yet been ported. Working software should be ready by
early October 2011.  Boards will not be stocked until then.</b></p>

<h2>CAD Files</h2>

<p>
<p>gEDA/PCB (not Eagle) files for the design can be found in
/branches/goodfet50 of the subversion repository, or as
<a href="/releases/goodfet50.zip">goodfet50.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F5510PT may be replaced with a 5508 or 5509.</p>

<p>Resistor values can be approximated.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>QFP48</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f5510.html">MSP430F5510PT</a></td></tr>
<tr><td>1</td><td>HC49</td><td>8MHz 18pF crystal (e.g., ATS080B)</td></tr>
<tr><td>4</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>2</td><td>0603</td><td>22pF Load Capacitors</td></tr>
<tr><td>1</td><td>0603</td><td>1k&ohm; pull-up resistor</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>1</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Micro Receptacle</td></tr>
<tr><td>1</td><td></td><td>2x14 pin 0.1&quot; Male Header</td></tr>
<tr><td>1</td><td></td><td>1x2 pin 0.1&quot; Male Header (optional)</td></tr>
</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/thequux/5885215563/" title="goodfet50 Construction by The Quux, on Flickr"><img src="http://farm7.static.flickr.com/6009/5885215563_ce17905b4c_b.jpg" width="1024" height="618" alt="goodfet50 Construction"></a>

<h2>Errata</h2>

<p>In the event that the wire to pin 14 breaks when separating boards and you need pin 14, there's a nearby via to which a separate wire can be soldered.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@º;
"
<h1>GoodFET50</h1>

<p>The GoodFET50 is the fourteenth hardware revision of the GoodFET,
roughly owing its heritage to the
<a href="/hardware/goodfet40/">GoodFET40</a>.  However, it is a completely new
design; about the only thing that stayed was the 14-pin connector and 3 LEDs.
The FT232R is gone, and the MSP430F2618 has ben replaced by an MS430F5510.
Further, the mini-USB connector has been replaced by micro USB (I have a ton of
those cables lying around, but can never find mini-USB). The end result is the
cheapest board yet, at roughly $4 of components total, and also the most
flexible (the USB interface is on the MSP430, allowing us to interface with
Android 3.1 devices with host mode)</p>

<p><b>Note that while this is probably the final hardware rev, the
software has not yet been ported. Working software should be ready by
early October 2011.  Boards will not be stocked until then.</b></p>

<h2>CAD Files</h2>

<p>
<p>gEDA/PCB (not Eagle) files for the design can be found in
/branches/goodfet50 of the subversion repository, or as
<a href="/releases/goodfet50.zip">goodfet50.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The MSP430F5510PT may be replaced with a 5508 or 5509.</p>

<p>Resistor values can be approximated.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>QFP48</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f5510.html">MSP430F5510PT</a></td></tr>
<tr><td>1</td><td>HC49</td><td>8MHz 18pF crystal (e.g., ATS080B)</td></tr>
<tr><td>4</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>2</td><td>0603</td><td>22pF Load Capacitors</td></tr>
<tr><td>1</td><td>0603</td><td>1k&ohm; pull-up resistor</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>1</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td></td><td>USB Micro Receptacle</td></tr>
<tr><td>1</td><td></td><td>2x14 pin 0.1&quot; Male Header</td></tr>
<tr><td>1</td><td></td><td>1x2 pin 0.1&quot; Male Header (optional)</td></tr>
</table>


<h2>Construction</h2>

<p>Please the components as shown the comments to this Flickr image.
As this is a surface-mount design, be sure that you are familiar with
such techniques or have assistance before beginning assembly.</p>

<a href="http://www.flickr.com/photos/thequux/5885215563/" title="goodfet50 Construction by The Quux, on Flickr"><img src="http://farm7.static.flickr.com/6009/5885215563_ce17905b4c_b.jpg" width="1024" height="618" alt="goodfet50 Construction"></a>

<h2>Errata</h2>

<p>In the event that the wire to pin 14 breaks when separating boards and you need pin 14, there's a nearby via to which a separate wire can be soldered.</p>"/apps/ccspi/{;{	;"h<h1>Chipcon SPI Application</h1>

<p>This application allows for the use of SPI radios in the Chipcon
family, such as the CC2420.
</p>


<p>At present, this port is only being used in
the <a href="/hardware/telosb">Telos B</a> port of the GoodFET
firmware.  As such, no pinout is available, but the SPI pinout below
ought to be all but identical.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>

<h2>Clients</h2>

<p><a href="/clients/goodfet.ccspi/">chipcon.ccspi</a> is an actively
maintained client application.</p>

<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
Chipcon application to properly set the I/O pin directions.
</p>

<p>The Chipcon protocol is similar to SPI, but with additional
signal lines to indicate the availability of a packet.  Data
is buffered within the radio, eliminating the need to catch
it byte-wise.</p>


<h2>Verbs</h2>

<p>Verbs 0x80 to 0x8F are radio primitives, while verbs 0x90 to
0x9F are used for more complicated macro commands.  Higher than that
are a few special functions that don't exist on other platforms.  The
low commands are similar to the <a href="/apps/nrf/">Nordic RF</a>
application.
</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x80</td><td>RX</td><td>Receive</td></tr>
<tr><td>0x81</td><td>TX</td><td>Transmit</td></tr>
<tr><td>0x82</td><td>RX_FLUSH</td><td>Flush RX buffer.</td></tr>
<tr><td>0x83</td><td>TX_FLUSH</td><td>Flush TX buffer.</td></tr>

<tr><td>0xA0</td><td>REFLEX</td><td>Reflex jams on present channel.</td></tr>
</table>


<h2>Thanks</h2>

<p>Thanks and a beer are due to Sergey Bratus at Dartmouth.</p>;"Ä<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Chipcon SPI</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Chipcon SPI Application</h1>

<p>This application allows for the use of SPI radios in the Chipcon
family, such as the CC2420.
</p>


<p>At present, this port is only being used in
the <a href="/hardware/telosb">Telos B</a> port of the GoodFET
firmware.  As such, no pinout is available, but the SPI pinout below
ought to be all but identical.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>

<h2>Clients</h2>

<p><a href="/clients/goodfet.ccspi/">chipcon.ccspi</a> is an actively
maintained client application.</p>

<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
Chipcon application to properly set the I/O pin directions.
</p>

<p>The Chipcon protocol is similar to SPI, but with additional
signal lines to indicate the availability of a packet.  Data
is buffered within the radio, eliminating the need to catch
it byte-wise.</p>


<h2>Verbs</h2>

<p>Verbs 0x80 to 0x8F are radio primitives, while verbs 0x90 to
0x9F are used for more complicated macro commands.  Higher than that
are a few special functions that don't exist on other platforms.  The
low commands are similar to the <a href="/apps/nrf/">Nordic RF</a>
application.
</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x80</td><td>RX</td><td>Receive</td></tr>
<tr><td>0x81</td><td>TX</td><td>Transmit</td></tr>
<tr><td>0x82</td><td>RX_FLUSH</td><td>Flush RX buffer.</td></tr>
<tr><td>0x83</td><td>TX_FLUSH</td><td>Flush TX buffer.</td></tr>

<tr><td>0xA0</td><td>REFLEX</td><td>Reflex jams on present channel.</td></tr>
</table>


<h2>Thanks</h2>

<p>Thanks and a beer are due to Sergey Bratus at Dartmouth.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@À;
"h<h1>Chipcon SPI Application</h1>

<p>This application allows for the use of SPI radios in the Chipcon
family, such as the CC2420.
</p>


<p>At present, this port is only being used in
the <a href="/hardware/telosb">Telos B</a> port of the GoodFET
firmware.  As such, no pinout is available, but the SPI pinout below
ought to be all but identical.</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/3839800528/"
title="GoodFET SPI Flash Pinout by Travis Goodspeed, on Flickr">
<img src="http://farm3.static.flickr.com/2577/3839800528_65e6430feb_o.png"
width="420" height="412" alt="GoodFET SPI Flash Pinout" /></a>

<h2>Clients</h2>

<p><a href="/clients/goodfet.ccspi/">chipcon.ccspi</a> is an actively
maintained client application.</p>

<h2>Development</h2>

<p>Prior to any transactions, the SETUP (0x10) verb should be sent to the
Chipcon application to properly set the I/O pin directions.
</p>

<p>The Chipcon protocol is similar to SPI, but with additional
signal lines to indicate the availability of a packet.  Data
is buffered within the radio, eliminating the need to catch
it byte-wise.</p>


<h2>Verbs</h2>

<p>Verbs 0x80 to 0x8F are radio primitives, while verbs 0x90 to
0x9F are used for more complicated macro commands.  Higher than that
are a few special functions that don't exist on other platforms.  The
low commands are similar to the <a href="/apps/nrf/">Nordic RF</a>
application.
</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x80</td><td>RX</td><td>Receive</td></tr>
<tr><td>0x81</td><td>TX</td><td>Transmit</td></tr>
<tr><td>0x82</td><td>RX_FLUSH</td><td>Flush RX buffer.</td></tr>
<tr><td>0x83</td><td>TX_FLUSH</td><td>Flush TX buffer.</td></tr>

<tr><td>0xA0</td><td>REFLEX</td><td>Reflex jams on present channel.</td></tr>
</table>


<h2>Thanks</h2>

<p>Thanks and a beer are due to Sergey Bratus at Dartmouth.</p>"/apps/jtag/{;{	;"%<h1>JTAG Application</h1>

<p>This application serves for the debugging of generic JTAG devices of all types,
and the macros that it defines serve as the basis for other JTAG debugging applications,
such as the one for the MSP430.</p>

<p>The pinout is standard for the MSP430 FET.</p>

<h2>Clients</h2>

<p>Please write one.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to the JTAG application
to properly set the I/O pin directions.  After that, the START (0x20) and STOP (0x21)
verbs may be used to enter and exit the TAP.</p>

<p>The JTAG protocol itself is rather barren, defining only the setting and clearing
of the Instruction Register (IR) and Data Register (DR).</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>
</table>;"z<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- JTAG</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>JTAG Application</h1>

<p>This application serves for the debugging of generic JTAG devices of all types,
and the macros that it defines serve as the basis for other JTAG debugging applications,
such as the one for the MSP430.</p>

<p>The pinout is standard for the MSP430 FET.</p>

<h2>Clients</h2>

<p>Please write one.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to the JTAG application
to properly set the I/O pin directions.  After that, the START (0x20) and STOP (0x21)
verbs may be used to enter and exit the TAP.</p>

<p>The JTAG protocol itself is rather barren, defining only the setting and clearing
of the Instruction Register (IR) and Data Register (DR).</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>
</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@Æ;
"%<h1>JTAG Application</h1>

<p>This application serves for the debugging of generic JTAG devices of all types,
and the macros that it defines serve as the basis for other JTAG debugging applications,
such as the one for the MSP430.</p>

<p>The pinout is standard for the MSP430 FET.</p>

<h2>Clients</h2>

<p>Please write one.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to the JTAG application
to properly set the I/O pin directions.  After that, the START (0x20) and STOP (0x21)
verbs may be used to enter and exit the TAP.</p>

<p>The JTAG protocol itself is rather barren, defining only the setting and clearing
of the Instruction Register (IR) and Data Register (DR).</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start a transaction.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop a transaction.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>
</table>"/clients/goodfetmonitor/{;{	;"<h1>goodfet.monitor</h1>

<p>The monitor application is used to manage the GoodFET's own
microcontroller, as well as to perform certain tests on application
code.</p>

<h2>Client</h2>
<p><pre>Usage: goodfet.monitor verb [objects]

goodfet.monitor test
goodfet.monitor dump $foo.hex [0x$start 0x$stop]
goodfet.monitor ivt
goodfet.monitor peek [0x$start 0x$stop]
goodfet.monitor verify $foo.hex [0x$start 0x$stop]
goodfet.monitor ramfill
goodfet.monitor ramdepth
goodfet.monitor info
</pre></p>

<h2>Pinout</h2>

<p>This client works on the GoodFET itself and as such there is no pinout needed</p>

<h2>Notes</h2>

<p>No notes for this client.</p>;"å<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.monitor</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.monitor</h1>

<p>The monitor application is used to manage the GoodFET's own
microcontroller, as well as to perform certain tests on application
code.</p>

<h2>Client</h2>
<p><pre>Usage: goodfet.monitor verb [objects]

goodfet.monitor test
goodfet.monitor dump $foo.hex [0x$start 0x$stop]
goodfet.monitor ivt
goodfet.monitor peek [0x$start 0x$stop]
goodfet.monitor verify $foo.hex [0x$start 0x$stop]
goodfet.monitor ramfill
goodfet.monitor ramdepth
goodfet.monitor info
</pre></p>

<h2>Pinout</h2>

<p>This client works on the GoodFET itself and as such there is no pinout needed</p>

<h2>Notes</h2>

<p>No notes for this client.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@Ì;
"<h1>goodfet.monitor</h1>

<p>The monitor application is used to manage the GoodFET's own
microcontroller, as well as to perform certain tests on application
code.</p>

<h2>Client</h2>
<p><pre>Usage: goodfet.monitor verb [objects]

goodfet.monitor test
goodfet.monitor dump $foo.hex [0x$start 0x$stop]
goodfet.monitor ivt
goodfet.monitor peek [0x$start 0x$stop]
goodfet.monitor verify $foo.hex [0x$start 0x$stop]
goodfet.monitor ramfill
goodfet.monitor ramdepth
goodfet.monitor info
</pre></p>

<h2>Pinout</h2>

<p>This client works on the GoodFET itself and as such there is no pinout needed</p>

<h2>Notes</h2>

<p>No notes for this client.</p>"/hardware/goodfet22/{;{	;"	<h1>GoodFET22</h1>

<p>The GoodFET22 is the seventh hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/badfet20/">BadFET20</a>
and <a href="/hardware/goodfet30/">GoodFET30</a>.  It retains the more
powerful MCU of the BadFET20 while adopting the GoodFET30's smaller
board and lack of crystals.  The 74HC4053 MUX has been dropped from
the design, and glitching is now performed through
an <a href="http://www.analog.com/en/switchesmultiplexers/analog-switches/adg1634/products/product.html">ADG1634</a>
from Analog Devices.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet22 of the subversion repository, or as
<a href="/releases/goodfet22.zip">goodfet22.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The ADG1634BRUZ is optional and only useful for voltage glitching
research.  If omitting it, populate the two empty resistor pads near
it with zero-ohm resistors.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>1</td><td>TSSOP20</td><td><a href="http://www.analog.com/en/switchesmultiplexers/analog-switches/adg1634/products/product.html">ADG1634BRUZ</a></td></tr>
<tr><td>3</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
</table>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<h2>Construction</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/4307787292/"
title="GoodFET22 by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4020/4307787292_381d9301d8.jpg"
width="500" height="180" alt="GoodFET22" /></a>

<a href="http://www.flickr.com/photos/travisgoodspeed/4351528769/"
title="GoodFET22 Schematic by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4023/4351528769_0ddb6a1f31.jpg"
width="500" height="286" alt="GoodFET22 Schematic" /></a>

<h2>Errata</h2>

<p>The board's silkscreen lists the chip as an ADG1633.  Use a 1634,
as the 1633 is a related chip that will not fit.</p>;"ã<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- GoodFET22</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET22</h1>

<p>The GoodFET22 is the seventh hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/badfet20/">BadFET20</a>
and <a href="/hardware/goodfet30/">GoodFET30</a>.  It retains the more
powerful MCU of the BadFET20 while adopting the GoodFET30's smaller
board and lack of crystals.  The 74HC4053 MUX has been dropped from
the design, and glitching is now performed through
an <a href="http://www.analog.com/en/switchesmultiplexers/analog-switches/adg1634/products/product.html">ADG1634</a>
from Analog Devices.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet22 of the subversion repository, or as
<a href="/releases/goodfet22.zip">goodfet22.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The ADG1634BRUZ is optional and only useful for voltage glitching
research.  If omitting it, populate the two empty resistor pads near
it with zero-ohm resistors.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>1</td><td>TSSOP20</td><td><a href="http://www.analog.com/en/switchesmultiplexers/analog-switches/adg1634/products/product.html">ADG1634BRUZ</a></td></tr>
<tr><td>3</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
</table>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<h2>Construction</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/4307787292/"
title="GoodFET22 by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4020/4307787292_381d9301d8.jpg"
width="500" height="180" alt="GoodFET22" /></a>

<a href="http://www.flickr.com/photos/travisgoodspeed/4351528769/"
title="GoodFET22 Schematic by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4023/4351528769_0ddb6a1f31.jpg"
width="500" height="286" alt="GoodFET22 Schematic" /></a>

<h2>Errata</h2>

<p>The board's silkscreen lists the chip as an ADG1633.  Use a 1634,
as the 1633 is a related chip that will not fit.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@Ò;
"	<h1>GoodFET22</h1>

<p>The GoodFET22 is the seventh hardware revision of the GoodFET,
owing its heritage to the <a href="/hardware/badfet20/">BadFET20</a>
and <a href="/hardware/goodfet30/">GoodFET30</a>.  It retains the more
powerful MCU of the BadFET20 while adopting the GoodFET30's smaller
board and lack of crystals.  The 74HC4053 MUX has been dropped from
the design, and glitching is now performed through
an <a href="http://www.analog.com/en/switchesmultiplexers/analog-switches/adg1634/products/product.html">ADG1634</a>
from Analog Devices.
</p>

<h2>CAD Files</h2>

<p>Eagle CAD 5.x files for the design can be found in
/branches/goodfet22 of the subversion repository, or as
<a href="/releases/goodfet22.zip">goodfet22.zip</a>.</p>

<h2>Bill of Materials</h2>

<p>The ADG1634BRUZ is optional and only useful for voltage glitching
research.  If omitting it, populate the two empty resistor pads near
it with zero-ohm resistors.</p>

<table border="1">
<tr><td>Quantity</td><td>Package</td><td></td></tr>
<tr><td>1</td><td>SSOP28</td><td><a href="http://www.ftdichip.com/Products/FT232R.htm">FT232RL</a></td></tr>
<tr><td>1</td><td>QFP64</td><td><a href="http://focus.ti.com/docs/prod/folders/print/msp430f2618.html">MSP430F2618TPM</a></td></tr>
<tr><td>1</td><td>TSSOP20</td><td><a href="http://www.analog.com/en/switchesmultiplexers/analog-switches/adg1634/products/product.html">ADG1634BRUZ</a></td></tr>
<tr><td>3</td><td>0603</td><td>0.1&mu;F Decoupling Capacitors</td></tr>
<tr><td>3</td><td>0603</td><td>0603 LED</td></tr>
<tr><td>2</td><td>0603</td><td>330R LED Series Resistors</td></tr>
<tr><td>1</td><td>0603</td><td>47K !RST Pull-up Resistor</td></tr>
</table>

<p>Resistor values can be approximated.  Be sure to get the 64 pin
variant of the MSP430F2618.</p>

<h2>Construction</h2>

<a href="http://www.flickr.com/photos/travisgoodspeed/4307787292/"
title="GoodFET22 by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4020/4307787292_381d9301d8.jpg"
width="500" height="180" alt="GoodFET22" /></a>

<a href="http://www.flickr.com/photos/travisgoodspeed/4351528769/"
title="GoodFET22 Schematic by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4023/4351528769_0ddb6a1f31.jpg"
width="500" height="286" alt="GoodFET22 Schematic" /></a>

<h2>Errata</h2>

<p>The board's silkscreen lists the chip as an ADG1633.  Use a 1634,
as the 1633 is a related chip that will not fit.</p>"/{;{	;"r<h1>GoodFET</h1>

<a href="http://www.flickr.com/photos/travisgoodspeed/3440549130/" title="GOODFET10 by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3311/3440549130_e9878ae409.jpg" width="500" height="375" alt="GOODFET10" /></a>

<p>The GoodFET is an open-source JTAG adapter, loosely based upon the
TI MSP430 FET UIF and EZ430U boards, as described in their
documentation.
See <a href="http://travisgoodspeed.blogspot.com/2009/03/improving-msp430-fet.html">
Improving the MSP430 FET</a> on Travis Goodspeed's blog for further
information.</p>

<p>In addition to JTAG, the GoodFET has been inspired by HackADay's
<a href="http://hackaday.com/2008/11/19/how-to-the-bus-pirate-universal-serial-interface/">
Bus Pirate</a> to become a universal serial bus interface.</p>

<p>Hardware and software are available under the
BSD license, and free-as-in-beer boards will be given to those who ask politely.
Email Travis Goodspeed, travis at radiantmachines.com, to get involved.
</p>

<h3>Source Code</h3>

<p>For source code, schematics, and firmware<br />
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet</p>;"Ç<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Home</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>GoodFET</h1>

<a href="http://www.flickr.com/photos/travisgoodspeed/3440549130/" title="GOODFET10 by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3311/3440549130_e9878ae409.jpg" width="500" height="375" alt="GOODFET10" /></a>

<p>The GoodFET is an open-source JTAG adapter, loosely based upon the
TI MSP430 FET UIF and EZ430U boards, as described in their
documentation.
See <a href="http://travisgoodspeed.blogspot.com/2009/03/improving-msp430-fet.html">
Improving the MSP430 FET</a> on Travis Goodspeed's blog for further
information.</p>

<p>In addition to JTAG, the GoodFET has been inspired by HackADay's
<a href="http://hackaday.com/2008/11/19/how-to-the-bus-pirate-universal-serial-interface/">
Bus Pirate</a> to become a universal serial bus interface.</p>

<p>Hardware and software are available under the
BSD license, and free-as-in-beer boards will be given to those who ask politely.
Email Travis Goodspeed, travis at radiantmachines.com, to get involved.
</p>

<h3>Source Code</h3>

<p>For source code, schematics, and firmware<br />
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@Ø;
"r<h1>GoodFET</h1>

<a href="http://www.flickr.com/photos/travisgoodspeed/3440549130/" title="GOODFET10 by Travis Goodspeed, on Flickr"><img src="http://farm4.static.flickr.com/3311/3440549130_e9878ae409.jpg" width="500" height="375" alt="GOODFET10" /></a>

<p>The GoodFET is an open-source JTAG adapter, loosely based upon the
TI MSP430 FET UIF and EZ430U boards, as described in their
documentation.
See <a href="http://travisgoodspeed.blogspot.com/2009/03/improving-msp430-fet.html">
Improving the MSP430 FET</a> on Travis Goodspeed's blog for further
information.</p>

<p>In addition to JTAG, the GoodFET has been inspired by HackADay's
<a href="http://hackaday.com/2008/11/19/how-to-the-bus-pirate-universal-serial-interface/">
Bus Pirate</a> to become a universal serial bus interface.</p>

<p>Hardware and software are available under the
BSD license, and free-as-in-beer boards will be given to those who ask politely.
Email Travis Goodspeed, travis at radiantmachines.com, to get involved.
</p>

<h3>Source Code</h3>

<p>For source code, schematics, and firmware<br />
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet</p>"
/faq/{;{	;"<h1>FAQ</h1>

<h3>Software</h3>

<p><i>In Ubuntu 10.4, goodfet.bsl crashes randomly.</i><br/>  Kenneth
Finnegan describes the
problem <a href="http://kennethfinnegan.blogspot.com/2010/12/soldering-goodfet-31.html#software">in
this article</a>.  The jist is that a bad udev rule makes the
GoodFET's FT232 chip look like a power management device, which upowerd
then grabs hold of.  The fix is to delete the udev rule in /lib/udev/rules.d/95-upower-wup.rules.</p>

<p><i>Is there a standalone version for Windows?</i><br/>
Yes, but it
is very new.
Download <a href="http://sourceforge.net/projects/goodfet/files/">GFWin.zip</a>
and be sure that you have
the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=9b2da534-3e03-4391-8a4d-074b9f2bc1bf&displaylang=en">Visual
Studio Redistribution Package</a>.
</p>

<p><i>Will the client run on my operating system?</i><br/>
While the software is developed in unix, you ought to be able to run it
under Windows with Cygwin and Python.</p>

<p><i>Which python packages are required?</i><br/>
<a href="http://pyserial.sourceforge.net/">python-serial</a>, <a href="http://code.google.com/p/pysqlite/">python-sqlite</a></p>

<p><i>Where do I get MSPGCC?</i><br/>  A good build script is
available at <a href="http://mspgcc4.sourceforge.net/">MSPGCC4</a>.
Compatibility is maintained with MSPGCC3, but all present development
is performed in version 4.  Be sure to build without Insight, and feel
free to omit GDB if you don't need it.</p>

<p><i>Can I install the firmware without MSPGCC?</i><br/>
Sure.  'goodfet.bsl --fromweb' will download the most recent firmware from
the website.  This does not work for special platforms like the Next Hope Badge
or the Telos B.</p>


<h3>BSL</h3>

<p><i>What does ``Verb FF is wrong.  Incorrect firmware or bad Info guess?'' mean?</i><br/>
This is an older error that should no longer be seen.  Update to the latest client.
</p>

<h3>Hardware</h3>

<p><i>Which model do I want?</i><br/>
The <a href="/hardware/goodfet41">GoodFET41</a> is by far the best model,
but the <a href="/hardware/goodfet31">GoodFET31</a> is kept is stock
as it is easier to solder.  Boards can be obtained at little to no cost
as explained in the <a href="/orders/">Ording Information</a> page.</p>

<p><i>Do I use a 47K pull-up resistor or a 74K resistor for the !RST line?</i><br/>
74K is a typo, but anything from 1K to 100K ought to work.  The !RST pull-up
resistor has been removed from recent models, and it can probably be omitted
in older models.</p>

<p><i>I would like a GoodFET, but I am unable to solder.  Will you send me an assembled
unit?</i><br/>
Unless you are willing to pay an absurd markup, it is best to build your own.  Bring
the components to your local <a href="http://hackerspaces.org">hackerspace</a>, and
ask a neighbor to help you out.</p>

<h3>Distribution</h3>

<p><i>What license does this project use?  Can I fork it, package it, or trade
it for battle umbrellas?</i><br/>
The GoodFET firmware and client software are 3-clause BSD licensed, and you are free to
redistribute anything in the GoodFET repository without any unneighborly
restrictions.</p>

<p><i>Where can I get the latest version of the code?</i><br/>
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet
</p>

<p><i>Is a zip archive available that's just a little more stable</i><br/>
<a href="http://goodfet.sourceforge.net/dist/goodfet.zip">http://goodfet.sourceforge.net/dist/goodfet.zip</a>
</p>


<h3>Development</h3>

<p><i>Would you like patches for the $foo architecture?</i><br/>
Yes!  Email travis at radiantmachines.com or join us in #goodfet
on Freenode to discuss it.</p>

<p><i>Will you write support for $foo?</i><br/>
There's a long queue of chips to support.  Getting pushed to the front
won't be easy.</p>

<p><i>Who builds the GoodFET?</i><br/>
The project was begun by <a href="http://travisgoodspeed.blogspot.com/">Travis
Goodspeed</a> in early 2009.  Other neighbors contribute regularly.</p>

<p><i>Can the firmware be ported?</i><br/>
Yes.  Ports are underway for the <a href="http://zolertia.sourceforge.net/">Zolertia Z1</a>,
Telos B, and other MSP430 devices.  In the longer term, a port is planned to the
Chipcon 8051 radios.</p>;"ð#<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Frequently Asked Questions</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>FAQ</h1>

<h3>Software</h3>

<p><i>In Ubuntu 10.4, goodfet.bsl crashes randomly.</i><br/>  Kenneth
Finnegan describes the
problem <a href="http://kennethfinnegan.blogspot.com/2010/12/soldering-goodfet-31.html#software">in
this article</a>.  The jist is that a bad udev rule makes the
GoodFET's FT232 chip look like a power management device, which upowerd
then grabs hold of.  The fix is to delete the udev rule in /lib/udev/rules.d/95-upower-wup.rules.</p>

<p><i>Is there a standalone version for Windows?</i><br/>
Yes, but it
is very new.
Download <a href="http://sourceforge.net/projects/goodfet/files/">GFWin.zip</a>
and be sure that you have
the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=9b2da534-3e03-4391-8a4d-074b9f2bc1bf&displaylang=en">Visual
Studio Redistribution Package</a>.
</p>

<p><i>Will the client run on my operating system?</i><br/>
While the software is developed in unix, you ought to be able to run it
under Windows with Cygwin and Python.</p>

<p><i>Which python packages are required?</i><br/>
<a href="http://pyserial.sourceforge.net/">python-serial</a>, <a href="http://code.google.com/p/pysqlite/">python-sqlite</a></p>

<p><i>Where do I get MSPGCC?</i><br/>  A good build script is
available at <a href="http://mspgcc4.sourceforge.net/">MSPGCC4</a>.
Compatibility is maintained with MSPGCC3, but all present development
is performed in version 4.  Be sure to build without Insight, and feel
free to omit GDB if you don't need it.</p>

<p><i>Can I install the firmware without MSPGCC?</i><br/>
Sure.  'goodfet.bsl --fromweb' will download the most recent firmware from
the website.  This does not work for special platforms like the Next Hope Badge
or the Telos B.</p>


<h3>BSL</h3>

<p><i>What does ``Verb FF is wrong.  Incorrect firmware or bad Info guess?'' mean?</i><br/>
This is an older error that should no longer be seen.  Update to the latest client.
</p>

<h3>Hardware</h3>

<p><i>Which model do I want?</i><br/>
The <a href="/hardware/goodfet41">GoodFET41</a> is by far the best model,
but the <a href="/hardware/goodfet31">GoodFET31</a> is kept is stock
as it is easier to solder.  Boards can be obtained at little to no cost
as explained in the <a href="/orders/">Ording Information</a> page.</p>

<p><i>Do I use a 47K pull-up resistor or a 74K resistor for the !RST line?</i><br/>
74K is a typo, but anything from 1K to 100K ought to work.  The !RST pull-up
resistor has been removed from recent models, and it can probably be omitted
in older models.</p>

<p><i>I would like a GoodFET, but I am unable to solder.  Will you send me an assembled
unit?</i><br/>
Unless you are willing to pay an absurd markup, it is best to build your own.  Bring
the components to your local <a href="http://hackerspaces.org">hackerspace</a>, and
ask a neighbor to help you out.</p>

<h3>Distribution</h3>

<p><i>What license does this project use?  Can I fork it, package it, or trade
it for battle umbrellas?</i><br/>
The GoodFET firmware and client software are 3-clause BSD licensed, and you are free to
redistribute anything in the GoodFET repository without any unneighborly
restrictions.</p>

<p><i>Where can I get the latest version of the code?</i><br/>
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet
</p>

<p><i>Is a zip archive available that's just a little more stable</i><br/>
<a href="http://goodfet.sourceforge.net/dist/goodfet.zip">http://goodfet.sourceforge.net/dist/goodfet.zip</a>
</p>


<h3>Development</h3>

<p><i>Would you like patches for the $foo architecture?</i><br/>
Yes!  Email travis at radiantmachines.com or join us in #goodfet
on Freenode to discuss it.</p>

<p><i>Will you write support for $foo?</i><br/>
There's a long queue of chips to support.  Getting pushed to the front
won't be easy.</p>

<p><i>Who builds the GoodFET?</i><br/>
The project was begun by <a href="http://travisgoodspeed.blogspot.com/">Travis
Goodspeed</a> in early 2009.  Other neighbors contribute regularly.</p>

<p><i>Can the firmware be ported?</i><br/>
Yes.  Ports are underway for the <a href="http://zolertia.sourceforge.net/">Zolertia Z1</a>,
Telos B, and other MSP430 devices.  In the longer term, a port is planned to the
Chipcon 8051 radios.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@Þ;
"<h1>FAQ</h1>

<h3>Software</h3>

<p><i>In Ubuntu 10.4, goodfet.bsl crashes randomly.</i><br/>  Kenneth
Finnegan describes the
problem <a href="http://kennethfinnegan.blogspot.com/2010/12/soldering-goodfet-31.html#software">in
this article</a>.  The jist is that a bad udev rule makes the
GoodFET's FT232 chip look like a power management device, which upowerd
then grabs hold of.  The fix is to delete the udev rule in /lib/udev/rules.d/95-upower-wup.rules.</p>

<p><i>Is there a standalone version for Windows?</i><br/>
Yes, but it
is very new.
Download <a href="http://sourceforge.net/projects/goodfet/files/">GFWin.zip</a>
and be sure that you have
the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=9b2da534-3e03-4391-8a4d-074b9f2bc1bf&displaylang=en">Visual
Studio Redistribution Package</a>.
</p>

<p><i>Will the client run on my operating system?</i><br/>
While the software is developed in unix, you ought to be able to run it
under Windows with Cygwin and Python.</p>

<p><i>Which python packages are required?</i><br/>
<a href="http://pyserial.sourceforge.net/">python-serial</a>, <a href="http://code.google.com/p/pysqlite/">python-sqlite</a></p>

<p><i>Where do I get MSPGCC?</i><br/>  A good build script is
available at <a href="http://mspgcc4.sourceforge.net/">MSPGCC4</a>.
Compatibility is maintained with MSPGCC3, but all present development
is performed in version 4.  Be sure to build without Insight, and feel
free to omit GDB if you don't need it.</p>

<p><i>Can I install the firmware without MSPGCC?</i><br/>
Sure.  'goodfet.bsl --fromweb' will download the most recent firmware from
the website.  This does not work for special platforms like the Next Hope Badge
or the Telos B.</p>


<h3>BSL</h3>

<p><i>What does ``Verb FF is wrong.  Incorrect firmware or bad Info guess?'' mean?</i><br/>
This is an older error that should no longer be seen.  Update to the latest client.
</p>

<h3>Hardware</h3>

<p><i>Which model do I want?</i><br/>
The <a href="/hardware/goodfet41">GoodFET41</a> is by far the best model,
but the <a href="/hardware/goodfet31">GoodFET31</a> is kept is stock
as it is easier to solder.  Boards can be obtained at little to no cost
as explained in the <a href="/orders/">Ording Information</a> page.</p>

<p><i>Do I use a 47K pull-up resistor or a 74K resistor for the !RST line?</i><br/>
74K is a typo, but anything from 1K to 100K ought to work.  The !RST pull-up
resistor has been removed from recent models, and it can probably be omitted
in older models.</p>

<p><i>I would like a GoodFET, but I am unable to solder.  Will you send me an assembled
unit?</i><br/>
Unless you are willing to pay an absurd markup, it is best to build your own.  Bring
the components to your local <a href="http://hackerspaces.org">hackerspace</a>, and
ask a neighbor to help you out.</p>

<h3>Distribution</h3>

<p><i>What license does this project use?  Can I fork it, package it, or trade
it for battle umbrellas?</i><br/>
The GoodFET firmware and client software are 3-clause BSD licensed, and you are free to
redistribute anything in the GoodFET repository without any unneighborly
restrictions.</p>

<p><i>Where can I get the latest version of the code?</i><br/>
svn co https://goodfet.svn.sourceforge.net/svnroot/goodfet
</p>

<p><i>Is a zip archive available that's just a little more stable</i><br/>
<a href="http://goodfet.sourceforge.net/dist/goodfet.zip">http://goodfet.sourceforge.net/dist/goodfet.zip</a>
</p>


<h3>Development</h3>

<p><i>Would you like patches for the $foo architecture?</i><br/>
Yes!  Email travis at radiantmachines.com or join us in #goodfet
on Freenode to discuss it.</p>

<p><i>Will you write support for $foo?</i><br/>
There's a long queue of chips to support.  Getting pushed to the front
won't be easy.</p>

<p><i>Who builds the GoodFET?</i><br/>
The project was begun by <a href="http://travisgoodspeed.blogspot.com/">Travis
Goodspeed</a> in early 2009.  Other neighbors contribute regularly.</p>

<p><i>Can the firmware be ported?</i><br/>
Yes.  Ports are underway for the <a href="http://zolertia.sourceforge.net/">Zolertia Z1</a>,
Telos B, and other MSP430 devices.  In the longer term, a port is planned to the
Chipcon 8051 radios.</p>"/apps/ejtag/{;{	;")<h1>MIPS EJTAG Application</h1>

<p>This application is used for programming and debugging MIPS processors
implementing the EJTAG protocol.</p>

<p>The pinout is that of the MSP430 FET, so an adapter will be needed
for debugging targets such as the Linksys WRT54G routers.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.mips'.</p>

<h2>Status</h2>

<p>This is a very new target, and it is not yet verified to be
useful or even functional.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to
the JTAG application to properly set the I/O pin directions.  After
that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the TAP.  HALTCPU (0xA0) and RELEASECPU (0xA1) should be used to
stop the CPU during memory accesses, releasing afterward.</p>

<p>All reads and writes are 32-bit, but 64-bit support might be added
once we have acquired test hardware.  IR_SHIFT (0x80) and DR_SHIFT
(0x80) are available for raw access to JTAG, but higher level
functions are also implemented for convenience and speed.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at int32[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write int32[1] to memory at in32[0].</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>

<!--
<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>
-->

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>

<p>WRITEMEM and WRITEFLASH read and return the written value.  Client implementations
should throw an error during programming if the returned value does not match the
written value.  Insufficient writes commonly leave 0xA100.</p>;"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- MIPS EJTAG</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>MIPS EJTAG Application</h1>

<p>This application is used for programming and debugging MIPS processors
implementing the EJTAG protocol.</p>

<p>The pinout is that of the MSP430 FET, so an adapter will be needed
for debugging targets such as the Linksys WRT54G routers.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.mips'.</p>

<h2>Status</h2>

<p>This is a very new target, and it is not yet verified to be
useful or even functional.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to
the JTAG application to properly set the I/O pin directions.  After
that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the TAP.  HALTCPU (0xA0) and RELEASECPU (0xA1) should be used to
stop the CPU during memory accesses, releasing afterward.</p>

<p>All reads and writes are 32-bit, but 64-bit support might be added
once we have acquired test hardware.  IR_SHIFT (0x80) and DR_SHIFT
(0x80) are available for raw access to JTAG, but higher level
functions are also implemented for convenience and speed.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at int32[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write int32[1] to memory at in32[0].</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>

<!--
<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>
-->

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>

<p>WRITEMEM and WRITEFLASH read and return the written value.  Client implementations
should throw an error during programming if the returned value does not match the
written value.  Insufficient writes commonly leave 0xA100.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@ä;
")<h1>MIPS EJTAG Application</h1>

<p>This application is used for programming and debugging MIPS processors
implementing the EJTAG protocol.</p>

<p>The pinout is that of the MSP430 FET, so an adapter will be needed
for debugging targets such as the Linksys WRT54G routers.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.mips'.</p>

<h2>Status</h2>

<p>This is a very new target, and it is not yet verified to be
useful or even functional.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to
the JTAG application to properly set the I/O pin directions.  After
that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the TAP.  HALTCPU (0xA0) and RELEASECPU (0xA1) should be used to
stop the CPU during memory accesses, releasing afterward.</p>

<p>All reads and writes are 32-bit, but 64-bit support might be added
once we have acquired test hardware.  IR_SHIFT (0x80) and DR_SHIFT
(0x80) are available for raw access to JTAG, but higher level
functions are also implemented for convenience and speed.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at int32[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write int32[1] to memory at in32[0].</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>

<!--
<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>
-->

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>

<p>WRITEMEM and WRITEFLASH read and return the written value.  Client implementations
should throw an error during programming if the returned value does not match the
written value.  Insufficient writes commonly leave 0xA100.</p>"/clients/goodfetpic/{;{	;"
<h1>goodfet.pic</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: ./goodfet.pic verb [objects]

./goodfet.pic devid
./goodfet.pic read 0x$addr
./goodfet.pic dump $foo.hex [0x$start 0x$stop] [pretty]
./goodfet.pic config
./goodfet.pic reset
./goodfet.pic program $foo.hex
./goodfet.pic verify $foo.hex
./goodfet.pic write 0x$address 0x$value
./goodfet.pic write_config 0x$reg_address (or $reg_name) [$0x0000]
./goodfet.pic erase [0x$page]
./goodfet.pic six [instruction]
./goodfet.pic sixfile [$foo.txt]
./goodfet.pic regout

Note: use - for stdout.
Warning: only formally supports dsPIC33F/PIC24H,
         but read/write flash memory works with PIC24F ...
</pre></p>

<h2>Pinout</h2>
<p>
<table border="1">
<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em">Pin</th><th style="width: 5em;">Name</th></tr>
<tr><td></td><td>1</td><td>2</td><td>Vcc</td></tr>
<tr><td>PGD</td><td>3</td><td>4</td><td>Vcc</td></tr>
<tr><td>!MCLR</td><td>5</td><td>6</td><td></td></tr>
<tr><td>PGC</td><td>7</td><td>8</td><td></td></tr>
<tr><td>GND</td><td>9</td><td>10</td><td></td></tr>
<tr><td></td><td>11</td><td>12</td><td></td></tr>
<tr><td></td><td>13</td><td>14</td><td></td></tr>
</table>
</p>

<h2>Examples</h2>

<p>To dump the device and application
IDs and hardware revision number of an attached dsPIC33F/PIC24H chip,
use the goodfet.pic client:
<pre>
$ ./goodfet.pic devid
</pre></p>

<p>To read the configuration registers, with labels for recognized addresses,
<pre>
$ ./goodfet.pic config
</pre><b>N.B.,</b> should only work with PIC24H and dsPIC33F chip
family. Much more documentation is needed for the programmer and is
forthcoming. For now, here are some quick examples. To bulk erase
program memory (this is necessary before programming),
<pre>
$ ./goodfet.pic erase
</pre></p>
<p>Then to program the device with a code file, foo.hex,
<pre>
$ ./goodfet.pic program foo.hex
</pre></p>
<p>To verify programming results,
<pre>
$ ./goodfet.pic verify foo.hex
</pre></p>
<p>Please note that only addresses in given hex file are verified. A
quick visual check of results might be a dump of the first few
instruction words.
<pre>
$ ./goodfet.pic - 0x200 0x220 pretty
</pre></p>
<p>This command prints (24-bit width) contents of program memory at
addresses 0x200 through 0x220 to stdout.</p>

<h2>Notes</h2>
<p>This client (and <a href="/apps/pic/">corresponding app</a>) are
alpha releases. Or rather, I use them in a production environment, but
they are only thoroughly tested on my own research hardware. At
present, usability features are minimal or absent.</p>
<p>Contact <a href="http://scottman.net/">Scott Livingston</a>
(slivingston [at] caltech) with any comments, questions, requests,
etc.</p>;"÷<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.pic</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.pic</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: ./goodfet.pic verb [objects]

./goodfet.pic devid
./goodfet.pic read 0x$addr
./goodfet.pic dump $foo.hex [0x$start 0x$stop] [pretty]
./goodfet.pic config
./goodfet.pic reset
./goodfet.pic program $foo.hex
./goodfet.pic verify $foo.hex
./goodfet.pic write 0x$address 0x$value
./goodfet.pic write_config 0x$reg_address (or $reg_name) [$0x0000]
./goodfet.pic erase [0x$page]
./goodfet.pic six [instruction]
./goodfet.pic sixfile [$foo.txt]
./goodfet.pic regout

Note: use - for stdout.
Warning: only formally supports dsPIC33F/PIC24H,
         but read/write flash memory works with PIC24F ...
</pre></p>

<h2>Pinout</h2>
<p>
<table border="1">
<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em">Pin</th><th style="width: 5em;">Name</th></tr>
<tr><td></td><td>1</td><td>2</td><td>Vcc</td></tr>
<tr><td>PGD</td><td>3</td><td>4</td><td>Vcc</td></tr>
<tr><td>!MCLR</td><td>5</td><td>6</td><td></td></tr>
<tr><td>PGC</td><td>7</td><td>8</td><td></td></tr>
<tr><td>GND</td><td>9</td><td>10</td><td></td></tr>
<tr><td></td><td>11</td><td>12</td><td></td></tr>
<tr><td></td><td>13</td><td>14</td><td></td></tr>
</table>
</p>

<h2>Examples</h2>

<p>To dump the device and application
IDs and hardware revision number of an attached dsPIC33F/PIC24H chip,
use the goodfet.pic client:
<pre>
$ ./goodfet.pic devid
</pre></p>

<p>To read the configuration registers, with labels for recognized addresses,
<pre>
$ ./goodfet.pic config
</pre><b>N.B.,</b> should only work with PIC24H and dsPIC33F chip
family. Much more documentation is needed for the programmer and is
forthcoming. For now, here are some quick examples. To bulk erase
program memory (this is necessary before programming),
<pre>
$ ./goodfet.pic erase
</pre></p>
<p>Then to program the device with a code file, foo.hex,
<pre>
$ ./goodfet.pic program foo.hex
</pre></p>
<p>To verify programming results,
<pre>
$ ./goodfet.pic verify foo.hex
</pre></p>
<p>Please note that only addresses in given hex file are verified. A
quick visual check of results might be a dump of the first few
instruction words.
<pre>
$ ./goodfet.pic - 0x200 0x220 pretty
</pre></p>
<p>This command prints (24-bit width) contents of program memory at
addresses 0x200 through 0x220 to stdout.</p>

<h2>Notes</h2>
<p>This client (and <a href="/apps/pic/">corresponding app</a>) are
alpha releases. Or rather, I use them in a production environment, but
they are only thoroughly tested on my own research hardware. At
present, usability features are minimal or absent.</p>
<p>Contact <a href="http://scottman.net/">Scott Livingston</a>
(slivingston [at] caltech) with any comments, questions, requests,
etc.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@ê;
"
<h1>goodfet.pic</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: ./goodfet.pic verb [objects]

./goodfet.pic devid
./goodfet.pic read 0x$addr
./goodfet.pic dump $foo.hex [0x$start 0x$stop] [pretty]
./goodfet.pic config
./goodfet.pic reset
./goodfet.pic program $foo.hex
./goodfet.pic verify $foo.hex
./goodfet.pic write 0x$address 0x$value
./goodfet.pic write_config 0x$reg_address (or $reg_name) [$0x0000]
./goodfet.pic erase [0x$page]
./goodfet.pic six [instruction]
./goodfet.pic sixfile [$foo.txt]
./goodfet.pic regout

Note: use - for stdout.
Warning: only formally supports dsPIC33F/PIC24H,
         but read/write flash memory works with PIC24F ...
</pre></p>

<h2>Pinout</h2>
<p>
<table border="1">
<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em">Pin</th><th style="width: 5em;">Name</th></tr>
<tr><td></td><td>1</td><td>2</td><td>Vcc</td></tr>
<tr><td>PGD</td><td>3</td><td>4</td><td>Vcc</td></tr>
<tr><td>!MCLR</td><td>5</td><td>6</td><td></td></tr>
<tr><td>PGC</td><td>7</td><td>8</td><td></td></tr>
<tr><td>GND</td><td>9</td><td>10</td><td></td></tr>
<tr><td></td><td>11</td><td>12</td><td></td></tr>
<tr><td></td><td>13</td><td>14</td><td></td></tr>
</table>
</p>

<h2>Examples</h2>

<p>To dump the device and application
IDs and hardware revision number of an attached dsPIC33F/PIC24H chip,
use the goodfet.pic client:
<pre>
$ ./goodfet.pic devid
</pre></p>

<p>To read the configuration registers, with labels for recognized addresses,
<pre>
$ ./goodfet.pic config
</pre><b>N.B.,</b> should only work with PIC24H and dsPIC33F chip
family. Much more documentation is needed for the programmer and is
forthcoming. For now, here are some quick examples. To bulk erase
program memory (this is necessary before programming),
<pre>
$ ./goodfet.pic erase
</pre></p>
<p>Then to program the device with a code file, foo.hex,
<pre>
$ ./goodfet.pic program foo.hex
</pre></p>
<p>To verify programming results,
<pre>
$ ./goodfet.pic verify foo.hex
</pre></p>
<p>Please note that only addresses in given hex file are verified. A
quick visual check of results might be a dump of the first few
instruction words.
<pre>
$ ./goodfet.pic - 0x200 0x220 pretty
</pre></p>
<p>This command prints (24-bit width) contents of program memory at
addresses 0x200 through 0x220 to stdout.</p>

<h2>Notes</h2>
<p>This client (and <a href="/apps/pic/">corresponding app</a>) are
alpha releases. Or rather, I use them in a production environment, but
they are only thoroughly tested on my own research hardware. At
present, usability features are minimal or absent.</p>
<p>Contact <a href="http://scottman.net/">Scott Livingston</a>
(slivingston [at] caltech) with any comments, questions, requests,
etc.</p>"/clients/goodfetnrf/{;{	;"ù<h1>goodfet.nrf</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: goodfet.nrf verb [objects]

goodfet.nrf info
goodfet.nrf test
goodfet.nrf regs
goodfet.nrf regbits
goodfet.nrf pyregs

goodfet.nrf tune aa|55,mac,r5,r6
        Tunes to a configuration.
goodfet.nrf sniff
        Sniffs packets by current config.
goodfet.nrf sniffob
        Sniffs OpenBeacon traffic.
goodfet.nrf snifftp
        Sniffs Turning Point Clicker traffic.
goodfet.nrf sniffsf
        Sniffs SparkFun Dongle traffic.
goodfet.nrf sniffmskb
        Sniffs Microsoft Keyboard traffic.

goodfet.nrf sniffmacs 
        Sniffs for MAC addresses on the present channel.
goodfet.nrf sniffprom [0xaa|0x55]
        Sniffs promiscuously for a preamble of 0xAA or 0x55
goodfet.nrf autotune
        Searches for a valid destination address.

goodfet.nrf carrier [freq]
        Holds a carrier on [freq] Hz.
</pre></p>

<h2>Pinout</h2>
<p>
  <table border="1">
    <tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
    <tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
    <tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
    <tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
    <tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
    <tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
    <tr><td>CE</td>	<td>11</td><td>12</td>	<td>    </td></tr>
    <tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
  </table>
</p>

<h2>Examples</h2>

<h3>Turning Point Clicker</h3>

<p>The Turning
Point <a href="http://www.turningtechnologies.com/audienceresponseproducts/responseoptions/responsecards/responsecardrf/">ResponseCardRF</a>
series of audience response devices can be sniffed using 'goodfet.nrf
snifftp'.  See Travis Goodspeed's
article, <a href="http://travisgoodspeed.blogspot.com/2010/07/reversing-rf-clicker.html">Reversing
an RF Clicker</a>, for details of how the protocol was reverse
engineered.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4747156868/"
title="Turning Point Clicker by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4079/4747156868_867d3e6c09.jpg"
width="500" height="375" alt="Turning Point Clicker" /></a></p>

<h3>OpenBeacon</h3>

<p>The <a href="http://www.openbeacon.org/">OpenBeacon</a>
and <a href="http://amd.hope.net/">OpenAMD</a> projects use Nordic
radios to track the positions of conference and museum attendees.
These can be sniffed with 'goodfet.nrf sniffob', but packets will be
encrypted with XXTEA by all deployments except the Next Hope, where
cryptography was disabled to facilitate badge hacking.</p>

<p>Additionally, the <a href="/hardware/nhb12/">NHB12</a> and NHB12B
badges from the <a href="http://thenexthope.org/">Next Hope</a> can be
flashed with the GoodFET firmware to run this application.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4746123271/"
title="NHBadge by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4093/4746123271_7888160588.jpg"
width="500" height="375" alt="NHBadge" /></a></p>

<h3>Sparkfun Fob</h3>

<p>A mode also exists to sniff the example firmware of
Sparkfun's <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=8602">WRL-08602
Nordic FOB</a> by 'goodfet.nrf sniffsf'.</p>

<h3>Microsoft 2.4GHz Keyboard</h3>

<p>Many Microsoft wireless keyboards use their MAC address as an XOR
key, allowing packets to be easily intercepted and deciphered.  A
sniffer for this protocol was first implemented in
the <a href="http://www.remote-exploit.org/?p=437">KerKeriki V2.0</a>
project, and the GoodFET is now able to sniff this traffic as well.
For more details,
see <a href="http://travisgoodspeed.blogspot.com/2011/02/promiscuity-is-nrf24l01s-duty.html">Promiscuity
is the nRF24L01+'s Duty</a>.
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5416657948/"
title="NHBadge Key Sniffer by Travis Goodspeed, on
Flickr"><img src="http://farm6.static.flickr.com/5052/5416657948_8fe0b0b4c6.jpg"
width="289" height="500" alt="NHBadge Key Sniffer" /></a>;"U#<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.nrf</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.nrf</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: goodfet.nrf verb [objects]

goodfet.nrf info
goodfet.nrf test
goodfet.nrf regs
goodfet.nrf regbits
goodfet.nrf pyregs

goodfet.nrf tune aa|55,mac,r5,r6
        Tunes to a configuration.
goodfet.nrf sniff
        Sniffs packets by current config.
goodfet.nrf sniffob
        Sniffs OpenBeacon traffic.
goodfet.nrf snifftp
        Sniffs Turning Point Clicker traffic.
goodfet.nrf sniffsf
        Sniffs SparkFun Dongle traffic.
goodfet.nrf sniffmskb
        Sniffs Microsoft Keyboard traffic.

goodfet.nrf sniffmacs 
        Sniffs for MAC addresses on the present channel.
goodfet.nrf sniffprom [0xaa|0x55]
        Sniffs promiscuously for a preamble of 0xAA or 0x55
goodfet.nrf autotune
        Searches for a valid destination address.

goodfet.nrf carrier [freq]
        Holds a carrier on [freq] Hz.
</pre></p>

<h2>Pinout</h2>
<p>
  <table border="1">
    <tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
    <tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
    <tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
    <tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
    <tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
    <tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
    <tr><td>CE</td>	<td>11</td><td>12</td>	<td>    </td></tr>
    <tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
  </table>
</p>

<h2>Examples</h2>

<h3>Turning Point Clicker</h3>

<p>The Turning
Point <a href="http://www.turningtechnologies.com/audienceresponseproducts/responseoptions/responsecards/responsecardrf/">ResponseCardRF</a>
series of audience response devices can be sniffed using 'goodfet.nrf
snifftp'.  See Travis Goodspeed's
article, <a href="http://travisgoodspeed.blogspot.com/2010/07/reversing-rf-clicker.html">Reversing
an RF Clicker</a>, for details of how the protocol was reverse
engineered.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4747156868/"
title="Turning Point Clicker by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4079/4747156868_867d3e6c09.jpg"
width="500" height="375" alt="Turning Point Clicker" /></a></p>

<h3>OpenBeacon</h3>

<p>The <a href="http://www.openbeacon.org/">OpenBeacon</a>
and <a href="http://amd.hope.net/">OpenAMD</a> projects use Nordic
radios to track the positions of conference and museum attendees.
These can be sniffed with 'goodfet.nrf sniffob', but packets will be
encrypted with XXTEA by all deployments except the Next Hope, where
cryptography was disabled to facilitate badge hacking.</p>

<p>Additionally, the <a href="/hardware/nhb12/">NHB12</a> and NHB12B
badges from the <a href="http://thenexthope.org/">Next Hope</a> can be
flashed with the GoodFET firmware to run this application.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4746123271/"
title="NHBadge by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4093/4746123271_7888160588.jpg"
width="500" height="375" alt="NHBadge" /></a></p>

<h3>Sparkfun Fob</h3>

<p>A mode also exists to sniff the example firmware of
Sparkfun's <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=8602">WRL-08602
Nordic FOB</a> by 'goodfet.nrf sniffsf'.</p>

<h3>Microsoft 2.4GHz Keyboard</h3>

<p>Many Microsoft wireless keyboards use their MAC address as an XOR
key, allowing packets to be easily intercepted and deciphered.  A
sniffer for this protocol was first implemented in
the <a href="http://www.remote-exploit.org/?p=437">KerKeriki V2.0</a>
project, and the GoodFET is now able to sniff this traffic as well.
For more details,
see <a href="http://travisgoodspeed.blogspot.com/2011/02/promiscuity-is-nrf24l01s-duty.html">Promiscuity
is the nRF24L01+'s Duty</a>.
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5416657948/"
title="NHBadge Key Sniffer by Travis Goodspeed, on
Flickr"><img src="http://farm6.static.flickr.com/5052/5416657948_8fe0b0b4c6.jpg"
width="289" height="500" alt="NHBadge Key Sniffer" /></a>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@ð;
"ù<h1>goodfet.nrf</h1>

<p></p>

<h2>Client</h2>
<p><pre>Usage: goodfet.nrf verb [objects]

goodfet.nrf info
goodfet.nrf test
goodfet.nrf regs
goodfet.nrf regbits
goodfet.nrf pyregs

goodfet.nrf tune aa|55,mac,r5,r6
        Tunes to a configuration.
goodfet.nrf sniff
        Sniffs packets by current config.
goodfet.nrf sniffob
        Sniffs OpenBeacon traffic.
goodfet.nrf snifftp
        Sniffs Turning Point Clicker traffic.
goodfet.nrf sniffsf
        Sniffs SparkFun Dongle traffic.
goodfet.nrf sniffmskb
        Sniffs Microsoft Keyboard traffic.

goodfet.nrf sniffmacs 
        Sniffs for MAC addresses on the present channel.
goodfet.nrf sniffprom [0xaa|0x55]
        Sniffs promiscuously for a preamble of 0xAA or 0x55
goodfet.nrf autotune
        Searches for a valid destination address.

goodfet.nrf carrier [freq]
        Holds a carrier on [freq] Hz.
</pre></p>

<h2>Pinout</h2>
<p>
  <table border="1">
    <tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
    <tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
    <tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
    <tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
    <tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
    <tr><td>GND</td>	<td>9</td><td>10</td>	<td>	</td></tr>
    <tr><td>CE</td>	<td>11</td><td>12</td>	<td>    </td></tr>
    <tr><td></td>	<td>13</td><td>14</td>	<td>    </td></tr>
  </table>
</p>

<h2>Examples</h2>

<h3>Turning Point Clicker</h3>

<p>The Turning
Point <a href="http://www.turningtechnologies.com/audienceresponseproducts/responseoptions/responsecards/responsecardrf/">ResponseCardRF</a>
series of audience response devices can be sniffed using 'goodfet.nrf
snifftp'.  See Travis Goodspeed's
article, <a href="http://travisgoodspeed.blogspot.com/2010/07/reversing-rf-clicker.html">Reversing
an RF Clicker</a>, for details of how the protocol was reverse
engineered.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4747156868/"
title="Turning Point Clicker by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4079/4747156868_867d3e6c09.jpg"
width="500" height="375" alt="Turning Point Clicker" /></a></p>

<h3>OpenBeacon</h3>

<p>The <a href="http://www.openbeacon.org/">OpenBeacon</a>
and <a href="http://amd.hope.net/">OpenAMD</a> projects use Nordic
radios to track the positions of conference and museum attendees.
These can be sniffed with 'goodfet.nrf sniffob', but packets will be
encrypted with XXTEA by all deployments except the Next Hope, where
cryptography was disabled to facilitate badge hacking.</p>

<p>Additionally, the <a href="/hardware/nhb12/">NHB12</a> and NHB12B
badges from the <a href="http://thenexthope.org/">Next Hope</a> can be
flashed with the GoodFET firmware to run this application.</p>

<p><a href="http://www.flickr.com/photos/travisgoodspeed/4746123271/"
title="NHBadge by Travis Goodspeed, on
Flickr"><img src="http://farm5.static.flickr.com/4093/4746123271_7888160588.jpg"
width="500" height="375" alt="NHBadge" /></a></p>

<h3>Sparkfun Fob</h3>

<p>A mode also exists to sniff the example firmware of
Sparkfun's <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=8602">WRL-08602
Nordic FOB</a> by 'goodfet.nrf sniffsf'.</p>

<h3>Microsoft 2.4GHz Keyboard</h3>

<p>Many Microsoft wireless keyboards use their MAC address as an XOR
key, allowing packets to be easily intercepted and deciphered.  A
sniffer for this protocol was first implemented in
the <a href="http://www.remote-exploit.org/?p=437">KerKeriki V2.0</a>
project, and the GoodFET is now able to sniff this traffic as well.
For more details,
see <a href="http://travisgoodspeed.blogspot.com/2011/02/promiscuity-is-nrf24l01s-duty.html">Promiscuity
is the nRF24L01+'s Duty</a>.
</p>

<a href="http://www.flickr.com/photos/travisgoodspeed/5416657948/"
title="NHBadge Key Sniffer by Travis Goodspeed, on
Flickr"><img src="http://farm6.static.flickr.com/5052/5416657948_8fe0b0b4c6.jpg"
width="289" height="500" alt="NHBadge Key Sniffer" /></a>"/apps/i2c/{;{	;"<h1>I2C Application</h1>

<p>This application allows for communication by I2C, the Inter-IC Bus.
Use the following pinout, which is similar to the JTAG pinout.</p>

<p>TODO, image goes here.</p>

<h2>Clients</h2>

<p>Please write one.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to the
I2C application to properly set the I/O directions and values.
The START (0x20), STOP (0x21), READ (0x00), and WRITE (0x01) verbs are used
for transactions, with WRITE returning the acknowledge bit.</p>

<p>Please note that I2C application has yet to be tested.  This should be
completed by June 17 at the latest.</p>;"ï<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Inter-IC Bus (I2C)</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>I2C Application</h1>

<p>This application allows for communication by I2C, the Inter-IC Bus.
Use the following pinout, which is similar to the JTAG pinout.</p>

<p>TODO, image goes here.</p>

<h2>Clients</h2>

<p>Please write one.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to the
I2C application to properly set the I/O directions and values.
The START (0x20), STOP (0x21), READ (0x00), and WRITE (0x01) verbs are used
for transactions, with WRITE returning the acknowledge bit.</p>

<p>Please note that I2C application has yet to be tested.  This should be
completed by June 17 at the latest.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@ö;
"<h1>I2C Application</h1>

<p>This application allows for communication by I2C, the Inter-IC Bus.
Use the following pinout, which is similar to the JTAG pinout.</p>

<p>TODO, image goes here.</p>

<h2>Clients</h2>

<p>Please write one.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to the
I2C application to properly set the I/O directions and values.
The START (0x20), STOP (0x21), READ (0x00), and WRITE (0x01) verbs are used
for transactions, with WRITE returning the acknowledge bit.</p>

<p>Please note that I2C application has yet to be tested.  This should be
completed by June 17 at the latest.</p>"/about/people/{;{	;"N<h1>Developers</h1>

<p>Among others, the GoodFET is developed by the following neighborly
people.  (This list is still being composed.)</p>

<p><ul>
  <li><a href="http://travisgoodspeed.blogspot.com/">Travis Goodspeed</a> (project lead)</li>
  <li><a href="https://sourceforge.net/users/dwhuseby">Dave Huseby</a></li>
  <li><a href="https://sourceforge.net/users/thequux">Dan Hirsch</a></li>
  <li><a href="https://sourceforge.net/users/ossmann">Michael Ossmann</a></li>
  <li><a href="http://scottman.net">Scott Livingston</a></li>
  <li><a href="http://www.inguardians.com/info/#Carpenter">Matthew Carpenter</a></li>
  <li><a href="http://www.theqlabs.com/">Andrew Q Righter</a></li>
  <li><a href="http://www.kismetwireless.net/">Mike Dragorn Kershaw</a></li>
  <li><a href="http://cs.dartmouth.edu/~rmspeers/">Ryan Speers</a></li>
</ul></p>;"¥<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- People</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Developers</h1>

<p>Among others, the GoodFET is developed by the following neighborly
people.  (This list is still being composed.)</p>

<p><ul>
  <li><a href="http://travisgoodspeed.blogspot.com/">Travis Goodspeed</a> (project lead)</li>
  <li><a href="https://sourceforge.net/users/dwhuseby">Dave Huseby</a></li>
  <li><a href="https://sourceforge.net/users/thequux">Dan Hirsch</a></li>
  <li><a href="https://sourceforge.net/users/ossmann">Michael Ossmann</a></li>
  <li><a href="http://scottman.net">Scott Livingston</a></li>
  <li><a href="http://www.inguardians.com/info/#Carpenter">Matthew Carpenter</a></li>
  <li><a href="http://www.theqlabs.com/">Andrew Q Righter</a></li>
  <li><a href="http://www.kismetwireless.net/">Mike Dragorn Kershaw</a></li>
  <li><a href="http://cs.dartmouth.edu/~rmspeers/">Ryan Speers</a></li>
</ul></p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@ü;
"N<h1>Developers</h1>

<p>Among others, the GoodFET is developed by the following neighborly
people.  (This list is still being composed.)</p>

<p><ul>
  <li><a href="http://travisgoodspeed.blogspot.com/">Travis Goodspeed</a> (project lead)</li>
  <li><a href="https://sourceforge.net/users/dwhuseby">Dave Huseby</a></li>
  <li><a href="https://sourceforge.net/users/thequux">Dan Hirsch</a></li>
  <li><a href="https://sourceforge.net/users/ossmann">Michael Ossmann</a></li>
  <li><a href="http://scottman.net">Scott Livingston</a></li>
  <li><a href="http://www.inguardians.com/info/#Carpenter">Matthew Carpenter</a></li>
  <li><a href="http://www.theqlabs.com/">Andrew Q Righter</a></li>
  <li><a href="http://www.kismetwireless.net/">Mike Dragorn Kershaw</a></li>
  <li><a href="http://cs.dartmouth.edu/~rmspeers/">Ryan Speers</a></li>
</ul></p>"/apps/monitor/{;{	;"B<h1>Monitor Application</h1>

<p>This application manages local memory, providing access to peripherals
and the GoodFET's global configuration.</p>

<h2>Clients</h2>

<p>All clients deal with the monitor in some way.</p>

<h2>Development</h2>

<p>The monitor provides access to the local memory of the GoodFET device,
and it ought to be used to debug the unit or poke pieces of memory directly.
Additionally, it might serve as a standalone bootloader with a few tweaks
to the IVT.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x30</td><td>CALL</td><td>Call Address</td></tr>
<tr><td>0x31</td><td>EXEC</td><td>Execute Arbitrary Code Fragment</td></tr>

<tr><td>0x80</td><td>CHANGE_BAUD</td><td>Change the baud rate.</td></tr>
<tr><td>0x81</td><td>ECHO</td><td>Echo the buffer back.</td></tr>
<tr><td>0x82</td><td>LIST_APPS</td><td>List the supported applications.</td></tr>
<tr><td>0x90</td><td>RAM_PATTERN</td><td>Suicide, filling RAM with a pattern.</td></tr>

<tr><td>0x91</td><td>RAM_DEPTH</td><td>Determine heap/stack depth.</td></tr>

<tr><td>0xA0</td><td>DIR</td><td>Set port direction bits.</td></tr>
<tr><td>0xA1</td><td>OUT</td><td>Set output value.</td></tr>
<tr><td>0xA2</td><td>IN</td><td>Get input value.</td></tr>

<tr><td>0xB0</td><td>SILENT</td><td>Set silence to byte[0]</td></tr>
<tr><td>0xB1</td><td>CONNECTED</td><td>Connection successful.</td></tr>

<tr><td>0xC0</td><td>READBUF</td><td>Dump buffer, takes 16-bit length.</td></tr>
<tr><td>0xC1</td><td>WRITEBUF</td><td>Set buffer, takes 16-bit length.</td></tr>
<tr><td>0xC2</td><td>SIZEBUF</td><td>Return buffer size.</td></tr>

<tr><td>0xFD</td><td>NOP</td><td>No operation.</td></tr>
<tr><td>0xFE</td><td>DEBUGHEX</td><td>Print a hex value.</td></tr>
<tr><td>0xFF</td><td>DEBUGSTRING</td><td>Debug a string.</td></tr>

</table>
</p>

<h3>READBUF (0xC0)</h3>

<p>This command takes a 16-bit, little-endian length as its
parameter, then spits out as many bytes from the beginning of the buffer.
The bytes come after the reply command, outside of the command stream.</p>

<h3>WRITEBUF (0xC1)</h3>

<p>This command takes a 16-bit, little-endian length as its parameter,
then reads as many bytes into the beginning of the buffer.  The bytes
come after the reply command, outside of the command stream.</p>

<h3>SIZEBUF (0xC2)</h3>

<p>This command returns the size of the monitor buffer.</p>


<h3>CHANGE_BAUD (0x80)</h3>

<p>The GoodFET defaults to 115200 baud, but alternate baud rates are
available by use of the CHANGE_BAUD (0x80) command of the Monitor
application.  This takes a single byte, which specifies the baud rate
as per the following table.</p>

<p><b>N.B.,</b> This command does not generate a reply.</p>

<p>
<table border="1">
<tr><th>Byte</th><th>Value</th></tr>
<tr><td>0x00</td><td>Default (115200)</tr>
<tr><td>0x01</td><td>9600</tr>
<tr><td>0x02</td><td>19200</tr>
<tr><td>0x03</td><td>38400</tr>
<tr><td>0x04</td><td>57600</tr>
<tr><td>0x05</td><td>115200</tr>
</table>
</p>

<h3>RAM_PATTERN (0x90)</h3>

<p>Fill all of RAM with 0xBEEF, then reset to begin the firmware from
the start.  Unless power is lost, this pattern will only be
overwritten by the firmware's use of RAM and the bootloader's caching
of write blocks.</p>

<p>The GoodFET will reboot after sending a reply.  It is recommended
that the client session reset as well.</p>

<h3>RAM_DEPTH (0x91)</h3>

<p>Measures the size of the 0xBEEF block in the middle of RAM,
calculating from that the amount of RAM which has been used by the
firmware.  Running RAM_PATTERN, then several test cases, followed by
RAM_DEPTH, will allow the RAM requirements of the application to be
accurately estimated.</p>

<p>See <a
href="http://travisgoodspeed.blogspot.com/2009/08/goodfets-msp430-stack-depth.html">
The GoodFET's MSP430 Stack Depth</a> for a description of this command
and its usefulness in measuring the RAM usage of a GoodFET.</p>;"#<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Monitor</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>Monitor Application</h1>

<p>This application manages local memory, providing access to peripherals
and the GoodFET's global configuration.</p>

<h2>Clients</h2>

<p>All clients deal with the monitor in some way.</p>

<h2>Development</h2>

<p>The monitor provides access to the local memory of the GoodFET device,
and it ought to be used to debug the unit or poke pieces of memory directly.
Additionally, it might serve as a standalone bootloader with a few tweaks
to the IVT.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x30</td><td>CALL</td><td>Call Address</td></tr>
<tr><td>0x31</td><td>EXEC</td><td>Execute Arbitrary Code Fragment</td></tr>

<tr><td>0x80</td><td>CHANGE_BAUD</td><td>Change the baud rate.</td></tr>
<tr><td>0x81</td><td>ECHO</td><td>Echo the buffer back.</td></tr>
<tr><td>0x82</td><td>LIST_APPS</td><td>List the supported applications.</td></tr>
<tr><td>0x90</td><td>RAM_PATTERN</td><td>Suicide, filling RAM with a pattern.</td></tr>

<tr><td>0x91</td><td>RAM_DEPTH</td><td>Determine heap/stack depth.</td></tr>

<tr><td>0xA0</td><td>DIR</td><td>Set port direction bits.</td></tr>
<tr><td>0xA1</td><td>OUT</td><td>Set output value.</td></tr>
<tr><td>0xA2</td><td>IN</td><td>Get input value.</td></tr>

<tr><td>0xB0</td><td>SILENT</td><td>Set silence to byte[0]</td></tr>
<tr><td>0xB1</td><td>CONNECTED</td><td>Connection successful.</td></tr>

<tr><td>0xC0</td><td>READBUF</td><td>Dump buffer, takes 16-bit length.</td></tr>
<tr><td>0xC1</td><td>WRITEBUF</td><td>Set buffer, takes 16-bit length.</td></tr>
<tr><td>0xC2</td><td>SIZEBUF</td><td>Return buffer size.</td></tr>

<tr><td>0xFD</td><td>NOP</td><td>No operation.</td></tr>
<tr><td>0xFE</td><td>DEBUGHEX</td><td>Print a hex value.</td></tr>
<tr><td>0xFF</td><td>DEBUGSTRING</td><td>Debug a string.</td></tr>

</table>
</p>

<h3>READBUF (0xC0)</h3>

<p>This command takes a 16-bit, little-endian length as its
parameter, then spits out as many bytes from the beginning of the buffer.
The bytes come after the reply command, outside of the command stream.</p>

<h3>WRITEBUF (0xC1)</h3>

<p>This command takes a 16-bit, little-endian length as its parameter,
then reads as many bytes into the beginning of the buffer.  The bytes
come after the reply command, outside of the command stream.</p>

<h3>SIZEBUF (0xC2)</h3>

<p>This command returns the size of the monitor buffer.</p>


<h3>CHANGE_BAUD (0x80)</h3>

<p>The GoodFET defaults to 115200 baud, but alternate baud rates are
available by use of the CHANGE_BAUD (0x80) command of the Monitor
application.  This takes a single byte, which specifies the baud rate
as per the following table.</p>

<p><b>N.B.,</b> This command does not generate a reply.</p>

<p>
<table border="1">
<tr><th>Byte</th><th>Value</th></tr>
<tr><td>0x00</td><td>Default (115200)</tr>
<tr><td>0x01</td><td>9600</tr>
<tr><td>0x02</td><td>19200</tr>
<tr><td>0x03</td><td>38400</tr>
<tr><td>0x04</td><td>57600</tr>
<tr><td>0x05</td><td>115200</tr>
</table>
</p>

<h3>RAM_PATTERN (0x90)</h3>

<p>Fill all of RAM with 0xBEEF, then reset to begin the firmware from
the start.  Unless power is lost, this pattern will only be
overwritten by the firmware's use of RAM and the bootloader's caching
of write blocks.</p>

<p>The GoodFET will reboot after sending a reply.  It is recommended
that the client session reset as well.</p>

<h3>RAM_DEPTH (0x91)</h3>

<p>Measures the size of the 0xBEEF block in the middle of RAM,
calculating from that the amount of RAM which has been used by the
firmware.  Running RAM_PATTERN, then several test cases, followed by
RAM_DEPTH, will allow the RAM requirements of the application to be
accurately estimated.</p>

<p>See <a
href="http://travisgoodspeed.blogspot.com/2009/08/goodfets-msp430-stack-depth.html">
The GoodFET's MSP430 Stack Depth</a> for a description of this command
and its usefulness in measuring the RAM usage of a GoodFET.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"B<h1>Monitor Application</h1>

<p>This application manages local memory, providing access to peripherals
and the GoodFET's global configuration.</p>

<h2>Clients</h2>

<p>All clients deal with the monitor in some way.</p>

<h2>Development</h2>

<p>The monitor provides access to the local memory of the GoodFET device,
and it ought to be used to debug the unit or poke pieces of memory directly.
Additionally, it might serve as a standalone bootloader with a few tweaks
to the IVT.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<p>
<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x30</td><td>CALL</td><td>Call Address</td></tr>
<tr><td>0x31</td><td>EXEC</td><td>Execute Arbitrary Code Fragment</td></tr>

<tr><td>0x80</td><td>CHANGE_BAUD</td><td>Change the baud rate.</td></tr>
<tr><td>0x81</td><td>ECHO</td><td>Echo the buffer back.</td></tr>
<tr><td>0x82</td><td>LIST_APPS</td><td>List the supported applications.</td></tr>
<tr><td>0x90</td><td>RAM_PATTERN</td><td>Suicide, filling RAM with a pattern.</td></tr>

<tr><td>0x91</td><td>RAM_DEPTH</td><td>Determine heap/stack depth.</td></tr>

<tr><td>0xA0</td><td>DIR</td><td>Set port direction bits.</td></tr>
<tr><td>0xA1</td><td>OUT</td><td>Set output value.</td></tr>
<tr><td>0xA2</td><td>IN</td><td>Get input value.</td></tr>

<tr><td>0xB0</td><td>SILENT</td><td>Set silence to byte[0]</td></tr>
<tr><td>0xB1</td><td>CONNECTED</td><td>Connection successful.</td></tr>

<tr><td>0xC0</td><td>READBUF</td><td>Dump buffer, takes 16-bit length.</td></tr>
<tr><td>0xC1</td><td>WRITEBUF</td><td>Set buffer, takes 16-bit length.</td></tr>
<tr><td>0xC2</td><td>SIZEBUF</td><td>Return buffer size.</td></tr>

<tr><td>0xFD</td><td>NOP</td><td>No operation.</td></tr>
<tr><td>0xFE</td><td>DEBUGHEX</td><td>Print a hex value.</td></tr>
<tr><td>0xFF</td><td>DEBUGSTRING</td><td>Debug a string.</td></tr>

</table>
</p>

<h3>READBUF (0xC0)</h3>

<p>This command takes a 16-bit, little-endian length as its
parameter, then spits out as many bytes from the beginning of the buffer.
The bytes come after the reply command, outside of the command stream.</p>

<h3>WRITEBUF (0xC1)</h3>

<p>This command takes a 16-bit, little-endian length as its parameter,
then reads as many bytes into the beginning of the buffer.  The bytes
come after the reply command, outside of the command stream.</p>

<h3>SIZEBUF (0xC2)</h3>

<p>This command returns the size of the monitor buffer.</p>


<h3>CHANGE_BAUD (0x80)</h3>

<p>The GoodFET defaults to 115200 baud, but alternate baud rates are
available by use of the CHANGE_BAUD (0x80) command of the Monitor
application.  This takes a single byte, which specifies the baud rate
as per the following table.</p>

<p><b>N.B.,</b> This command does not generate a reply.</p>

<p>
<table border="1">
<tr><th>Byte</th><th>Value</th></tr>
<tr><td>0x00</td><td>Default (115200)</tr>
<tr><td>0x01</td><td>9600</tr>
<tr><td>0x02</td><td>19200</tr>
<tr><td>0x03</td><td>38400</tr>
<tr><td>0x04</td><td>57600</tr>
<tr><td>0x05</td><td>115200</tr>
</table>
</p>

<h3>RAM_PATTERN (0x90)</h3>

<p>Fill all of RAM with 0xBEEF, then reset to begin the firmware from
the start.  Unless power is lost, this pattern will only be
overwritten by the firmware's use of RAM and the bootloader's caching
of write blocks.</p>

<p>The GoodFET will reboot after sending a reply.  It is recommended
that the client session reset as well.</p>

<h3>RAM_DEPTH (0x91)</h3>

<p>Measures the size of the 0xBEEF block in the middle of RAM,
calculating from that the amount of RAM which has been used by the
firmware.  Running RAM_PATTERN, then several test cases, followed by
RAM_DEPTH, will allow the RAM requirements of the application to be
accurately estimated.</p>

<p>See <a
href="http://travisgoodspeed.blogspot.com/2009/08/goodfets-msp430-stack-depth.html">
The GoodFET's MSP430 Stack Depth</a> for a description of this command
and its usefulness in measuring the RAM usage of a GoodFET.</p>"/apps/avr/{;{	;"*
<h1>AVR Application</h1>

<p>This application is used for programming and debugging the Atmel
AVR series of microcontrollers by the serial interface.</p>

<p>This pinout differs significantly from the Atmel 6-pin
and 10-pin pinouts, but an adapter board is available.</p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>

<!--
<p><a href="http://www.flickr.com/photos/travisgoodspeed/4074539820/"
title="GFAVR10 AVR Adapter by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2690/4074539820_3db9f21cdd.jpg"
width="500" height="324" alt="GFAVR10 AVR Adapter" /></a></p>
-->

<h2>Clients</h2>

<p>A simple client in python is available as
'<a href="/clients/goodfet.avr/">goodfet.avr</a>'.</p>

<h2>Status</h2>

<p>This is a new port, and it is not yet ready for daily use.  Reading
of chips is stabilized, as is the writing of EEPROM, but the writing
of Flash memory pages is not yet stabilized.</p>

<h2>Verbs</h2>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0].</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Take the device under control.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Release the device.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>PEEKPGM</td><td></td></tr>
<tr><td>0x81</td><td>PEEKEEPROM</td><td></td></tr>
<tr><td>0x82</td><td>PEEKLOCK</td><td></td></tr>
<tr><td>0x83</td><td>PEEKSIG</td><td></td></tr>
<tr><td>0x84</td><td>READFUSES</td><td></td></tr>
<tr><td>0x85</td><td>READCAL</td><td></td></tr>
<tr><td>0x86</td><td>BULKLOAD</td><td>Load an entire page to be flashed. Significantly reduces USB latency</td></tr>
<tr><td>0x91</td><td>POKEEEPROM</td><td></td></tr>
<tr><td>0x92</td><td>POKELOCK</td><td></td></tr>

<tr><td>0xF0</td><td>ERASE</td><td>Chip Erase (Flash+EEPROM)</td></tr>
<tr><td>0xF1</td><td>RDYBSY</td><td>Ready/!Busy</td></tr>
</table>;"~<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- AVR</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>AVR Application</h1>

<p>This application is used for programming and debugging the Atmel
AVR series of microcontrollers by the serial interface.</p>

<p>This pinout differs significantly from the Atmel 6-pin
and 10-pin pinouts, but an adapter board is available.</p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>

<!--
<p><a href="http://www.flickr.com/photos/travisgoodspeed/4074539820/"
title="GFAVR10 AVR Adapter by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2690/4074539820_3db9f21cdd.jpg"
width="500" height="324" alt="GFAVR10 AVR Adapter" /></a></p>
-->

<h2>Clients</h2>

<p>A simple client in python is available as
'<a href="/clients/goodfet.avr/">goodfet.avr</a>'.</p>

<h2>Status</h2>

<p>This is a new port, and it is not yet ready for daily use.  Reading
of chips is stabilized, as is the writing of EEPROM, but the writing
of Flash memory pages is not yet stabilized.</p>

<h2>Verbs</h2>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0].</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Take the device under control.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Release the device.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>PEEKPGM</td><td></td></tr>
<tr><td>0x81</td><td>PEEKEEPROM</td><td></td></tr>
<tr><td>0x82</td><td>PEEKLOCK</td><td></td></tr>
<tr><td>0x83</td><td>PEEKSIG</td><td></td></tr>
<tr><td>0x84</td><td>READFUSES</td><td></td></tr>
<tr><td>0x85</td><td>READCAL</td><td></td></tr>
<tr><td>0x86</td><td>BULKLOAD</td><td>Load an entire page to be flashed. Significantly reduces USB latency</td></tr>
<tr><td>0x91</td><td>POKEEEPROM</td><td></td></tr>
<tr><td>0x92</td><td>POKELOCK</td><td></td></tr>

<tr><td>0xF0</td><td>ERASE</td><td>Chip Erase (Flash+EEPROM)</td></tr>
<tr><td>0xF1</td><td>RDYBSY</td><td>Ready/!Busy</td></tr>
</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"*
<h1>AVR Application</h1>

<p>This application is used for programming and debugging the Atmel
AVR series of microcontrollers by the serial interface.</p>

<p>This pinout differs significantly from the Atmel 6-pin
and 10-pin pinouts, but an adapter board is available.</p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>MISO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>MOSI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>SS</td>	<td>5</td><td>6</td>	<td>	</td></tr>
		<tr><td>SCK</td>	<td>7</td><td>8</td>	<td></td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td></td>	<td>11</td><td>12</td>	<td></td></tr>
		<tr><td></td>	<td>13</td><td>14</td>	<td></td></tr>
	</table>
</p>

<!--
<p><a href="http://www.flickr.com/photos/travisgoodspeed/4074539820/"
title="GFAVR10 AVR Adapter by Travis Goodspeed, on
Flickr"><img src="http://farm3.static.flickr.com/2690/4074539820_3db9f21cdd.jpg"
width="500" height="324" alt="GFAVR10 AVR Adapter" /></a></p>
-->

<h2>Clients</h2>

<p>A simple client in python is available as
'<a href="/clients/goodfet.avr/">goodfet.avr</a>'.</p>

<h2>Status</h2>

<p>This is a new port, and it is not yet ready for daily use.  Reading
of chips is stabilized, as is the writing of EEPROM, but the writing
of Flash memory pages is not yet stabilized.</p>

<h2>Verbs</h2>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0].</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Take the device under control.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Release the device.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>PEEKPGM</td><td></td></tr>
<tr><td>0x81</td><td>PEEKEEPROM</td><td></td></tr>
<tr><td>0x82</td><td>PEEKLOCK</td><td></td></tr>
<tr><td>0x83</td><td>PEEKSIG</td><td></td></tr>
<tr><td>0x84</td><td>READFUSES</td><td></td></tr>
<tr><td>0x85</td><td>READCAL</td><td></td></tr>
<tr><td>0x86</td><td>BULKLOAD</td><td>Load an entire page to be flashed. Significantly reduces USB latency</td></tr>
<tr><td>0x91</td><td>POKEEEPROM</td><td></td></tr>
<tr><td>0x92</td><td>POKELOCK</td><td></td></tr>

<tr><td>0xF0</td><td>ERASE</td><td>Chip Erase (Flash+EEPROM)</td></tr>
<tr><td>0xF1</td><td>RDYBSY</td><td>Ready/!Busy</td></tr>
</table>"/apps/jtag430/{;{	;" <h1>JTAG430 Application</h1>

<p>This application is used for programming and debugging the MSP430
microcontroller families from Texas Instruments.</p>

<p>The pinout is standard for the MSP430 FET.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.msp430'.</p>

<h2>Status</h2>

<p>At presentl, only 4-wire JTAG of 16-bit MSP430 chips is supported.
Support for Spy-Bi-Wire, MSP430X, and MSP430X2 is on the way.  Flash
memory routines are functional.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to
the JTAG application to properly set the I/O pin directions.  After
that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the TAP.  HALTCPU (0xA0) and RELEASECPU (0xA1) should be used to
stop the CPU during memory accesses, releasing afterward.</p>

<p>All reads and writes are word-sized (16-bit), except for those at
addresses beneath 0x100, which are performed as bytes.  IR_SHIFT and
DR_SHIFT are available for raw access to JTAG, but higher level
functions are also implemented for convenience and speed.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
<tr><td>0xE8</td><td>ERASEINFO</td><td>Info Erase</td></tr>

<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>

<p>WRITEMEM and WRITEFLASH read and return the written value.  Client implementations
should throw an error during programming if the returned value does not match the
written value.  Insufficient writes commonly leave 0xA100.</p>;"| <!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- MSP430 JTAG</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>JTAG430 Application</h1>

<p>This application is used for programming and debugging the MSP430
microcontroller families from Texas Instruments.</p>

<p>The pinout is standard for the MSP430 FET.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.msp430'.</p>

<h2>Status</h2>

<p>At presentl, only 4-wire JTAG of 16-bit MSP430 chips is supported.
Support for Spy-Bi-Wire, MSP430X, and MSP430X2 is on the way.  Flash
memory routines are functional.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to
the JTAG application to properly set the I/O pin directions.  After
that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the TAP.  HALTCPU (0xA0) and RELEASECPU (0xA1) should be used to
stop the CPU during memory accesses, releasing afterward.</p>

<p>All reads and writes are word-sized (16-bit), except for those at
addresses beneath 0x100, which are performed as bytes.  IR_SHIFT and
DR_SHIFT are available for raw access to JTAG, but higher level
functions are also implemented for convenience and speed.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
<tr><td>0xE8</td><td>ERASEINFO</td><td>Info Erase</td></tr>

<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>

<p>WRITEMEM and WRITEFLASH read and return the written value.  Client implementations
should throw an error during programming if the returned value does not match the
written value.  Insufficient writes commonly leave 0xA100.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
" <h1>JTAG430 Application</h1>

<p>This application is used for programming and debugging the MSP430
microcontroller families from Texas Instruments.</p>

<p>The pinout is standard for the MSP430 FET.</p>

<h2>Clients</h2>

<p>A simple client in Python is available in svn as `goodfet.msp430'.</p>

<h2>Status</h2>

<p>At presentl, only 4-wire JTAG of 16-bit MSP430 chips is supported.
Support for Spy-Bi-Wire, MSP430X, and MSP430X2 is on the way.  Flash
memory routines are functional.</p>

<h2>Development</h2>

<p>Prior to any transaction, the SETUP (0x10) verb should be sent to
the JTAG application to properly set the I/O pin directions.  After
that, the START (0x20) and STOP (0x21) verbs may be used to enter and
exit the TAP.  HALTCPU (0xA0) and RELEASECPU (0xA1) should be used to
stop the CPU during memory accesses, releasing afterward.</p>

<p>All reads and writes are word-sized (16-bit), except for those at
addresses beneath 0x100, which are performed as bytes.  IR_SHIFT and
DR_SHIFT are available for raw access to JTAG, but higher level
functions are also implemented for convenience and speed.</p>

<h2>Verbs</h2>

<p>The following verbs are supported.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
<tr><td>0xE8</td><td>ERASEINFO</td><td>Info Erase</td></tr>

<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>

<p>WRITEMEM and WRITEFLASH read and return the written value.  Client implementations
should throw an error during programming if the returned value does not match the
written value.  Insufficient writes commonly leave 0xA100.</p>"/apps/jtagarm7tdmi/{;{	;"¶<h1>JTAGARM7TDMI Application</h1>

<p>This is standing material.  The real documentation is coming, as soon as someone
edits jtagarm7tdmi in web/gfweb/content/.</p>

<h2>Clients</h2>


<h2>Status</h2>

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.  (Not really.  This is a standin
list from the MSP430.)</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>;"<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- ARM7TDMI JTAG</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>JTAGARM7TDMI Application</h1>

<p>This is standing material.  The real documentation is coming, as soon as someone
edits jtagarm7tdmi in web/gfweb/content/.</p>

<h2>Clients</h2>


<h2>Status</h2>

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.  (Not really.  This is a standin
list from the MSP430.)</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"¶<h1>JTAGARM7TDMI Application</h1>

<p>This is standing material.  The real documentation is coming, as soon as someone
edits jtagarm7tdmi in web/gfweb/content/.</p>

<h2>Clients</h2>


<h2>Status</h2>

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.  (Not really.  This is a standin
list from the MSP430.)</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read word from memory at word[0].</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write word[1] to memory at word[0]. (Not flash.)</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Begin to debug by JTAG.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>End JTAG debugging.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>

<tr><td>0x80</td><td>IR_SHIFT</td><td>Shift the IR.</td></tr>
<tr><td>0x81</td><td>DR_SHIFT</td><td>Shift the DR.</td></tr>
<tr><td>0x91</td><td>DR_SHIFT20</td><td>Shift 20 bits of DR.</td></tr>

<tr><td>0xA0</td><td>HALTCPU</td><td>Halt the CPU.</td></tr>
<tr><td>0xA1</td><td>RELEASECPU</td><td>Resume the CPU.</td></tr>

<!--<tr><td>0xC0</td><td>GETDEVICE</td><td></td></tr>-->
<tr><td>0xC1</td><td>SETINSTRFETCH</td><td>Set CPU to Instruction Fetch state.</td></tr>
<tr><td>0xC2</td><td>SETPC</td><td>Set the Program Counter.</td></tr>
<!--<tr><td>0xC3</td><td>EXECUTEPOR</td><td></td></tr>
<tr><td>0xC4</td><td>RELEASEDEVICE</td><td></td></tr>-->

<tr><td>0xD2</td><td>GETREG</td><td>Read register u8[0].</td></tr>
<tr><td>0xD3</td><td>SETREG</td><td>Write u16[1] to register u8[0].</td></tr>

<tr><td>0xE0</td><td>WRITEMEM</td><td>Alias for POKE.</td></tr>
<tr><td>0xE1</td><td>WRITEFLASH</td><td>Write a word of flash memory.</td></tr>
<tr><td>0xE2</td><td>READMEM</td><td>Alias for PEEK.</td></tr>
<tr><td>0xE3</td><td>ERASEFLASH</td><td>Mass Erase</td></tr>
<!--
<tr><td>0xE4</td><td>ERASECHECK</td><td></td></tr>
<tr><td>0xE5</td><td>VERIFYMEM</td><td></td></tr>
<tr><td>0xE6</td><td>BLOWFUSE</td><td></td></tr>
<tr><td>0xE7</td><td>ISFUSEBLOWN</td><td></td></tr>
-->

<tr><td>0xF0</td><td>COREIP_ID</td><td></td></tr>
<tr><td>0xF1</td><td>DEVICE_ID</td><td></td></tr>

</table>"/stylesheet/{;{;"* {
  margin: 0;
  padding: 0;

  font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
}

body {
  background: #fff;
}

a {
  text-decoration: none;
}

a:link,
a:visited {
  color: #f30;
}

a:hover {
  color: #f90;
}

#main {
  position: absolute;

  top: 40px;
  left: 280px;

  width: 500px;
}

#main h1 {
  font-size: 40px;
  font-weight: normal;

  line-height: 40px;

  letter-spacing: -1px;
}

#main p {
  margin: 20px 0;
  
  font-size: 15px;
  
  line-height: 20px;
}

#main ul, #main ol {
  margin: 20px;
}

#main li {
  font-size: 15px;
  
  line-height: 20px;
}

#main ul li {
  list-style-type: square;
}

#sidebar {
  position: absolute;

  top: 40px;
  left: 20px;
  width: 200px;

  padding: 20px 20px 0 0;

  border-right: 1px solid #ccc;

  text-align: right;
}

#sidebar h2 {
  text-transform: uppercase;

  font-size: 13px;

  color: #333;

  letter-spacing: 1px;

  line-height: 20px;
}

#sidebar ul {
  list-style-type: none;

  margin: 20px 0;
}

#sidebar li {
  font-size: 14px;

  line-height: 20px;
}
;	@;
@"/apps/nrf/{;{	;"û<h1>NRF Application</h1>

<p>This application is for use by the Nordic RF radios, such as the
NRF24L01+.</p>

<!-- Photo goes here.
-->



<h2>Clients</h2>

<p>A Python client, <a href="/clients/goodfet.nrf/">goodfet.nrf</a>,
is in the works, but nothing is stable yet.

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read a register.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write a register</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start listening.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop listening.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>


<tr><td>0x80</td><td>RX</td><td>Receive a packet.</td></tr>
<tr><td>0x81</td><td>TX</td><td>Transmit a packet.</td></tr>
<tr><td>0x82</td><td>RX_FLUSH</td><td>Flush RX buffer.</td></tr>
<tr><td>0x83</td><td>TX_FLUSH</td><td>Flush TX buffer.</td></tr>


</table>;"U<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- Nordic RF</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>NRF Application</h1>

<p>This application is for use by the Nordic RF radios, such as the
NRF24L01+.</p>

<!-- Photo goes here.
-->



<h2>Clients</h2>

<p>A Python client, <a href="/clients/goodfet.nrf/">goodfet.nrf</a>,
is in the works, but nothing is stable yet.

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read a register.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write a register</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start listening.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop listening.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>


<tr><td>0x80</td><td>RX</td><td>Receive a packet.</td></tr>
<tr><td>0x81</td><td>TX</td><td>Transmit a packet.</td></tr>
<tr><td>0x82</td><td>RX_FLUSH</td><td>Flush RX buffer.</td></tr>
<tr><td>0x83</td><td>TX_FLUSH</td><td>Flush TX buffer.</td></tr>


</table>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@;
"û<h1>NRF Application</h1>

<p>This application is for use by the Nordic RF radios, such as the
NRF24L01+.</p>

<!-- Photo goes here.
-->



<h2>Clients</h2>

<p>A Python client, <a href="/clients/goodfet.nrf/">goodfet.nrf</a>,
is in the works, but nothing is stable yet.

<h2>Development</h2>

<h2>Verbs</h2>

<p>The following verbs are supported.  The Write-Enable command is implied
by those that write flash memory, such as POKE and SPI_ERASE.</p>

<table border="1">
<tr><th>Hex</th><th>#define</th><th>Description</th></tr>
<tr><td>0x00</td><td>READ</td><td>Exchange data.</td></tr>
<tr><td>0x01</td><td>WRITE</td><td>Exchange data.</td></tr>
<tr><td>0x02</td><td>PEEK</td><td>Read a register.</td></tr>
<tr><td>0x03</td><td>POKE</td><td>Write a register</td></tr>
<tr><td>0x10</td><td>SETUP</td><td>Configure I/O pins.</td></tr>
<tr><td>0x20</td><td>START</td><td>Start listening.</td></tr>
<tr><td>0x21</td><td>STOP</td><td>Stop listening.</td></tr>
<tr><td>0x7E</td><td>NOK</td><td>No Operation</td></tr>


<tr><td>0x80</td><td>RX</td><td>Receive a packet.</td></tr>
<tr><td>0x81</td><td>TX</td><td>Transmit a packet.</td></tr>
<tr><td>0x82</td><td>RX_FLUSH</td><td>Flush RX buffer.</td></tr>
<tr><td>0x83</td><td>TX_FLUSH</td><td>Flush TX buffer.</td></tr>


</table>"/clients/goodfetmsp430/{;{	;"g<h1>goodfet.msp430</h1>

<p>The msp430 client is used to operate on JTAG enabled MSP430 devices
and allows them to flashed, dumped and erased.</p>

<h2>Client</h2>
<p><pre>Usage: goodfet.msp430 verb [objects]

goodfet.msp430 test
goodfet.msp430 dump $foo.hex [0x$start 0x$stop]
goodfet.msp430 erase
goodfet.msp430 flash $foo.hex [0x$start 0x$stop]
goodfet.msp430 verify $foo.hex [0x$start 0x$stop]
goodfet.msp430 poke 0x$adr 0x$val
goodfet.msp430 peek 0x$start [0x$stop]
goodfet.msp430 run
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>TDO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>TDI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>TMS</td>	<td>5</td><td>6</td>	<td></td></tr>
		<tr><td>TCK</td>	<td>7</td><td>8</td>	<td>TEST</td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td>RST</td>	<td>11</td><td>12</td>	<td>    </td></tr>
		<tr><td>   </td>	<td>13</td><td>14</td>	<td>    </td></tr>
	</table>
</p>
<p>Pinout is the same as used by Texas Instruments JTAG pinout and a ribbon cable may be used to connect to target boards with no modifications.</p>

<h2>Notes</h2>

<p>The GoodFET only supports 16-bit MSP430 chips at this time.
Support for 20-bit MSP430X and MSP430X2 chips will come soon.</p>;"Æ<!DOCTYPE HTML> 

<html>
  <head>
    <title>GoodFET -- goodfet.msp430</title>
    <style type="text/css" media="screen">
      * {
        margin: 0;
        padding: 0;
      
        font-family: Georgia, Palatino, Times, 'Times New Roman', sans-serif;
      }
      
      body {
        background: #fff;
      }
      
      a {
        text-decoration: none;
      }
      
      a:link,
      a:visited {
        color: #f30;
      }
      
      a:hover {
        color: #f90;
      }
      
      #main {
        position: absolute;
      
        top: 20px;
        left: 280px;
      
        width: 500px;
      }
      
      #main h1 {
        font-size: 40px;
        font-weight: normal;
      
        line-height: 40px;
      
        padding: 20px 0 20px 0;
      
        letter-spacing: -1px;
      }
      
      #main p {
        margin: 0 0 20px 0;
        
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #main ul {
        padding: 0 0 0 20px;
      }
      
      #main li {
        margin: 0 0 20px 0;
      
        list-style-type: square;
      
        font-size: 15px;
        
        line-height: 20px;
      }
      
      #sidebar {
        position: absolute;
      
        top: 40px;
        left: 20px;
        width: 200px;
      
        padding: 20px 20px 0 0;
      
        border-right: 1px solid #ccc;
      
        text-align: right;
      }
      
      #sidebar h2 {
        text-transform: uppercase;
      
        font-size: 13px;
      
        color: #333;
      
        letter-spacing: 1px;
      
        line-height: 20px;
      }
      
      #sidebar ul {
        list-style-type: none;
      
        margin: 20px 0;
      }
      
      #sidebar li {
        font-size: 14px;
      
        line-height: 20px;
      }
    </style>
  </head>
  <body>
    <div id="main">
      <h1>goodfet.msp430</h1>

<p>The msp430 client is used to operate on JTAG enabled MSP430 devices
and allows them to flashed, dumped and erased.</p>

<h2>Client</h2>
<p><pre>Usage: goodfet.msp430 verb [objects]

goodfet.msp430 test
goodfet.msp430 dump $foo.hex [0x$start 0x$stop]
goodfet.msp430 erase
goodfet.msp430 flash $foo.hex [0x$start 0x$stop]
goodfet.msp430 verify $foo.hex [0x$start 0x$stop]
goodfet.msp430 poke 0x$adr 0x$val
goodfet.msp430 peek 0x$start [0x$stop]
goodfet.msp430 run
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>TDO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>TDI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>TMS</td>	<td>5</td><td>6</td>	<td></td></tr>
		<tr><td>TCK</td>	<td>7</td><td>8</td>	<td>TEST</td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td>RST</td>	<td>11</td><td>12</td>	<td>    </td></tr>
		<tr><td>   </td>	<td>13</td><td>14</td>	<td>    </td></tr>
	</table>
</p>
<p>Pinout is the same as used by Texas Instruments JTAG pinout and a ribbon cable may be used to connect to target boards with no modifications.</p>

<h2>Notes</h2>

<p>The GoodFET only supports 16-bit MSP430 chips at this time.
Support for 20-bit MSP430X and MSP430X2 chips will come soon.</p>
    </div>
    <div id="sidebar">
      <h2>About</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="/about/status/">Status</a></li>
	<li><a href="/about/download/">Download</a></li>
	<li><a href="/about/support/">Support</a></li>
	<li><a href="/orders/">Ordering</a></li>
        <li><a href="/about/people/">Maintainers</a></li>
      </ul>
      <h2>SourceForge</h2>
      <ul>
	<li><a href="/">Home</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/develop/">Develop</a></li>
	<li><a href="https://sourceforge.net/projects/goodfet/files">Files</a></li>
	<li><a href="https://sourceforge.net/project/admin/explorer.php?group_id=259447">File Admin</a></li>
	<li><a href="https://lists.sourceforge.net/lists/listinfo/goodfet-devel">GoodFET-devel List</a></li>
      </ul>
      
      <h2>Documentation</h2>
      <ul>
        <li><a href="/construction/">Construction</a></li>
	<li><a href="/tutorial/">Tutorial</a></li>
	<li><a href="/faq/">FAQ</a></li>
      </ul>
      <h2>Clients</h2>
      <ul>
	<li><a href="/clients/goodfetmonitor/">Monitor</a></li>
	<li><a href="/clients/goodfetmsp430/">MSP430</a></li>
	<li><a href="/clients/goodfetspiflash/">SPI Flash</a></li>
	<li><a href="/clients/goodfetcc/">Chipcon 8051</a></li>
	<li><a href="/clients/goodfetccspi/">Chipcon SPI</a></li>
	<li><a href="/clients/goodfetnrf/">Nordic RF</a></li>
	<li><a href="/clients/goodfetavr/">AVR</a></li>
	<li><a href="/clients/goodfetpic/">PIC</a></li>
      </ul>
      <h2>Hardware</h2>
      <ul>
	<!--<li><a href="/hardware/goodfet50/">GoodFET50</a></li>-->
	<li><a href="/hardware/telosb/">TelosB/TMote</a></li>
	<li><a href="/hardware/goodfet41/">GoodFET41</a></li>
	<li><a href="/hardware/goodfet40/">GoodFET40</a></li>
	<li><a href="/hardware/nhb12/">NHBadge12 (B)</a></li>
        <li><a href="/hardware/goodfet31L/">GoodFET31L</a></li>
	<li><a href="/hardware/goodfet31/">GoodFET31</a></li>
	<li><a href="/hardware/goodfet22/">GoodFET22</a></li>
	<li><a href="/hardware/goodfet21/">GoodFET21</a></li>
	<li><a href="/hardware/goodfet30/">GoodFET30</a></li>
	<li><a href="/hardware/badfet20/">BadFET20</a></li>
	<li><a href="/hardware/goodfet20/">GoodFET20</a></li>
	<li><a href="/hardware/goodfet11/">GoodFET11</a></li>
        <li><a href="/hardware/goodfet10/">GoodFET10</a></li>
      </ul>
      <h2>Firmware</h2>
      <ul>
	<li><a href="/manual/">Protocol Manual</a></li><br />
	<li><a href="/apps/monitor/">Monitor</li>
	<li><a href="/apps/spi/">SPI</a></li>
	<li><a href="/apps/i2c/">I2C</a></li>
	<li><a href="/apps/jtag/">JTAG</a></li>
	<li><a href="/apps/jtag430/">JTAG430</a></li>
	<li><a href="/apps/ejtag/">EJTAG</a></li>
	<li><a href="/apps/jtagarm7tdmi/">JTAG ARM7TDMI</a></li>
	<li><a href="/apps/jtagxscale/">JTAG XScale</a></li>
	<li><a href="/apps/chipcon/">Chipcon 8051</a></li>
	<li><a href="/apps/ccspi/">Chipcon SPI</a></li>
	<li><a href="/apps/nrf/">Nordic RF</a></li>
	<li><a href="/apps/avr/">AVR</a></li>
	<li><a href="/apps/pic/">PIC</a></li>
	<li><a href="/apps/glitch/">GLITCH</a></li>
      </ul>
    </div>
  </body>
</html>
;	@$;
"g<h1>goodfet.msp430</h1>

<p>The msp430 client is used to operate on JTAG enabled MSP430 devices
and allows them to flashed, dumped and erased.</p>

<h2>Client</h2>
<p><pre>Usage: goodfet.msp430 verb [objects]

goodfet.msp430 test
goodfet.msp430 dump $foo.hex [0x$start 0x$stop]
goodfet.msp430 erase
goodfet.msp430 flash $foo.hex [0x$start 0x$stop]
goodfet.msp430 verify $foo.hex [0x$start 0x$stop]
goodfet.msp430 poke 0x$adr 0x$val
goodfet.msp430 peek 0x$start [0x$stop]
goodfet.msp430 run
</pre></p>

<h2>Pinout</h2>
<p>
	<table border="1">
		<tr><th style="width: 5em;">Name</th><th colspan="2" style="width: 3.5em;">Pin</th><th style="width: 5em;">Name</th></tr>
		<tr><td>TDO</td>	<td>1</td><td>2</td>	<td>Vcc</td></tr>
		<tr><td>TDI</td>	<td>3</td><td>4</td>	<td>Vcc</td></tr>
		<tr><td>TMS</td>	<td>5</td><td>6</td>	<td></td></tr>
		<tr><td>TCK</td>	<td>7</td><td>8</td>	<td>TEST</td></tr>
		<tr><td>GND</td>	<td>9</td><td>10</td>	<td></td></tr>
		<tr><td>RST</td>	<td>11</td><td>12</td>	<td>    </td></tr>
		<tr><td>   </td>	<td>13</td><td>14</td>	<td>    </td></tr>
	</table>
</p>
<p>Pinout is the same as used by Texas Instruments JTAG pinout and a ribbon cable may be used to connect to target boards with no modifications.</p>

<h2>Notes</h2>

<p>The GoodFET only supports 16-bit MSP430 chips at this time.
Support for 20-bit MSP430X and MSP430X2 chips will come soon.</p>:versioni