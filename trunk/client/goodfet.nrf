#!/usr/bin/env python

#GoodFET SPI Flash Client
#by Travis Goodspeed

import sys;
import binascii;
import array;
import time;

from GoodFETNRF import GoodFETNRF;
from intelhex import IntelHex;

def printpacket(packet):
    s="";
    i=0;
    for foo in packet:
        i=i+1;
        if i>client.packetlen: break;
        s="%s %02x" % (s,ord(foo));
    print "%s" %s;

def printconfig():
    print "SMAC  0x%010x" % client.RF_getsmac();
    print "TMAC  0x%010x" % client.RF_gettmac();
    print "Freq    %10i MHz" % (client.RF_getfreq()/10**6);
    print "PacketLen %02i bytes" % client.RF_getpacketlen();
    print "MacLen    %2i bytes" % client.RF_getmaclen();

if(len(sys.argv)==1):
    print "Usage: %s verb [objects]\n" % sys.argv[0];
    print "%s info" % sys.argv[0];
    print "%s test" % sys.argv[0];
    print "%s regs" % sys.argv[0];
    print "%s sniffob\n\tSniffs OpenBeacon traffic." % sys.argv[0];
    print "%s carrier [freq]\n\tHolds a carrier on [freq] Hz." % sys.argv[0];
    sys.exit();

#Initialize FET and set baud rate
client=GoodFETNRF();
client.serInit()

client.NRFsetup();

if(sys.argv[1]=="info"):
    printconfig();

if(sys.argv[1]=="test"):
    # Set PWR_UP=1 and PRIM_RX=0 in CONFIG.
    client.poke(0x00,2);
    #Delay of 1.5ms by round-trip.
    # Set CONT_WAVE, PLL_LOCK, and 0dBm in RF_SETUP
    client.poke(0x06,8+10+4+2);
    client.RF_setfreq(2480 * 10**6);
    
    #Print registers, just for fun.
    printconfig();
    
    client.poke(0x0A,0xDEADBEEF,5);
    #print "SMAC set to %010x" % client.RF_getsmac();
    if client.RF_getsmac()!=0xdeadbeef:
        print "ERROR: Failed to set MAC address.";

if(sys.argv[1]=="carrier"):
    if len(sys.argv)>2:
        client.RF_setfreq(eval(sys.argv[2]));
    client.RF_carrier();
    printconfig();
    print "\nHolding a carrier wave.";
    while(1):
        time.sleep(1);
if(sys.argv[1]=="regs"):
    for r in range(0,0x20):
        print "r[0x%02x]=0x%010x" % (r,client.peek(r));

if(sys.argv[1]=="sniffob"):
    #Reversal of transmitter code from nRF_CMD.c of OpenBeacon
    #TODO remove all poke() calls.
    
    client.poke(0x00,0x00); #Stop nRF
    client.poke(0x01,0x00); #Disable Shockburst
    client.poke(0x02,0x01); #Set RX Pipe 0
    client.RF_setmaclen(5); # SETUP_AW for 5-byte addresses.
    client.RF_setfreq(2481 * 10**6);
    client.poke(0x06,0x09); #2MBps, -18dBm in RF_SETUP
    client.poke(0x07,0x78); #Reset status register
    
    #OpenBeacon defines these in little endian as follows.
    #0x01, 0x02, 0x03, 0x02, 0x01
    client.RF_setsmac(0x0102030201);
    #'O', 'C', 'A', 'E', 'B'
    client.RF_settmac(0x424541434F);
    
    #Set packet length of 16.
    client.RF_setpacketlen(16);
    
    #Power radio, prime for RX, checksum.
    client.poke(0x00,0x70|0x03|0x08);
    
    print "Listening as %010x on %i MHz" % (client.RF_getsmac(),
                                           client.RF_getfreq()/10**6);
    #Now we're ready to get packets.
    
    while 1:
        packet=None;
        while packet==None:
            #time.sleep(0.1);
            packet=client.RF_rxpacket();
        printpacket(packet);
        sys.stdout.flush();
